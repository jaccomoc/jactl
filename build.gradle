/*
 * Copyright 2022 James Crawford
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.0'
    id 'java'
}

group 'jacsal'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

sourceSets {
    test {
        resources {
            srcDirs = ["src/test/resources", "src/main/tools"] // , "src/main/java"
        }
    }
}

dependencies {
    implementation 'org.ow2.asm:asm:9.3'
    implementation 'org.ow2.asm:asm-util:9.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

tasks.withType(JavaCompile) { options.deprecation = true }
task testJar(type: Jar) {
    from sourceSets.test.output
    archiveClassifier = 'tests'
}

test { useJUnitPlatform() }

jar {
    duplicatesStrategy 'exclude'
    manifest {
        attributes "Main-Class": "jacsal.Jacsal"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

shadowJar {
    relocate 'org.objectweb.asm', 'jacsal.ow2.asm'
    archiveClassifier.set('')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }

        mavenTests(MavenPublication) {
            groupId project.group
            artifactId "${project.name}"
            version project.version
            artifact testJar
        }
    }
    repositories {
        mavenLocal()
    }
}

tasks.generateMetadataFileForMavenJavaPublication.mustRunAfter(testJar)
tasks.publishMavenTestsPublicationToMavenLocal.dependsOn(jar)
