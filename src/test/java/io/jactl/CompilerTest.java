/*
 * Copyright Â© 2022,2023 James Crawford
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package io.jactl;

import io.jactl.compiler.Compiler;
import io.jactl.runtime.RuntimeState;
import org.junit.jupiter.api.Test;

import java.io.*;
import java.math.BigDecimal;
import java.util.*;
import java.util.function.BiConsumer;
import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.*;

class CompilerTest extends BaseTest {

  @Test public void comments() {
    test("  // Strip '#' comments\n1", 1);
    test("[1,2,3].map{it}", Utils.listOf(1,2,3));
    test("[1,2,3].map{\n\nit}", Utils.listOf(1,2,3));
    test("[1,2,3].map{\n // Strip '#' comments\nit}", Utils.listOf(1,2,3));
  }

  @Test public void literals() {
    test("42", 42);
    test("0", 0);
    test("1", 1);
    test("2", 2);
    test("3", 3);
    test("4", 4);
    test("5", 5);
    test("6", 6);
    test(Byte.toString(Byte.MAX_VALUE), (int) Byte.MAX_VALUE);
    test(Integer.toString(Byte.MAX_VALUE + 1), (int) Byte.MAX_VALUE + 1);
    test(Short.toString(Short.MAX_VALUE), (int) Short.MAX_VALUE);
    test(Integer.toString(Short.MAX_VALUE + 1), (int) Short.MAX_VALUE + 1);
    test(Integer.toString(Integer.MAX_VALUE), Integer.MAX_VALUE);
    test("" + 0xFFFFFFFF, -1);
    testError("12345123451234512345L", "number too large");
    testError("" + (0xFFFFFFFFL + 1L), "number too large");
    test("" + ((long) Integer.MAX_VALUE + 1L) + "L", (long) Integer.MAX_VALUE + 1L);
    test("1D", 1D);
    test("1.0D", 1.0D);
    test("0.0D", 0.0D);
    test("0.1D", 0.1D);
    test("1.0", "#1.0");
    test("0.0", "#0.0");
    test("0.1", "#0.1");
    test("0.123456789123456789", "#0.123456789123456789");
    test("''", "");
    test("'123'", "123");
    test("'1\\'23'", "1'23");
    test("'''1'23'''", "1'23");
    test("'''1'23''\\''''", "1'23'''");
    test("'\\t\\f\\b\\r\\n'", "\t\f\b\r\n");
    test("true", true);
    test("false", false);
    test("null", null);
    testError("0b", "missing digits");
    testError("0B", "missing digits");
    testError("0b1234", "unexpected token");
    test("0b101", 5);
    test("0B101", 5);
    test("0b1000L", 8L);
    test("0b10101010101010101010101010101010101010101010101010L", 0b10101010101010101010101010101010101010101010101010L);
    test("0B10101010101010101010101010101010101010101010101010L", 0b10101010101010101010101010101010101010101010101010L);
    testError("0B10101010101010101010101010101010101010101010101010", "too large");
    test("0B1010101010101010101010101010101010101010101010101010101010101010L", -6148914691236517206L);
    testError("0B10101010101010101010101010101010101010101010101010101010101010100L", "too large");
    testError("0x", "missing digits");
    testError("0X", "missing digits");
    testError("0xg1234", "missing digits");
    test("0xabcdef", 0xabcdef);
    test("0XABCDEF", 0xabcdef);
    testError("0xAbCdEf1234", "too large");
    test("0xAbCdEf1234567890L", 0xAbCdEf1234567890L);
    test("" + 0xAbCdEf1234567890L + "L", 0xAbCdEf1234567890L);
    testError("0xAbCdEf12345678901L", "too large");
    test("0xAbCdEf1234L", 0xabcdef1234L);
    testError("18446744073709551615L", "too large");
    testError("18446744073709551616L", "too large");
  }

  @Test public void booleanConversion() {
    test("!-1", false);
    test("!1", false);
    test("!2", false);
    test("!0", true);
    test("!-0", true);
    test("!-1L", false);
    test("!2L", false);
    test("!0L", true);
    test("!-0L", true);
    test("!null", true);
    test("!0.0", true);
    test("!-0.0", true);
    test("!1.0", false);
    test("!-1.0", false);
    test("!2.0", false);
    test("!0.0D", true);
    test("!-0.0D", true);
    test("!1.0D", false);
    test("!-1.0D", false);
    test("!2.0D", false);
    test("!'x'", false);
    test("!''", true);
    test("[] && true", false);
    test("[1] && true", true);
    test("[:] && true", false);
    test("[a:1] && true", true);
    test("def x; [a:1].each{ x = it && true }; x", true);
  }

  @Test public void constUnaryExpressions() {
    test("-1", -1);
    test("-1D", -1D);
    test("-1L", -1L);
    test("-1.0", "#-1.0");
    test("+1", 1);
    test("+1D", 1D);
    test("+1L", 1L);
    test("+1.0", "#1.0");
    test("+-1", -1);
    test("+-1D", -1D);
    test("+-1L", -1L);
    test("+-1.0", "#-1.0");
    test("-+1", -1);
    test("-+1D", -1D);
    test("-+1L", -1L);
    test("-+1.0", "#-1.0");
    test("- -1", 1);
    test("- -1D", 1D);
    test("- -1L", 1L);
    test("- -1.0", "#1.0");
    test("-(-1)", 1);
    test("-(-1D)", 1D);
    test("-(-1L)", 1L);
    test("-(-1.0)", "#1.0");
    test("-+1", -1);
    test("- -1", 1);
    test("-(-1)", 1);
    test("-+(-1)", 1);
    test("- -(-1)", -1);
    test("-+(+-1)", 1);
    test("- -(- -1)", 1);
    testError("-true", "cannot be applied to type");
    testError("-'abc'", "cannot be applied to type");
    testError("+true", "cannot be applied to type");
    testError("+'abc'", "cannot be applied to type");
    test("!true", false);
    test("!false", true);
    test("!!true", true);
    test("!!false", false);
    test("!(!!true)", false);
    test("!!(!false)", true);
    test("true && true", true);
    test("false && true", false);
    test("true && false", false);
    test("false && false", false);
    test("true || true", true);
    test("false || true", true);
    test("true || false", true);
    test("false || false", false);
    test("!false || false", true);
    test("false || true && false", false);
    test("true  || true && false", true);
    test("true  || true && true", true);
    test("false || !false && true", true);
    test("null && true", false);
    test("true && null", false);
    test("null && null", false);
    test("null || true", true);
    test("true || null", true);
    test("false || null", false);
    test("null || false", false);
  }

  @Test public void simpleConstExpressions() {
    testError("(byte)1 + true", "non-numeric operand for right-hand side");
    testError("1 + true", "non-numeric operand for right-hand side");
    testError("false + 1", "non-numeric operand for left-hand side");
    testError("false + (byte)1", "non-numeric operand for left-hand side");
    testError("1 - 'abc'", "non-numeric operand for right-hand side");
    testError("'abc' - 1", "non-numeric operand for left-hand side");
    testError("false + true", "non-numeric operand for left-hand side");
    testError("1 + null", "null operand for right-hand side");
    testError("null + 1", "null operand for left-hand side");
    testError("1/0", "divide by zero");
    test("1.0D/0", Double.POSITIVE_INFINITY);
    test("-1.0D/0", Double.NEGATIVE_INFINITY);
    testError("1L/0", "divide by zero");
    testError("1.0/0", "divide by zero");
    testError("1/0.0", "divide by zero");
    testError("1%0", "divide by zero");
    testError("(byte)1%0", "divide by zero");
    testError("(byte)1%(byte)0", "divide by zero");
    testError("1 % 0", "divide by zero");
    testError("1 % (byte)0", "divide by zero");
    test("1.0D%(byte)0", Double.NaN);
    test("1.0D%0", Double.NaN);
    test("-1.0D%0", Double.NaN);
    test("1.0D % 0", Double.NaN);
    test("-1.0D % 0", Double.NaN);
    testError("1L%0", "divide by zero");
    testError("1.0%0", "divide by zero");
    testError("1%0.0", "divide by zero");
    testError("1L % 0", "divide by zero");
    testError("1L % (byte)0", "divide by zero");
    testError("1.0 % (byte)0", "divide by zero");
    testError("1.0 % 0", "divide by zero");
    testError("1 % 0.0", "divide by zero");
    test("(byte)-1", (byte)-1);
    test("(byte)-1 + 1", 256);
    test("(byte)1 + (byte)2", (byte)3);
    test("1 + (byte)2", 3);
    test("1 + 2", 3);
    test("1 - (byte)2", -1);
    test("(byte)1 - (byte)2", (byte)-1);
    test("1 - 2", -1);
    test("1 - -2", 3);
    test("(byte)2 * 3", 6);
    test("(byte)2 * (byte)3", (byte)6);
    test("2 * 3", 6);
    test("(byte)6 / 3", 2);
    test("6 / (byte)3", 2);
    test("(byte)6 / (byte)3", (byte)2);
    test("6 / 3", 2);
    test("(byte)13 % 3", 1);
    test("13 % (byte)3", 1);
    test("(byte)13 % (byte)3", (byte)1);
    test("13 % 3", 1);
    test("-13 % 3", 2);
    test("13 % -3", -2);
    test("-13 % -3", -1);
    test("(byte)8 %% 5", 3);
    test("8 %% (byte)5", 3);
    test("(byte)8 %% (byte)5", (byte)3);
    test("8 %% 5", 3);
    test("8 %% 1", 0);
    test("-8 %% 5", -3);
    test("-8 %% 1", 0);
    test("8 % (byte)5", 3);
    test("8 % 5", 3);
    test("(byte)8 % 5", 3);
    test("(byte)8 % (byte)5", (byte)3);
    test("8 % 1", 0);
    test("-8 % (byte)5", 2);
    test("(byte)-8 % 5", (-8 & 0xff) % 5);
    test("(byte)-8 % (byte)5", (byte)((-8 & 0xff) % 5));
    test("-8 % 5", 2);
    test("-8 % 1", 0);
    test("8 %% (byte)-5", 8);
    test("(byte)8 %% -5", 3);
    test("(byte)8 %% (byte)-5", (byte)8);
    test("8 %% -5", 3);
    test("(byte)8 % -1", 0);
    test("(byte)8 %% -1", 0);
    test("(byte)8 % -(byte)1", (byte)8);
    test("(byte)8 %% -(byte)1", (byte)8);
    test("8 %% -1", 0);
    test("-8 %% -5", -3);
    test("-8 %% -1", 0);
    test("8 % (byte)-5", 8);
    test("(byte)8 % -5", -2);
    test("(byte)8 % (byte)-5", (byte)8);
    test("8 % -5", -2);
    test("8 % -1", 0);
    test("-8 % -5", -3);
    test("-8 % -1", 0);
    test("1L + 2L", 3L);
    test("1L - 2L", -1L);
    test("1L - -2L", 3L);
    test("2L * 3L", 6L);
    test("6L / 3L", 2L);
    test("8L %% 5L", 3L);
    test("-8L %% 5L", -3L);
    test("8L % 5L", 3L);
    test("-8L % 5L", 2L);
    test("8L %% -5L", 3L);
    test("-8L %% -5L", -3L);
    test("8L % -5L", -2L);
    test("-8L % -5L", -3L);
    test("1 + 2L", 3L);
    test("1L - 2", -1L);
    test("1 - -2L", 3L);
    test("2L * 3", 6L);
    test("6 / 3L", 2L);
    test("8L %% 5", 3L);
    test("-8L %% 5", -3L);
    test("8L % 5", 3L);
    test("-8L % 5", 2L);
    test("8 %% 5L", 3L);
    test("-8 %% 5L", -3L);
    test("8 % 5L", 3L);
    test("-8 % 5L", 2L);
    test("8L %% -5", 3L);
    test("-8L %% -5", -3L);
    test("8L % -5", -2L);
    test("-8L % -5", -3L);
    test("8 %% -5L", 3L);
    test("-8 %% -5L", -3L);
    test("8 % -5L", -2L);
    test("-8 % -5L", -3L);
    test("1.0D + 2.0D", 3.0D);
    test("1.0D - 2.0D", -1.0D);
    test("1.0D - -2.0D", 3.0D);
    test("2.0D * 3.0D", 6D);
    test("6.0D / 3.0D", 2.0D);
    test("8.0D %% 5.0D", 3D);
    test("-8.0D %% 5.0D", -3D);
    test("8.0D % 5.0D", 3D);
    test("-8.0D % 5.0D", 2D);
    test("8.0D %% -5.0D", 3D);
    test("-8.0D %% -5.0D", -3D);
    test("8.0D % -5.0D", -2D);
    test("-8.0D % -5.0D", -3D);
    test("1L + 2.0D", 3.0D);
    test("1.0D - 2L", -1.0D);
    test("1L - -2.0D", 3.0D);
    test("2.0D * 3L", 6D);
    test("6L / 3.0D", 2.0D);
    test("8.0D %% 5L", 3D);
    test("-8.0D %% 5L", -3D);
    test("8.0D % 5L", 3D);
    test("-8.0D % 5L", 2D);
    test("8.0D %% -5L", 3D);
    test("-8.0D %% -5L", -3D);
    test("8.0D % -5L", -2D);
    test("-8.0D % -5L", -3D);
    test("1.0 + 2.0", "#3.0");
    test("1.0 - 2.0", "#-1.0");
    test("1.0 - -2.0", "#3.0");
    test("2.0 * 3.0", "#6.00");
    test("6.0 / 3.0", "#2");
    test("6.0 / 7.0", "#0.8571428571");
    test("8.0 %% 5.0", "#3.0");
    test("-8.0 %% 5.0", "#-3.0");
    test("8.0 % 5.0", "#3.0");
    test("-8.0 % 5.0", "#2.0");
    test("8.0 %% -5.0", "#3.0");
    test("-8.0 %% -5.0", "#-3.0");
    test("8.0 % -5.0", "#-2.0");
    test("-8.0 % -5.0", "#-3.0");
    test("1 + 2D", 3D);
    test("1D - (byte)2", -1D);
    test("1D - 2", -1D);
    test("1 - -2D", 3D);
    test("2D * (byte)3", 6D);
    test("2D * 3", 6D);
    test("6 / 3D", 2D);
    test("8D %% (byte)5", 3D);
    test("8D %% 5", 3D);
    test("-8D %% 5", -3D);
    test("8 %% 5D", 3D);
    test("(byte)-8 %% 5D", 3D);
    test("-8 %% 5D", -3D);
    test("8D % 5", 3D);
    test("-8D % (byte)5", 2D);
    test("-8D % 5", 2D);
    test("8 % 5D", 3D);
    test("-8 % 5D", 2D);
    test("8D %% -5", 3D);
    test("-8D %% -5", -3D);
    test("8 %% -5D", 3D);
    test("-8 %% -5D", -3D);
    test("8D % -5", -2D);
    test("-8D % -5", -3D);
    test("8 % -5D", -2D);
    test("-8 % -5D", -3D);
    test("(byte)1 + 2.0", "#3.0");
    test("1 + 2.0", "#3.0");
    test("1.0 - (byte)2", "#-1.0");
    test("1.0 - 2", "#-1.0");
    test("(byte)1 - -2.0", "#3.0");
    test("1 - -2.0", "#3.0");
    test("2.0 * 3", "#6.0");
    test("(byte)6 / 3.0", "#2");
    test("6 / 3.0", "#2");
    test("6.0 / (byte)3", "#2.0");
    test("6.0 / 3", "#2.0");
    test("8.0 %% (byte)5", "#3.0");
    test("8.0 %% 5", "#3.0");
    test("(byte)8 %% 5.0", "#3.0");
    test("8 %% 5.0", "#3.0");
    test("-8.0 %% 5", "#-3.0");
    test("-8 %% 5.0", "#-3.0");
    test("8.0 % 5", "#3.0");
    test("8 % 5.0", "#3.0");
    test("-8.0 % 5", "#2.0");
    test("-8 % 5.0", "#2.0");
    test("8.0 %% (byte)-5", "#8.0");
    test("8.0 %% -5", "#3.0");
    test("8 %% -5.0", "#3.0");
    test("-8.0 %% -5", "#-3.0");
    test("(byte)-8 %% -5.0", "#3.0");
    test("-8 %% -5.0", "#-3.0");
    test("8.0 % -5", "#-2.0");
    test("8 % -5.0", "#-2.0");
    test("-8.0 % -5", "#-3.0");
    test("-8 % -5.0", "#-3.0");
    test("1L + 2.0", "#3.0");
    test("1.0 - 2L", "#-1.0");
    test("1L - -2.0", "#3.0");
    test("2.0 * 3L", "#6.0");
    test("6L / 3.0", "#2");
    test("8.0 %% 5L", "#3.0");
    test("8L %% 5.0", "#3.0");
    test("-8.0 %% 5L", "#-3.0");
    test("-8L %% 5.0", "#-3.0");
    test("8.0 % 5L", "#3.0");
    test("8L % 5.0", "#3.0");
    test("-8.0 % 5L", "#2.0");
    test("-8L % 5.0", "#2.0");
    test("8.0 %% -5L", "#3.0");
    test("8L %% -5.0", "#3.0");
    test("-8.0 %% -5L", "#-3.0");
    test("-8L %% -5.0", "#-3.0");
    test("8.0 % -5L", "#-2.0");
    test("8L % -5.0", "#-2.0");
    test("-8.0 % -5L", "#-3.0");
    test("-8L % -5.0", "#-3.0");
    test("1D + 2.0", "#3.0");
    test("1.0 - 2D", "#-1.0");
    test("1D - -2.0", "#3.0");
    test("2.0 * 3D", "#6.00");
    test("6D / 3.0", "#2");
    test("8.0 %% 5D", "#3.0");
    test("8D %% 5.0", "#3.0");
    test("-8.0 %% 5D", "#-3.0");
    test("-8D %% 5.0", "#-3.0");
    test("8.0 % 5D", "#3.0");
    test("8D % 5.0", "#3.0");
    test("-8.0 % 5D", "#2.0");
    test("-8D % 5.0", "#2.0");
    test("8.0 %% -5D", "#3.0");
    test("8D %% -5.0", "#3.0");
    test("-8.0 %% -5D", "#-3.0");
    test("-8D %% -5.0", "#-3.0");
    test("8.0 % -5D", "#-2.0");
    test("8D % -5.0", "#-2.0");
    test("-8.0 % -5D", "#-3.0");
    test("-8D % -5.0", "#-3.0");
  }

  @Test public void simpleVariableArithmetic() {
    testError("int _ = 1", "expecting identifier");
    testError("int $a = 1", "expecting identifier");
    testError("int a = 1; $a", "unexpected token '$'");
    testError("int a = 1; $_", "unexpected token '$'");
    testError("int : = 1", "expected start of expression");
    test("int a = 1", 1);
    test("int _1 = 1", 1);
    test("List x = [[1,2],[3,4]]; def h = x[1][0]\nh", 3);
    test("def x = [[1,2],[3,4]]; def h = x[1][0]\nh", 3);
    test("Object x = [[1,2],[3,4]]; Object h = x[1][0]\nh", 3);
    testError("int x = 1; boolean b = true; x + b", "non-numeric operand for right-hand side");
    testError("def x = 1; def b = true; x + b", "non-numeric operand for right-hand side");
    testError("Object x = 1; Object b = true; x + b", "non-numeric operand for right-hand side");
    testError("boolean b = false; int x = 1; b + x", "non-numeric operand for left-hand side");
    testError("def b = false; def x = 1; b + x", "non-numeric operand for left-hand side");
    testError("int i = 1; String s = 'abc'; i - s", "non-numeric operand for right-hand side");
    testError("def i = 1; def s = 'abc'; i - s", "non-numeric operand for right-hand side");
    testError("'abc' - 1", "non-numeric operand for left-hand side");
    testError("String s = 'abc'; int x = 1; s - x", "non-numeric operand for left-hand side");
    testError("def s = 'abc'; def x = 1; s - x", "non-numeric operand for left-hand side");
    testError("boolean b1 = false; boolean b2 = true; b1 + b2", "non-numeric operand for left-hand side");
    testError("def b1 = false; def b2 = true; b1 + b2", "non-numeric operand for left-hand side");
    testError("int i = 1; def x = null; i + x", "null operand for right-hand side");
    testError("def i = 1; def x = null; i + x", "null operand for right-hand side");
    testError("def x = null; int i = 1; x + i", "null operand for left-hand side");
    testError("def x = null; def i = 1; x + i", "null operand for left-hand side");
    testError("int x = 1; int y = 0; x/y", "divide by zero");
    testError("def x = 1; def y = 0; x/y", "divide by zero");
    test("double x = 1.0D; int y = 0; x/y", Double.POSITIVE_INFINITY);
    test("def x = 1.0D; def y = 0; x/y", Double.POSITIVE_INFINITY);
    test("double x = -1.0D; int y = 0; x / y", Double.NEGATIVE_INFINITY);
    test("double x = -1.0D; double y = 0; x / y", Double.NEGATIVE_INFINITY);
    test("def x = -1.0D; def y = 0; x / y", Double.NEGATIVE_INFINITY);
    testError("long x = 1L; int y = 0; x/y", "divide by zero");
    testError("def x = 1L; def y = 0; x/y", "divide by zero");
    testError("Decimal x = 1.0; int y = 0; x/y", "divide by zero");
    testError("Decimal x = 1.0; Decimal y = 0; x/y", "divide by zero");
    testError("Decimal x = 1.0; long y = 0; x/y", "divide by zero");
    testError("Decimal x = 1.0; double y = 0; x/y", "divide by zero");
    testError("def x = 1.0; def y = 0; x/y", "divide by zero");
    testError("Object x = 1.0; def y = 0; x/y", "divide by zero");
    testError("def x = 1.0; def y = 0D; x/y", "divide by zero");
    testError("def x = 1.0; def y = 0L; x/y", "divide by zero");
    testError("def x = 1.0; def y = 0.0; x/y", "divide by zero");
    testError("int x = 1; Decimal y = 0.0; x/y", "divide by zero");
    testError("def x = 1; def y = 0.0; x/y", "divide by zero");
    testError("int x = 1; int y = 0; x %% y", "divide by zero");
    testError("def x = 1; def y = 0; x %% y", "divide by zero");
    test("double x = 1.0D; int y = 0; x %% y", Double.NaN);
    test("def x = 1.0D; def y = 0; x %% y", Double.NaN);
    test("def x = 1.0D; def y = 0L; x %% y", Double.NaN);
    test("double x = -1.0D; int y = 0; x %% y", Double.NaN);
    test("def x = -1.0D; def y = 0; x %% y", Double.NaN);
    testError("long x = 1L; int y = 0; x %% y", "divide by zero");
    testError("def x = 1L; def y = 0; x %% y", "divide by zero");
    testError("Decimal x = 1.0; int y = 0; x %% y", "divide by zero");
    testError("def x = 1.0; def y = 0; x %% y", "divide by zero");
    testError("int x = 1; Decimal y = 0.0; x %% y", "divide by zero");
    testError("def x = 1; def y = 0.0; x %% y", "divide by zero");
    testError("int x = 1; int y = 0; x % y", "divide by zero");
    testError("def x = 1; def y = 0; x % y", "divide by zero");
    test("double x = 1.0D; int y = 0; x % y", Double.NaN);
    test("def x = 1.0D; def y = 0; x % y", Double.NaN);
    test("def x = 1.0D; def y = 0L; x % y", Double.NaN);
    test("double x = -1.0D; int y = 0; x % y", Double.NaN);
    test("def x = -1.0D; def y = 0; x % y", Double.NaN);
    testError("long x = 1L; int y = 0; x % y", "divide by zero");
    testError("def x = 1L; def y = 0; x % y", "divide by zero");
    testError("Decimal x = 1.0; int y = 0; x % y", "divide by zero");
    testError("def x = 1.0; def y = 0; x % y", "divide by zero");
    testError("int x = 1; Decimal y = 0.0; x % y", "divide by zero");
    testError("def x = 1; def y = 0.0; x % y", "divide by zero");
    test("int x = 1; int y = 2; x + y", 3);
    test("def x = 1; def y = 2; x + y", 3);
    test("int x = 1; def y = 2; x + y", 3);
    test("def x = 1; int y = 2; x + y", 3);
    test("int x = 1; int y = 2; x - y", -1);
    test("def x = 1; def y = 2; x - y", -1);
    test("def x = 1; int y = 2; x - y", -1);
    test("int x = 1; def y = 2; x - y", -1);
    test("int x = 1; Object y = 2; x - y", -1);
    test("int x = 1; int y = 2; x - -y", 3);
    test("def x = 1; def y = 2; x - -y", 3);
    test("def x = 1; int y = 2; x - -y", 3);
    test("int x = 1; def y = 2; x - -y", 3);
    test("int x = 2; int y = 3; x * y", 6);
    test("def x = 2; def y = 3; x * y", 6);
    test("int x = 2; def y = 3; x * y", 6);
    test("def x = 2; int y = 3; x * y", 6);
    test("int x = 6; int y = 3; x / y", 2);
    test("def x = 6; def y = 3; x / y", 2);
    test("int x = 6; def y = 3; x / y", 2);
    test("def x = 6; int y = 3; x / y", 2);
    test("int x = 8; int y = 5; x %% y", 3);
    test("def x = 8; def y = 5; x %% y", 3);
    test("int x = 8; def y = 5; x %% y", 3);
    test("def x = 8; int y = 5; x %% y", 3);
    test("int x = 8; int y = 1; x %% y", 0);
    test("def x = 8; def y = 1; x %% y", 0);
    test("int x = 8; def y = 1; x %% y", 0);
    test("def x = 8; int y = 1; x %% y", 0);
    test("int x = -8; int y = 5; x %% y", -3);
    test("def x = -8; def y = 5; x %% y", -3);
    test("int x = -8; def y = 5; x %% y", -3);
    test("def x = -8; int y = 5; x %% y", -3);
    test("int x = -8; int y = 1; x %% y", 0);
    test("def x = -8; def y = 1; x %% y", 0);
    test("int x = -8; def y = 1; x %% y", 0);
    test("def x = -8; int y = 1; x %% y", 0);
    test("int x = 8; int y = 5; x % y", 3);
    test("def x = 8; def y = 5; x % y", 3);
    test("int x = 8; def y = 5; x % y", 3);
    test("def x = 8; int y = 5; x % y", 3);
    test("int x = 8; int y = 1; x % y", 0);
    test("def x = 8; def y = 1; x % y", 0);
    test("int x = 8; def y = 1; x % y", 0);
    test("def x = 8; int y = 1; x % y", 0);
    test("int x = -8; int y = 5; x % y", 2);
    test("def x = -8; def y = 5; x % y", 2);
    test("int x = -8; def y = 5; x % y", 2);
    test("def x = -8; int y = 5; x % y", 2);
    test("int x = -8; int y = 1; x % y", 0);
    test("def x = -8; def y = 1; x % y", 0);
    test("int x = -8; def y = 1; x % y", 0);
    test("def x = -8; int y = 1; x % y", 0);
    test("byte x = (byte)1; byte y = (byte)2; x + y", (byte)3);
    test("def x = (byte)1; def y = (byte)2; x + y", (byte)3);
    test("byte x = (byte)1; def y = (byte)2; x + y", (byte)3);
    test("def x = (byte)1; byte y = (byte)2; x + y", (byte)3);
    test("byte x = (byte)1; byte y = (byte)2; x - y", (byte)-1);
    test("def x = (byte)1; def y = (byte)2; x - y", (byte)-1);
    test("def x = (byte)1; byte y = (byte)2; x - y", (byte)-1);
    test("byte x = (byte)1; def y = (byte)2; x - y", (byte)-1);
    test("byte x = (byte)1; Object y = (byte)2; x - y", (byte)-1);
    test("byte x = (byte)1; byte y = (byte)2; x - -y", (byte)3);
    test("def x = (byte)1; def y = (byte)2; x - -y", (byte)3);
    test("def x = (byte)1; byte y = (byte)2; x - -y", (byte)3);
    test("byte x = (byte)1; def y = (byte)2; x - -y", (byte)3);
    test("byte x = (byte)2; byte y = (byte)3; x * y", (byte)6);
    test("def x = (byte)2; def y = (byte)3; x * y", (byte)6);
    test("byte x = (byte)2; def y = (byte)3; x * y", (byte)6);
    test("def x = (byte)2; byte y = (byte)3; x * y", (byte)6);
    test("byte x = (byte)6; byte y = (byte)3; x / y", (byte)2);
    test("def x = (byte)6; def y = (byte)3; x / y", (byte)2);
    test("byte x = (byte)6; def y = (byte)3; x / y", (byte)2);
    test("def x = (byte)6; byte y = (byte)3; x / y", (byte)2);
    test("byte x = (byte)8; byte y = (byte)5; x %% y", (byte)3);
    test("def x = (byte)8; def y = (byte)5; x %% y", (byte)3);
    test("byte x = (byte)8; def y = (byte)5; x %% y", (byte)3);
    test("def x = (byte)8; byte y = (byte)5; x %% y", (byte)3);
    test("byte x = (byte)8; byte y = (byte)1; x %% y", (byte)0);
    test("def x = (byte)8; def y = (byte)1; x %% y", (byte)0);
    test("byte x = (byte)8; def y = (byte)1; x %% y", (byte)0);
    test("def x = (byte)8; byte y = (byte)1; x %% y", (byte)0);
    test("byte x = (byte)-8; byte y = (byte)5; x %% y", (byte)3);
    test("def x = (byte)-8; def y = (byte)5; x %% y", (byte)3);
    test("byte x = (byte)-8; def y = (byte)5; x %% y", (byte)3);
    test("def x = (byte)-8; byte y = (byte)5; x %% y", (byte)3);
    test("byte x = (byte)-8; byte y = (byte)1; x %% y", (byte)0);
    test("def x = (byte)-8; def y = (byte)1; x %% y", (byte)0);
    test("byte x = (byte)-8; def y = (byte)1; x %% y", (byte)0);
    test("def x = (byte)-8; byte y = (byte)1; x %% y", (byte)0);
    test("byte x = (byte)8; byte y = (byte)5; x % y", (byte)3);
    test("def x = (byte)8; def y = (byte)5; x % y", (byte)3);
    test("byte x = (byte)8; def y = (byte)5; x % y", (byte)3);
    test("def x = (byte)8; byte y = (byte)5; x % y", (byte)3);
    test("byte x = (byte)8; byte y = (byte)1; x % y", (byte)0);
    test("def x = (byte)8; def y = (byte)1; x % y", (byte)0);
    test("byte x = (byte)8; def y = (byte)1; x % y", (byte)0);
    test("def x = (byte)8; byte y = (byte)1; x % y", (byte)0);
    test("byte x = (byte)-8; byte y = (byte)5; x % y", (byte)3);
    test("def x = (byte)-8; def y = (byte)5; x % y", (byte)3);
    test("byte x = (byte)-8; def y = (byte)5; x % y", (byte)3);
    test("def x = (byte)-8; byte y = (byte)5; x % y", (byte)3);
    test("byte x = (byte)-8; byte y = (byte)1; x % y", (byte)0);
    test("def x = (byte)-8; def y = (byte)1; x % y", (byte)0);
    test("byte x = (byte)-8; def y = (byte)1; x % y", (byte)0);
    test("def x = (byte)-8; byte y = 1; x % y", (byte)0);
    test("long x = 1L; long y = 2L; x + y", 3L);
    test("def x = 1L; def y = 2L; x + y", 3L);
    test("long x = 1L; def y = 2L; x + y", 3L);
    test("def x = 1L; long y = 2L; x + y", 3L);
    test("long x = 1L; long y = 2L; x - y", -1L);
    test("def x = 1L; def y = 2L; x - y", -1L);
    test("long x = 1L; def y = 2L; x - y", -1L);
    test("def x = 1L; long y = 2L; x - y", -1L);
    test("long x = 1L; long y = 2L; x - -y", 3L);
    test("def x = 1L; def y = 2L; x - -y", 3L);
    test("long x = 1L; def y = 2L; x - -y", 3L);
    test("def x = 1L; long y = 2L; x - -y", 3L);
    test("long x = 2L; long y = 3L; x * y", 6L);
    test("def x = 2L; def y = 3L; x * y", 6L);
    test("long x = 2L; def y = 3L; x * y", 6L);
    test("def x = 2L; long y = 3L; x * y", 6L);
    test("long x = 6L; long y = 3L; x / y", 2L);
    test("def x = 6L; def y = 3L; x / y", 2L);
    test("long x = 6L; def y = 3L; x / y", 2L);
    test("def x = 6L; long y = 3L; x / y", 2L);
    test("long x = 8L; long y = 5L; x %% y", 3L);
    test("def x = 8L; def y = 5L; x %% y", 3L);
    test("long x = 8L; def y = 5L; x %% y", 3L);
    test("def x = 8L; long y = 5L; x %% y", 3L);
    test("long x = -8L; long y = 5L; x %% y", -3L);
    test("def x = -8L; def y = 5L; x %% y", -3L);
    test("long x = -8L; def y = 5L; x %% y", -3L);
    test("def x = -8L; long y = 5L; x %% y", -3L);
    test("long x = 8L; long y = 5L; x % y", 3L);
    test("def x = 8L; def y = 5L; x % y", 3L);
    test("long x = 8L; def y = 5L; x % y", 3L);
    test("def x = 8L; long y = 5L; x % y", 3L);
    test("long x = -8L; long y = 5L; x % y", 2L);
    test("def x = -8L; def y = 5L; x % y", 2L);
    test("long x = -8L; def y = 5L; x % y", 2L);
    test("def x = -8L; long y = 5L; x % y", 2L);
    test("def x = -8L; long y = 5L; 1 + x % y - 1", 2L);
    test("int x = 1; long y = 2L; x + y", 3L);
    test("def x = 1; def y = 2L; x + y", 3L);
    test("int x = 1; def y = 2L; x + y", 3L);
    test("def x = 1; long y = 2L; x + y", 3L);
    test("long x = 1L; int y = 2; x - y", -1L);
    test("def x = 1L; def y = 2; x - y", -1L);
    test("long x = 1L; def y = 2; x - y", -1L);
    test("def x = 1L; int y = 2; x - y", -1L);
    test("int x = 1; long y = 2L; x - -y", 3L);
    test("def x = 1; def y = 2L; x - -y", 3L);
    test("int x = 1; def y = 2L; x - -y", 3L);
    test("def x = 1; long y = 2L; x - -y", 3L);
    test("long x = 2L; int y = 3; x * y", 6L);
    test("def x = 2L; def y = 3; x * y", 6L);
    test("long x = 2L; def y = 3; x * y", 6L);
    test("def x = 2L; int y = 3; x * y", 6L);
    test("int x = 6; long y = 3L; x / y", 2L);
    test("def x = 6; def y = 3L; x / y", 2L);
    test("int x = 6; def y = 3L; x / y", 2L);
    test("def x = 6; long y = 3L; x / y", 2L);
    test("long x = 8L; int y = 5; x %% y", 3L);
    test("def x = 8L; def y = 5; x %% y", 3L);
    test("long x = 8L; def y = 5; x %% y", 3L);
    test("def x = 8L; int y = 5; x %% y", 3L);
    test("int x = 8; long y = 5L; x %% y", 3L);
    test("def x = 8; def y = 5L; x %% y", 3L);
    test("int x = 8; def y = 5L; x %% y", 3L);
    test("def x = 8; long y = 5L; x %% y", 3L);
    test("long x = -8L; int y = 5; x %% y", -3L);
    test("def x = -8L; def y = 5; x %% y", -3L);
    test("long x = -8L; def y = 5; x %% y", -3L);
    test("def x = -8L; int y = 5; x %% y", -3L);
    test("int x = -8; long y = 5L; x %% y", -3L);
    test("def x = -8; def y = 5L; x %% y", -3L);
    test("int x = -8; def y = 5L; x %% y", -3L);
    test("def x = -8; long y = 5L; x %% y", -3L);
    test("long x = 8L; int y = 5; x % y", 3L);
    test("def x = 8L; def y = 5; x % y", 3L);
    test("long x = 8L; def y = 5; x % y", 3L);
    test("def x = 8L; int y = 5; x % y", 3L);
    test("int x = 8; long y = 5L; x % y", 3L);
    test("def x = 8; def y = 5L; x % y", 3L);
    test("int x = 8; def y = 5L; x % y", 3L);
    test("def x = 8; long y = 5L; x % y", 3L);
    test("long x = -8L; int y = 5; x % y", 2L);
    test("def x = -8L; def y = 5; x % y", 2L);
    test("long x = -8L; def y = 5; x % y", 2L);
    test("def x = -8L; int y = 5; x % y", 2L);
    test("int x = -8; long y = 5L; x % y", 2L);
    test("def x = -8; def y = 5L; x % y", 2L);
    test("int x = -8; def y = 5L; x % y", 2L);
    test("def x = -8; long y = 5L; x % y", 2L);
    test("byte x = 1; long y = 2L; x + y", 3L);
    test("def x = 1; def y = 2L; x + y", 3L);
    test("byte x = 1; def y = 2L; x + y", 3L);
    test("def x = 1; long y = 2L; x + y", 3L);
    test("long x = 1L; byte y = 2; x - y", -1L);
    test("def x = 1L; def y = 2; x - y", -1L);
    test("long x = 1L; def y = 2; x - y", -1L);
    test("def x = 1L; byte y = 2; x - y", -1L);
    test("byte x = 1; long y = 2L; x - -y", 3L);
    test("def x = 1; def y = 2L; x - -y", 3L);
    test("byte x = 1; def y = 2L; x - -y", 3L);
    test("def x = 1; long y = 2L; x - -y", 3L);
    test("long x = 2L; byte y = 3; x * y", 6L);
    test("def x = 2L; def y = 3; x * y", 6L);
    test("long x = 2L; def y = 3; x * y", 6L);
    test("def x = 2L; byte y = 3; x * y", 6L);
    test("byte x = 6; long y = 3L; x / y", 2L);
    test("def x = 6; def y = 3L; x / y", 2L);
    test("byte x = 6; def y = 3L; x / y", 2L);
    test("def x = 6; long y = 3L; x / y", 2L);
    test("long x = 8L; byte y = 5; x %% y", 3L);
    test("def x = 8L; def y = 5; x %% y", 3L);
    test("long x = 8L; def y = 5; x %% y", 3L);
    test("def x = 8L; byte y = 5; x %% y", 3L);
    test("byte x = 8; long y = 5L; x %% y", 3L);
    test("def x = 8; def y = 5L; x %% y", 3L);
    test("byte x = 8; def y = 5L; x %% y", 3L);
    test("def x = 8; long y = 5L; x %% y", 3L);
    test("long x = -8L; byte y = 5; x %% y", -3L);
    test("def x = -8L; def y = 5; x %% y", -3L);
    test("long x = -8L; def y = 5; x %% y", -3L);
    test("def x = -8L; byte y = 5; x %% y", -3L);
    test("byte x = -8; long y = 5L; x %% y", 3L);
    test("def x = -8; def y = 5L; x %% y", -3L);
    test("byte x = -8; def y = 5L; x %% y", 3L);
    test("def x = -8; long y = 5L; x %% y", -3L);
    test("long x = 8L; byte y = 5; x % y", 3L);
    test("def x = 8L; def y = 5; x % y", 3L);
    test("long x = 8L; def y = 5; x % y", 3L);
    test("def x = 8L; byte y = 5; x % y", 3L);
    test("byte x = 8; long y = 5L; x % y", 3L);
    test("def x = 8; def y = 5L; x % y", 3L);
    test("byte x = 8; def y = 5L; x % y", 3L);
    test("def x = 8; long y = 5L; x % y", 3L);
    test("long x = -8L; byte y = 5; x % y", 2L);
    test("def x = -8L; def y = 5; x % y", 2L);
    test("long x = -8L; def y = 5; x % y", 2L);
    test("def x = -8L; byte y = 5; x % y", 2L);
    test("byte x = -8; long y = 5L; x % y", 3L);
    test("def x = -8; def y = 5L; x % y", 2L);
    test("def x = -8; long y = 5L; x % y", 2L);
    test("byte x = 1; int y = 2; x + y", 3);
    test("def x = 1; def y = 2; x + y", 3);
    test("byte x = 1; def y = 2; x + y", 3);
    test("def x = 1; int y = 2; x + y", 3);
    test("int x = 1; byte y = 2; x - y", -1);
    test("def x = 1; def y = 2; x - y", -1);
    test("int x = 1; def y = 2; x - y", -1);
    test("def x = 1; byte y = 2; x - y", -1);
    test("byte x = 1; int y = 2; x - -y", 3);
    test("def x = 1; def y = 2; x - -y", 3);
    test("byte x = 1; def y = 2; x - -y", 3);
    test("def x = 1; int y = 2; x - -y", 3);
    test("int x = 2; byte y = 3; x * y", 6);
    test("def x = 2; def y = 3; x * y", 6);
    test("int x = 2; def y = 3; x * y", 6);
    test("def x = 2; byte y = 3; x * y", 6);
    test("byte x = 6; int y = 3; x / y", 2);
    test("def x = 6; def y = 3; x / y", 2);
    test("byte x = 6; def y = 3; x / y", 2);
    test("def x = 6; int y = 3; x / y", 2);
    test("int x = 8; byte y = 5; x %% y", 3);
    test("def x = 8; def y = 5; x %% y", 3);
    test("int x = 8; def y = 5; x %% y", 3);
    test("def x = 8; byte y = 5; x %% y", 3);
    test("byte x = 8; int y = 5; x %% y", 3);
    test("def x = 8; def y = 5; x %% y", 3);
    test("byte x = 8; def y = 5; x %% y", 3);
    test("def x = 8; int y = 5; x %% y", 3);
    test("int x = -8; byte y = 5; x %% y", -3);
    test("def x = -8; def y = 5; x %% y", -3);
    test("int x = -8; def y = 5; x %% y", -3);
    test("def x = -8; byte y = 5; x %% y", -3);
    test("byte x = -8; int y = 5; x %% y", 3);
    test("def x = -8; def y = 5; x %% y", -3);
    test("byte x = -8; def y = 5; x %% y", 3);
    test("def x = -8; int y = 5; x %% y", -3);
    test("int x = 8; byte y = 5; x % y", 3);
    test("def x = 8; def y = 5; x % y", 3);
    test("int x = 8; def y = 5; x % y", 3);
    test("def x = 8; byte y = 5; x % y", 3);
    test("byte x = 8; int y = 5; x % y", 3);
    test("def x = 8; def y = 5; x % y", 3);
    test("byte x = 8; def y = 5; x % y", 3);
    test("def x = 8; int y = 5; x % y", 3);
    test("int x = -8; byte y = 5; x % y", 2);
    test("def x = -8; def y = 5; x % y", 2);
    test("int x = -8; def y = 5; x % y", 2);
    test("def x = -8; byte y = 5; x % y", 2);
    test("byte x = -8; int y = 5; x % y", 3);
    test("def x = -8; def y = 5; x % y", 2);
    test("byte x = -8; def y = 5; x % y", 3);
    test("def x = -8; int y = 5; x % y", 2);
    test("double x = 1.0D; double y = 2.0D; x + y", 3.0D);
    test("def x = 1.0D; def y = 2.0D; x + y", 3.0D);
    test("double x = 1.0D; def y = 2.0D; x + y", 3.0D);
    test("def x = 1.0D; double y = 2.0D; x + y", 3.0D);
    test("double x = 1.0D; double y = 2.0D; x - y", -1.0D);
    test("def x = 1.0D; def y = 2.0D; x - y", -1.0D);
    test("double x = 1.0D; def y = 2.0D; x - y", -1.0D);
    test("def x = 1.0D; double y = 2.0D; x - y", -1.0D);
    test("double x = 1.0D; double y = 2.0D; x - -y", 3.0D);
    test("def x = 1.0D; def y = 2.0D; x - -y", 3.0D);
    test("double x = 1.0D; def y = 2.0D; x - -y", 3.0D);
    test("def x = 1.0D; double y = 2.0D; x - -y", 3.0D);
    test("double x = 2.0D; double y = 3.0D; x * y", 6D);
    test("def x = 2.0D; def y = 3.0D; x * y", 6D);
    test("double x = 2.0D; def y = 3.0D; x * y", 6D);
    test("def x = 2.0D; double y = 3.0D; x * y", 6D);
    test("double x = 6.0D; double y = 3.0D; x / y", 2.0D);
    test("def x = 6.0D; def y = 3.0D; x / y", 2.0D);
    test("double x = 6.0D; def y = 3.0D; x / y", 2.0D);
    test("def x = 6.0D; double y = 3.0D; x / y", 2.0D);
    test("double x = 8.0D; double y = 5.0D; x %% y", 3D);
    test("def x = 8.0D; def y = 5.0D; x %% y", 3D);
    test("double x = 8.0D; def y = 5.0D; x %% y", 3D);
    test("def x = 8.0D; double y = 5.0D; x %% y", 3D);
    test("double x = -8.0D; double y = 5.0D; x %% y", -3D);
    test("def x = -8.0D; def y = 5.0D; x %% y", -3D);
    test("double x = -8.0D; def y = 5.0D; x %% y", -3D);
    test("def x = -8.0D; double y = 5.0D; x %% y", -3D);
    test("double x = 8.0D; double y = 5.0D; x % y", 3D);
    test("def x = 8.0D; def y = 5.0D; x % y", 3D);
    test("double x = 8.0D; def y = 5.0D; x % y", 3D);
    test("def x = 8.0D; double y = 5.0D; x % y", 3D);
    test("double x = -8.0D; double y = 5.0D; x % y", 2D);
    test("def x = -8.0D; def y = 5.0D; x % y", 2D);
    test("def x = -8.0D; def y = -5.0D; x % y", -3D);
    test("def x = 8.0D; def y = -5.0D; x % y", -2D);
    test("double x = -8.0D; def y = 5.0D; x % y", 2D);
    test("def x = -8.0D; double y = 5.0D; x % y", 2D);
    test("long x = 1L; double y = 2.0D; x + y", 3.0D);
    test("def x = 1L; def y = 2.0D; x + y", 3.0D);
    test("long x = 1L; def y = 2.0D; x + y", 3.0D);
    test("def x = 1L; double y = 2.0D; x + y", 3.0D);
    test("double x = 1.0D; long y = 2L; x - y", -1.0D);
    test("def x = 1.0D; def y = 2L; x - y", -1.0D);
    test("double x = 1.0D; def y = 2L; x - y", -1.0D);
    test("def x = 1.0D; long y = 2L; x - y", -1.0D);
    test("long x = 1L; double y = 2.0D; x - -y", 3.0D);
    test("def x = 1L; def y = 2.0D; x - -y", 3.0D);
    test("long x = 1L; def y = 2.0D; x - -y", 3.0D);
    test("def x = 1L; double y = 2.0D; x - -y", 3.0D);
    test("double x = 2.0D; long y = 3L; x * y", 6D);
    test("def x = 2.0D; def y = 3L; x * y", 6D);
    test("double x = 2.0D; def y = 3L; x * y", 6D);
    test("def x = 2.0D; long y = 3L; x * y", 6D);
    test("long x = 6L; double y = 3.0D; x / y", 2.0D);
    test("def x = 6L; def y = 3.0D; x / y", 2.0D);
    test("long x = 6L; def y = 3.0D; x / y", 2.0D);
    test("def x = 6L; double y = 3.0D; x / y", 2.0D);
    test("double x = 8.0D; long y = 5L; x  %% y", 3D);
    test("def x = 8.0D; def y = 5L; x  %% y", 3D);
    test("double x = 8.0D; def y = 5L; x %% y", 3D);
    test("def x = 8.0D; long y = 5L; x %% y", 3D);
    test("double x = -8.0D; long y = 5L; x  %% y", -3D);
    test("def x = -8.0D; def y = 5L; x  %% y", -3D);
    test("double x = -8.0D; def y = 5L; x %% y", -3D);
    test("def x = -8.0D; long y = 5L; x %% y", -3D);
    test("double x = 8.0D; long y = 5L; x  % y", 3D);
    test("def x = 8.0D; def y = 5L; x  % y", 3D);
    test("double x = 8.0D; def y = 5L; x % y", 3D);
    test("def x = 8.0D; long y = 5L; x % y", 3D);
    test("double x = -8.0D; long y = 5L; x  % y", 2D);
    test("def x = -8.0D; def y = 5L; x  % y", 2D);
    test("double x = -8.0D; def y = 5L; x % y", 2D);
    test("def x = -8.0D; long y = 5L; x % y", 2D);
    test("byte x = 1; double y = 2.0D; x + y", 3.0D);
    test("def x = 1; def y = 2.0D; x + y", 3.0D);
    test("byte x = 1; def y = 2.0D; x + y", 3.0D);
    test("def x = 1; double y = 2.0D; x + y", 3.0D);
    test("double x = 1.0D; byte y = 2; x - y", -1.0D);
    test("def x = 1.0D; def y = 2; x - y", -1.0D);
    test("double x = 1.0D; def y = 2; x - y", -1.0D);
    test("def x = 1.0D; byte y = 2; x - y", -1.0D);
    test("byte x = 1; double y = 2.0D; x - -y", 3.0D);
    test("def x = 1; def y = 2.0D; x - -y", 3.0D);
    test("byte x = 1; def y = 2.0D; x - -y", 3.0D);
    test("def x = 1; double y = 2.0D; x - -y", 3.0D);
    test("double x = 2.0D; byte y = 3; x * y", 6D);
    test("def x = 2.0D; def y = 3; x * y", 6D);
    test("double x = 2.0D; def y = 3; x * y", 6D);
    test("def x = 2.0D; byte y = 3; x * y", 6D);
    test("byte x = 6; double y = 3.0D; x / y", 2.0D);
    test("def x = 6; def y = 3.0D; x / y", 2.0D);
    test("byte x = 6; def y = 3.0D; x / y", 2.0D);
    test("def x = 6; double y = 3.0D; x / y", 2.0D);
    test("double x = 8.0D; byte y = 5; x  %% y", 3D);
    test("def x = 8.0D; def y = 5; x  %% y", 3D);
    test("double x = 8.0D; def y = 5; x %% y", 3D);
    test("def x = 8.0D; byte y = 5; x %% y", 3D);
    test("double x = -8.0D; byte y = 5; x  %% y", -3D);
    test("def x = -8.0D; def y = 5; x  %% y", -3D);
    test("double x = -8.0D; def y = 5; x %% y", -3D);
    test("def x = -8.0D; byte y = 5; x %% y", -3D);
    test("double x = 8.0D; byte y = 5; x  % y", 3D);
    test("byte x = 1; Decimal y = 2.0; x + y", "#3.0");
    test("def x = 1; def y = 2.0; x + y", "#3.0");
    test("byte x = 1; def y = 2.0; x + y", "#3.0");
    test("def x = 1; Decimal y = 2.0; x + y", "#3.0");
    test("Decimal x = 1.0; byte y = 2; x - y", "#-1.0");
    test("def x = 1.0; def y = 2; x - y", "#-1.0");
    test("Decimal x = 1.0; def y = 2; x - y", "#-1.0");
    test("def x = 1.0; byte y = 2; x - y", "#-1.0");
    test("byte x = 1; Decimal y = 2.0; x - -y", "#3.0");
    test("def x = 1; def y = 2.0; x - -y", "#3.0");
    test("byte x = 1; def y = 2.0; x - -y", "#3.0");
    test("def x = 1; Decimal y = 2.0; x - -y", "#3.0");
    test("Decimal x = 2.0; byte y = 3; x * y", "#6.0");
    test("def x = 2.0; def y = 3; x * y", "#6.0");
    test("Decimal x = 2.0; def y = 3; x * y", "#6.0");
    test("def x = 2.0; byte y = 3; x * y", "#6.0");
    test("byte x = 6; Decimal y = 3.0; x / y", "#2");
    test("def x = 6; def y = 3.0; x / y", "#2");
    test("byte x = 6; def y = 3.0; x / y", "#2");
    test("def x = 6; Decimal y = 3.0; x / y", "#2");
    test("Decimal x = 8.0; byte y = 5; x  %% y", "#3.0");
    test("def x = 8.0; def y = 5; x  %% y", "#3.0");
    test("Decimal x = 8.0; def y = 5; x %% y", "#3.0");
    test("def x = 8.0; byte y = 5; x %% y", "#3.0");
    test("Decimal x = -8.0; byte y = 5; x  %% y", "#-3.0");
    test("def x = -8.0; def y = 5; x  %% y", "#-3.0");
    test("Decimal x = -8.0; def y = 5; x %% y", "#-3.0");
    test("def x = -8.0; byte y = 5; x %% y", "#-3.0");
    test("Decimal x = 8.0; byte y = 5; x  % y", "#3.0");
    test("def x = 8.0D; def y = 5; x  % y", 3D);
    test("double x = 8.0D; def y = 5; x % y", 3D);
    test("def x = 8.0D; byte y = 5; x % y", 3D);
    test("double x = -8.0D; byte y = 5; x  % y", 2D);
    test("def x = -8.0D; def y = 5; x  % y", 2D);
    test("double x = -8.0D; def y = 5; x % y", 2D);
    test("def x = -8.0D; byte y = 5; x % y", 2D);
    test("Decimal x = 1.0; Decimal y = 2.0; x + y", "#3.0");
    test("def x = 1.0; def y = 2.0; x + y", "#3.0");
    test("Decimal x = 1.0; def y = 2.0; x + y", "#3.0");
    test("def x = 1.0; Decimal y = 2.0; x + y", "#3.0");
    test("Decimal x = 1.0; Decimal y = 2.0; x - y", "#-1.0");
    test("def x = 1.0; def y = 2.0; x - y", "#-1.0");
    test("Decimal x = 1.0; def y = 2.0; x - y", "#-1.0");
    test("def x = 1.0; Decimal y = 2.0; x - y", "#-1.0");
    test("Decimal x = 1.0; Decimal y = 2.0; x - -y", "#3.0");
    test("def x = 1.0; def y = 2.0; x - -y", "#3.0");
    test("Decimal x = 1.0; def y = 2.0; x - -y", "#3.0");
    test("def x = 1.0; Decimal y = 2.0; x - -y", "#3.0");
    test("Decimal x = 2.0; Decimal y = 3.0; x * y", "#6.00");
    test("def x = 2.0; def y = 3.0; x * y", "#6.00");
    test("Decimal x = 2.0; def y = 3.0; x * y", "#6.00");
    test("def x = 2.0; Decimal y = 3.0; x * y", "#6.00");
    test("Decimal x = 6.0; Decimal y = 3.0; x / y", "#2");
    test("def x = 6.0; def y = 3.0; x / y", "#2");
    test("Decimal x = 6.0; def y = 3.0; x / y", "#2");
    test("def x = 6.0; Decimal y = 3.0; x / y", "#2");
    test("Decimal x = 6.0; Decimal y = 7.0; x / y", "#0.8571428571");
    test("def x = 6.0; def y = 7.0; x / y", "#0.8571428571");
    test("Decimal x = 6.0; def y = 7.0; x / y", "#0.8571428571");
    test("def x = 6.0; Decimal y = 7.0; x / y", "#0.8571428571");
    test("Decimal x = 8.0; Decimal y = 5.0; x %% y", "#3.0");
    test("def x = 8.0; def y = 5.0; x %% y", "#3.0");
    test("Decimal x = 8.0; def y = 5.0; x %% y", "#3.0");
    test("def x = 8.0; Decimal y = 5.0; x %% y", "#3.0");
    test("Decimal x = -8.0; Decimal y = 5.0; x %% y", "#-3.0");
    test("def x = -8.0; def y = 5.0; x %% y", "#-3.0");
    test("Decimal x = -8.0; def y = 5.0; x %% y", "#-3.0");
    test("def x = -8.0; Decimal y = 5.0; x %% y", "#-3.0");
    test("Decimal x = 8.0; Decimal y = 5.0; x % y", "#3.0");
    test("def x = 8.0; def y = 5.0; x % y", "#3.0");
    test("Decimal x = 8.0; def y = 5.0; x % y", "#3.0");
    test("def x = 8.0; Decimal y = 5.0; x % y", "#3.0");
    test("Decimal x = -8.0; Decimal y = 5.0; x % y", "#2.0");
    test("def x = -8.0; def y = 5.0; x % y", "#2.0");
    test("Decimal x = -8.0; def y = 5.0; x % y", "#2.0");
    test("def x = -8.0; Decimal y = 5.0; x % y", "#2.0");
    test("int x = 1; double y = 2D; x + y", 3D);
    test("def x = 1; def y = 2D; x + y", 3D);
    test("int x = 1; def y = 2D; x + y", 3D);
    test("def x = 1; double y = 2D; x + y", 3D);
    test("double x = 1D; int y = 2; x - y", -1D);
    test("def x = 1D; def y = 2; x - y", -1D);
    test("double x = 1D; def y = 2; x - y", -1D);
    test("def x = 1D; int y = 2; x - y", -1D);
    test("int x = 1; double y = 2D; x - -y", 3D);
    test("def x = 1; def y = 2D; x - -y", 3D);
    test("int x = 1; def y = 2D; x - -y", 3D);
    test("def x = 1; double y = 2D; x - -y", 3D);
    test("double x = 2D; int y = 3; x * y", 6D);
    test("def x = 2D; def y = 3; x * y", 6D);
    test("double x = 2D; def y = 3; x * y", 6D);
    test("def x = 2D; int y = 3; x * y", 6D);
    test("int x = 6; double y = 3D; x / y", 2D);
    test("def x = 6; def y = 3D; x / y", 2D);
    test("int x = 6; def y = 3D; x / y", 2D);
    test("def x = 6; double y = 3D; x / y", 2D);
    test("double x = 8D; int y = 5; x %% y", 3D);
    test("def x = 8D; def y = 5; x %% y", 3D);
    test("double x = 8D; def y = 5; x %% y", 3D);
    test("def x = 8D; int y = 5; x %% y", 3D);
    test("int x = 8; double y = 5D; x %% y", 3D);
    test("def x = 8; def y = 5D; x %% y", 3D);
    test("int x = 8; def y = 5D; x %% y", 3D);
    test("def x = 8; double y = 5D; x %% y", 3D);
    test("double x = -8D; int y = 5; x %% y", -3D);
    test("def x = -8D; def y = 5; x %% y", -3D);
    test("double x = -8D; def y = 5; x %% y", -3D);
    test("def x = -8D; int y = 5; x %% y", -3D);
    test("int x = -8; double y = 5D; x %% y", -3D);
    test("def x = -8; def y = 5D; x %% y", -3D);
    test("int x = -8; def y = 5D; x %% y", -3D);
    test("def x = -8; double y = 5D; x %% y", -3D);
    test("double x = 8D; int y = 5; x % y", 3D);
    test("def x = 8D; def y = 5; x % y", 3D);
    test("double x = 8D; def y = 5; x % y", 3D);
    test("def x = 8D; int y = 5; x % y", 3D);
    test("int x = 8; double y = 5D; x % y", 3D);
    test("def x = 8; def y = 5D; x % y", 3D);
    test("int x = 8; def y = 5D; x % y", 3D);
    test("def x = 8; double y = 5D; x % y", 3D);
    test("double x = -8D; int y = 5; x % y", 2D);
    test("def x = -8D; def y = 5; x % y", 2D);
    test("double x = -8D; def y = 5; x % y", 2D);
    test("def x = -8D; int y = 5; x % y", 2D);
    test("int x = -8; double y = 5D; x % y", 2D);
    test("def x = -8; def y = 5D; x % y", 2D);
    test("int x = -8; def y = 5D; x % y", 2D);
    test("def x = -8; double y = 5D; x % y", 2D);
    test("int x = 1; Decimal y = 2.0; x + y", "#3.0");
    test("def x = 1; def y = 2.0; x + y", "#3.0");
    test("int x = 1; def y = 2.0; x + y", "#3.0");
    test("def x = 1; Decimal y = 2.0; x + y", "#3.0");
    test("Decimal x = 1.0; int y = 2; x - y", "#-1.0");
    test("def x = 1.0; def y = 2; x - y", "#-1.0");
    test("Decimal x = 1.0; def y = 2; x - y", "#-1.0");
    test("def x = 1.0; int y = 2; x - y", "#-1.0");
    test("int x = 1; Decimal y = 2.0; x - -y", "#3.0");
    test("def x = 1; def y = 2.0; x - -y", "#3.0");
    test("int x = 1; def y = 2.0; x - -y", "#3.0");
    test("def x = 1; Decimal y = 2.0; x - -y", "#3.0");
    test("Decimal x = 2.0; int y = 3; x * y", "#6.0");
    test("def x = 2.0; def y = 3; x * y", "#6.0");
    test("Decimal x = 2.0; def y = 3; x * y", "#6.0");
    test("def x = 2.0; int y = 3; x * y", "#6.0");
    test("int x = 6; Decimal y = 3.0; x / y", "#2");
    test("def x = 6; def y = 3.0; x / y", "#2");
    test("int x = 6; def y = 3.0; x / y", "#2");
    test("def x = 6; Decimal y = 3.0; x / y", "#2");
    test("Decimal x = 6.0; int y = 3; x / y", "#2.0");
    test("def x = 6.0; def y = 3; x / y", "#2.0");
    test("Decimal x = 6.0; def y = 3; x / y", "#2.0");
    test("def x = 6.0; int y = 3; x / y", "#2.0");
    test("Decimal x = 8.0; int y = 5; x %% y", "#3.0");
    test("def x = 8.0; def y = 5; x %% y", "#3.0");
    test("Decimal x = 8.0; def y = 5; x %% y", "#3.0");
    test("def x = 8.0; int y = 5; x %% y", "#3.0");
    test("int x = 8; Decimal y = 5.0; x %% y", "#3.0");
    test("def x = 8; def y = 5.0; x %% y", "#3.0");
    test("int x = 8; def y = 5.0; x %% y", "#3.0");
    test("def x = 8; Decimal y = 5.0; x %% y", "#3.0");
    test("Decimal x = -8.0; int y = 5; x %% y", "#-3.0");
    test("def x = -8.0; def y = 5; x %% y", "#-3.0");
    test("Decimal x = -8.0; def y = 5; x %% y", "#-3.0");
    test("def x = -8.0; int y = 5; x %% y", "#-3.0");
    test("int x = -8; Decimal y = 5.0; x %% y", "#-3.0");
    test("def x = -8; def y = 5.0; x %% y", "#-3.0");
    test("int x = -8; def y = 5.0; x %% y", "#-3.0");
    test("def x = -8; Decimal y = 5.0; x %% y", "#-3.0");
    test("Decimal x = 8.0; int y = 5; x % y", "#3.0");
    test("def x = 8.0; def y = 5; x % y", "#3.0");
    test("Decimal x = 8.0; def y = 5; x % y", "#3.0");
    test("def x = 8.0; int y = 5; x % y", "#3.0");
    test("int x = 8; Decimal y = 5.0; x % y", "#3.0");
    test("def x = 8; def y = 5.0; x % y", "#3.0");
    test("int x = 8; def y = 5.0; x % y", "#3.0");
    test("def x = 8; Decimal y = 5.0; x % y", "#3.0");
    test("Decimal x = -8.0; int y = 5; x % y", "#2.0");
    test("def x = -8.0; def y = 5; x % y", "#2.0");
    test("Decimal x = -8.0; def y = 5; x % y", "#2.0");
    test("def x = -8.0; int y = 5; x % y", "#2.0");
    test("int x = -8; Decimal y = 5.0; x % y", "#2.0");
    test("def x = -8; def y = 5.0; x % y", "#2.0");
    test("int x = -8; def y = 5.0; x % y", "#2.0");
    test("def x = -8; Decimal y = 5.0; x % y", "#2.0");
    test("long x = 1L; Decimal y = 2.0; x + y", "#3.0");
    test("def x = 1L; def y = 2.0; x + y", "#3.0");
    test("long x = 1L; def y = 2.0; x + y", "#3.0");
    test("def x = 1L; Decimal y = 2.0; x + y", "#3.0");
    test("Decimal x = 1.0; long y = 2L; x - y", "#-1.0");
    test("def x = 1.0; def y = 2L; x - y", "#-1.0");
    test("Decimal x = 1.0; def y = 2L; x - y", "#-1.0");
    test("def x = 1.0; long y = 2L; x - y", "#-1.0");
    test("long x = 1L; Decimal y = 2.0; x - -y", "#3.0");
    test("def x = 1L; def y = 2.0; x - -y", "#3.0");
    test("long x = 1L; def y = 2.0; x - -y", "#3.0");
    test("def x = 1L; Decimal y = 2.0; x - -y", "#3.0");
    test("Decimal x = 2.0; long y = 3L; x * y", "#6.0");
    test("def x = 2.0; def y = 3L; x * y", "#6.0");
    test("Decimal x = 2.0; def y = 3L; x * y", "#6.0");
    test("def x = 2.0; long y = 3L; x * y", "#6.0");
    test("long x = 6L; Decimal y = 3.0; x / y", "#2");
    test("def x = 6L; def y = 3.0; x / y", "#2");
    test("long x = 6L; def y = 3.0; x / y", "#2");
    test("def x = 6L; Decimal y = 3.0; x / y", "#2");
    test("Decimal x = 8.0; long y = 5L; x %% y", "#3.0");
    test("def x = 8.0; def y = 5L; x %% y", "#3.0");
    test("Decimal x = 8.0; def y = 5L; x %% y", "#3.0");
    test("def x = 8.0; long y = 5L; x %% y", "#3.0");
    test("long x = 8L; Decimal y = 5.0; x %% y", "#3.0");
    test("def x = 8L; def y = 5.0; x %% y", "#3.0");
    test("long x = 8L; def y = 5.0; x %% y", "#3.0");
    test("def x = 8L; Decimal y = 5.0; x %% y", "#3.0");
    test("Decimal x = -8.0; long y = 5L; x %% y", "#-3.0");
    test("def x = -8.0; def y = 5L; x %% y", "#-3.0");
    test("Decimal x = -8.0; def y = 5L; x %% y", "#-3.0");
    test("def x = -8.0; long y = 5L; x %% y", "#-3.0");
    test("long x = -8L; Decimal y = 5.0; x %% y", "#-3.0");
    test("def x = -8L; def y = 5.0; x %% y", "#-3.0");
    test("long x = -8L; def y = 5.0; x %% y", "#-3.0");
    test("def x = -8L; Decimal y = 5.0; x %% y", "#-3.0");
    test("Decimal x = 8.0; long y = 5L; x % y", "#3.0");
    test("def x = 8.0; def y = 5L; x % y", "#3.0");
    test("Decimal x = 8.0; def y = 5L; x % y", "#3.0");
    test("def x = 8.0; long y = 5L; x % y", "#3.0");
    test("long x = 8L; Decimal y = 5.0; x % y", "#3.0");
    test("def x = 8L; def y = 5.0; x % y", "#3.0");
    test("long x = 8L; def y = 5.0; x % y", "#3.0");
    test("def x = 8L; Decimal y = 5.0; x % y", "#3.0");
    test("Decimal x = -8.0; long y = 5L; x % y", "#2.0");
    test("def x = -8.0; def y = 5L; x % y", "#2.0");
    test("Decimal x = -8.0; def y = 5L; x % y", "#2.0");
    test("def x = -8.0; long y = 5L; x % y", "#2.0");
    test("long x = -8L; Decimal y = 5.0; x % y", "#2.0");
    test("def x = -8L; def y = 5.0; x % y", "#2.0");
    test("long x = -8L; def y = 5.0; x % y", "#2.0");
    test("def x = -8L; Decimal y = 5.0; x % y", "#2.0");
    test("double x = 1D; Decimal y = 2.0; x + y", "#3.0");
    test("def x = 1D; def y = 2.0; x + y", "#3.0");
    test("double x = 1D; def y = 2.0; x + y", "#3.0");
    test("def x = 1D; Decimal y = 2.0; x + y", "#3.0");
    test("Decimal x = 1.0; double y = 2D; x - y", "#-1.0");
    test("def x = 1.0; def y = 2D; x - y", "#-1.0");
    test("Decimal x = 1.0; def y = 2D; x - y", "#-1.0");
    test("def x = 1.0; double y = 2D; x - y", "#-1.0");
    test("double x = 1D; Decimal y = 2.0; x - -y", "#3.0");
    test("def x = 1D; def y = 2.0; x - -y", "#3.0");
    test("double x = 1D; def y = 2.0; x - -y", "#3.0");
    test("def x = 1D; Decimal y = 2.0; x - -y", "#3.0");
    test("Decimal x = 2.0; double y = 3D; x * y", "#6.00");
    test("def x = 2.0; def y = 3D; x * y", "#6.00");
    test("Decimal x = 2.0; def y = 3D; x * y", "#6.00");
    test("def x = 2.0; double y = 3D; x * y", "#6.00");
    test("double x = 6D; Decimal y = 3.0; x / y", "#2");
    test("def x = 6D; def y = 3.0; x / y", "#2");
    test("double x = 6D; def y = 3.0; x / y", "#2");
    test("def x = 6D; Decimal y = 3.0; x / y", "#2");
    test("Decimal x = 8.0; double y = 5D; x %% y", "#3.0");
    test("def x = 8.0; def y = 5D; x %% y", "#3.0");
    test("Decimal x = 8.0; def y = 5D; x %% y", "#3.0");
    test("def x = 8.0; double y = 5D; x %% y", "#3.0");
    test("double x = 8D; Decimal y = 5.0; x %% y", "#3.0");
    test("def x = 8D; def y = 5.0; x %% y", "#3.0");
    test("double x = 8D; def y = 5.0; x %% y", "#3.0");
    test("def x = 8D; Decimal y = 5.0; x %% y", "#3.0");
    test("Decimal x = -8.0; double y = 5D; x %% y", "#-3.0");
    test("def x = -8.0; def y = 5D; x %% y", "#-3.0");
    test("Decimal x = -8.0; def y = 5D; x %% y", "#-3.0");
    test("def x = -8.0; double y = 5D; x %% y", "#-3.0");
    test("double x = -8D; Decimal y = 5.0; x %% y", "#-3.0");
    test("def x = -8D; def y = 5.0; x %% y", "#-3.0");
    test("double x = -8D; def y = 5.0; x %% y", "#-3.0");
    test("def x = -8D; Decimal y = 5.0; x %% y", "#-3.0");
    test("Decimal x = 8.0; double y = 5D; x % y", "#3.0");
    test("def x = 8.0; def y = 5D; x % y", "#3.0");
    test("Decimal x = 8.0; def y = 5D; x % y", "#3.0");
    test("def x = 8.0; double y = 5D; x % y", "#3.0");
    test("double x = 8D; Decimal y = 5.0; x % y", "#3.0");
    test("def x = 8D; def y = 5.0; x % y", "#3.0");
    test("double x = 8D; def y = 5.0; x % y", "#3.0");
    test("def x = 8D; Decimal y = 5.0; x % y", "#3.0");
    test("Decimal x = -8.0; double y = 5D; x % y", "#2.0");
    test("def x = -8.0; def y = 5D; x % y", "#2.0");
    test("Decimal x = -8.0; def y = 5D; x % y", "#2.0");
    test("def x = -8.0; double y = 5D; x % y", "#2.0");
    test("double x = -8D; Decimal y = 5.0; x % y", "#2.0");
    test("def x = -8D; def y = 5.0; x % y", "#2.0");
    test("double x = -8D; def y = 5.0; x % y", "#2.0");
    test("def x = -8D; Decimal y = 5.0; x % y", "#2.0");
  }

  @Test public void byteType() {
    test("byte b = 1", (byte)1);
    test("byte b = 1; def x = b", (byte)1);
    test("int i = 1; byte b = i", (byte)1);
    test("byte b = 1; int i = b", 1);
    test("int i = 257; byte b = i", (byte)1);
    test("int i = 257; def b = (byte)i", (byte)1);
    test("long x = 257; def b = (byte)x", (byte)1);
    test("double x = 257; def b = (byte)x", (byte)1);
    test("Decimal x = 257; def b = (byte)x", (byte)1);
    test("Decimal x = 257.123; def b = (byte)x", (byte)1);
    test("int i = (byte)257", 1);
    test("long i = (byte)257", 1L);
    test("double i = (byte)257", 1.0D);
    test("Decimal i = (byte)257", "#1");
    test("(byte)127 + (byte)127 + (byte)3", (byte)1);
  }

  @Test public void numericConversions() {
    test("byte x = 1", (byte)1);
    test("byte x = 1L", (byte)1);
    test("byte x = 1D", (byte)1);
    test("byte x = 1.0", (byte)1);
    test("int x = (byte)1", 1);
    test("int x = 1L", 1);
    test("int x = 1D", 1);
    test("int x = 1.0", 1);
    test("long x = (byte)1", 1L);
    test("long x = 1", 1L);
    test("long x = 1D", 1L);
    test("long x = 1.0", 1L);
    test("double x = (byte)1", 1D);
    test("double x = 1", 1D);
    test("double x = 1L", 1D);
    test("double x = 1.0", 1D);
    test("Decimal x = (byte)1", "#1");
    test("Decimal x = 1", "#1");
    test("Decimal x = 1L", "#1");
    test("Decimal x = 1D", "#1.0");
    test("byte x; x = x + 1L", (byte)1);
    test("int x; x = x + 1L", 1);
    test("int x; x = x + 1D", 1);
    test("int x; x = x + 1.0", 1);
    test("long x; x = x + (byte)1", 1L);
    test("long x; x = x + 1", 1L);
    test("long x; x = x + 1D", 1L);
    test("long x; x = x + 1.0", 1L);
    test("double x; x = x + (byte)1", 1D);
    test("double x; x = x + 1", 1D);
    test("double x; x = x + 1L", 1D);
    test("double x; x = x + 1.0", 1D);
    test("Decimal x; x = x + (byte)1", "#1");
    test("Decimal x; x = (byte)1 + x", "#1");
    test("Decimal x; x = x + 1", "#1");
    test("Decimal x; x = x + 1L", "#1");
    test("Decimal x; x = x + 1D", "#1.0");
    test("byte x; def y = 1L; x = x + y", (byte)1);
    test("byte x; def y = 1L; x = x + y", (byte)1);
    test("byte x; def y = 1D; x = x + y", (byte)1);
    test("byte x; def y = 1.0; x = x + y", (byte)1);
    test("int x; def y = (byte)1; x = x + y", 1);
    test("int x; def y = 1L; x = x + y", 1);
    test("int x; def y = 1D; x = x + y", 1);
    test("int x; def y = 1.0; x = x + y", 1);
    test("long x; def y = (byte)1; x = x + y", 1L);
    test("long x; def y = 1; x = x + y", 1L);
    test("long x; def y = 1D; x = x + y", 1L);
    test("long x; def y = 1.0; x = x + y", 1L);
    test("double x; def y = (byte)1; x = x + y", 1D);
    test("double x; def y = 1; x = x + y", 1D);
    test("double x; def y = 1L; x = x + y", 1D);
    test("double x; def y = 1.0; x = x + y", 1D);
    test("Decimal x; def y = (byte)1; x = x + y", "#1");
    test("Decimal x; def y = 1; x = x + y", "#1");
    test("Decimal x; def y = 1L; x = x + y", "#1");
    test("Decimal x; def y = 1D; x = x + y", "#1.0");
    test("byte x = 1; x += 2L", (byte)3);
    test("byte x = 1; x += 2L; x", (byte)3);
    test("byte x = 1; x += 2D", (byte)3);
    test("byte x = 1; x += 2D; x", (byte)3);
    test("byte x = 1; x += 2.0", (byte)3);
    test("byte x = 1; x += 2.0; x", (byte)3);
    test("int x = 1; x += (byte)2", 3);
    test("int x = 1; x += 2L", 3);
    test("int x = 1; x += 2L; x", 3);
    test("int x = 1; x += 2D", 3);
    test("int x = 1; x += 2D; x", 3);
    test("int x = 1; x += 2.0", 3);
    test("int x = 1; x += 2.0; x", 3);
    test("double x = 1D; x += (byte)2", 3D);
    test("double x = 1D; x += (byte)2; x", 3D);
    test("double x = 1D; x += 2", 3D);
    test("double x = 1D; x += 2; x", 3D);
    test("double x = 1D; x += 2L", 3D);
    test("double x = 1D; x += 2L; x", 3D);
    test("double x = 1D; x += 2; x", 3D);
    test("double x = 1D; x += 2.0", 3D);
    test("double x = 1D; x += 2.0; x", 3D);
    test("long x = 1L; x += (byte)2", 3L);
    test("long x = 1L; x += (byte)2; x", 3L);
    test("long x = 1L; x += 2", 3L);
    test("long x = 1L; x += 2; x", 3L);
    test("long x = 1L; x += 2D", 3L);
    test("long x = 1L; x += 2D; x", 3L);
    test("long x = 1L; x += 2.0", 3L);
    test("long x = 1L; x += 2.0; x", 3L);
    test("Decimal x = 1.0; x += (byte)2", "#3.0");
    test("Decimal x = 1.0; x += (byte)2; x", "#3.0");
    test("Decimal x = 1.0; x += 2", "#3.0");
    test("Decimal x = 1.0; x += 2; x", "#3.0");
    test("Decimal x = 1.0; x += 2D", "#3.0");
    test("Decimal x = 1.0; x += 2D; x", "#3.0");
    test("Decimal x = 1.0; x += 2.0", "#3.0");
    test("Decimal x = 1.0; x += 2.0; x", "#3.0");
    test("int x = 3; x *= (byte)2", 6);
    test("int x = 3; x *= (byte)2; x", 6);
    test("int x = 3; x *= 2L", 6);
    test("int x = 3; x *= 2L; x", 6);
    test("int x = 3; x *= 2D", 6);
    test("int x = 3; x *= 2D; x", 6);
    test("int x = 3; x *= 2.0", 6);
    test("int x = 3; x *= 2.0; x", 6);
    test("double x = 3D; x *= (byte)2", 6D);
    test("double x = 3D; x *= (byte)2; x", 6D);
    test("double x = 3D; x *= 2", 6D);
    test("double x = 3D; x *= 2; x", 6D);
    test("double x = 3D; x *= 2L", 6D);
    test("double x = 3D; x *= 2L; x", 6D);
    test("double x = 3D; x *= 2; x", 6D);
    test("double x = 3D; x *= 2.0", 6D);
    test("double x = 3D; x *= 2.0; x", 6D);
    test("long x = 3L; x *= (byte)2", 6L);
    test("long x = 3L; x *= (byte)2; x", 6L);
    test("long x = 3L; x *= 2", 6L);
    test("long x = 3L; x *= 2; x", 6L);
    test("long x = 3L; x *= 2D", 6L);
    test("long x = 3L; x *= 2D; x", 6L);
    test("long x = 3L; x *= 2.0", 6L);
    test("long x = 3L; x *= 2.0; x", 6L);
    test("Decimal x = 3.0; x *= (byte)2", "#6.0");
    test("Decimal x = 3.0; x *= (byte)2; x", "#6.0");
    test("Decimal x = 3.0; x *= 2", "#6.0");
    test("Decimal x = 3.0; x *= 2; x", "#6.0");
    test("Decimal x = 3.0; x *= 2D", "#6.00");
    test("Decimal x = 3.0; x *= 2D; x", "#6.00");
    test("Decimal x = 3.0; x *= 2.0", "#6.00");
    test("Decimal x = 3.0; x *= 2.0; x", "#6.00");
    test("byte x = 'A'[0]", (byte)65);
    test("int x = 'A'[0]", 65);
    testError("byte x = 'A' as byte", "not a valid number");
    testError("int x = 'A' as int", "not a valid int");
    testError("int x = 'Abc'", "cannot be cast");
    testError("long x = 'Abc'", "cannot be cast");
    testError("double x = 'Abc'", "cannot be cast");
    testError("Decimal x = 'Abc'", "cannot be cast");
    test("byte x = (byte)'A'", (byte)65);
    test("int x = (int)'A'", 65);
    test("boolean b = (byte)1", true);
    test("boolean b = 1", true);
    test("boolean b = []", false);
    test("boolean b = [a:1]", true);
    test("def x = 1; boolean b = x", true);
    test("int i = 'a'", 97);
  }

  @Test public void simpleVariables() {
    test("boolean v = false", false);
    test("boolean v = true", true);
    test("boolean v = false; v", false);
    test("boolean v = true; v", true);
    test("boolean v = !false; v", true);
    test("boolean v = !true; v", false);
    test("var v = false", false);
    test("var v = true", true);
    test("var v = false; v", false);
    test("var v = true; v", true);
    test("var v = !false; v", true);
    test("var v = !true; v", false);
    test("const v = false", false);
    test("const v = true", true);
    test("const v = false; v", false);
    test("const v = true; v", true);
    test("int v = 1; v", 1);
    test("int v = 1", 1);
    test("var v = 1; v", 1);
    test("const v = 1; v", 1);
    test("long v = 1; v", 1L);
    test("var v = 1L; v", 1L);
    test("const v = 1L; v", 1L);
    test("double v = 1; v", 1D);
    test("double v = 1.5; v", 1.5D);
    test("var v = 1D; v", 1D);
    test("const v = 1D; v", 1D);
    test("Decimal v = 1; v", "#1");
    test("var v = 1.0; v", "#1.0");
    test("const v = 1.0; v", "#1.0");
    test("def x = 'abc', y = 'xyz'", "xyz");
    test("boolean x = 1", true);

    alwaysEvalConsts = true;
    testError("const v", "initialiser expression required");
    test("const v = !false; v", true);
    test("const v = !true; v", false);
    test("const x = 'abc'; x", "abc");
    test("const x = 13; const y = 13 * x; y", 13*13);
    test("const int x = 13, y = 13 * x; y", 13*13);
    testError("const x = 13, y = 13 * x; y = 4", "cannot modify a constant");
    testError("def (const int x, const int y) = [13,14]; x + y", "unexpected token 'const'");
    testError("const x = 'abc'.length(); x", "simple constant value");
  }

  @Test public void multipleVarDecls() {
    test("int i,j; i + j", 0);
    test("int i = 1,j; i + j", 1);
    test("int i = 1,j=3; i + j", 4);
    test("int i =\n1,\nj =\n3\n; i + j", 4);
    test("var x = 13, y = 13 * x; y", 13*13);
  }

  @Test public void variableAssignments() {
    test("int v = 1; v = 2; v", 2);
    test("int v = 1; v = 2", 2);
    test("int v = 1; v = v + 1", 2);
    testError("1 = 2", "invalid lvalue");
    test("def x = 1; int y = x + 1", 2);
    test("int x = 1; int y = 2; x = y = 4", 4);
    test("int x = 1; int y = 2; x = y = 4; x", 4);
    test("int x = 1; int y = 2; x = (x = y = 4) + 5; x", 9);
    test("int x = 1; int y = 2; x = y = 4; y", 4);
    test("int x = 1; int y = 2; def z = 5; x = y = z = 3; y", 3);
    test("byte x = 1; byte y = 2; def z = (byte)5; x = y = z = 3; y", (byte)3);
    test("int x = 1; int y = 2; def z = 5; 4 + (x = y = z = 3) + y", 10);
    test("int x = 1; int y = 2; def z = 5; 4 + (x = y = z = 3) + y; x", 3);
  }

  @Test public void multiDeclarations() {
    test("def (x) = [1]; x", 1);
    testError("def (x) = 1; x", "invalid parent object type");
    test("def (def x) = [1]; x", 1);
    test("def (def x, var y) = [1,2]; x + y", 3);
    test("def f = {[1,2]}; def (def x, def y) = f(); x + y", 3);
    test("def f = {[1,2]}; def (int x, int y) = f(); x + y", 3);
    test("def f = {[1,2]}; def (x,y) = f(); x + y", 3);
    testError("def f = {[1,2]}; def (def x, var y) = f(); x + y", "cannot infer type");
    test("class X { def (x,y) = [1,2] }; def x = new X(); x.x + x.y", 3);
    test("class X { def (x, var y) = [1,2] }; def x = new X(); x.x + x.y", 3);
    test("class X { def f = {[1,2]}; def (x,y) = f() }; def x = new X(); x.x + x.y", 3);
    testError("class X { def (x,y) }; def x = new X(); x.x + x.y", "missing mandatory fields");
    test("class X { def f = {[1,2]}; def (x,y) = f(); def (a,b,c) = f() }; def x = new X(); x.x + x.y + x.a + x.b == 6 && x.c == null", true);
    test("class X { def f = {[1,2]}; def (x,y) = f(); def (a,b,c) = f() }; def (x,y) = [new X()]; x.x + x.y + x.a + x.b == 6 && x.c == null", true);
    test("class X { def f = {[1,2]}; def (x,y) = f(); def (a,b,c) = f() }; def (X x,y) = [new X()]; x.x + x.y + x.a + x.b == 6 && x.c == null", true);
    test("package x.y.z; class X { def f = {[1,2]}; def (x,y) = f(); def (a,b,c) = f() }; x.y.z.X x = new X(); x.x + x.y + x.a + x.b == 6 && x.c == null", true);
    test("package x.y.z; class X { def f = {[1,2]}; def (x,y) = f(); def (a,b,c) = f() }; def (x.y.z.X x,y) = [new X()]; x.x + x.y + x.a + x.b == 6 && x.c == null", true);
    test("class X { def f = {[1,2]}; def (x,y) = f(); def (a,b,c) = f() }; def (var x,y) = [new X()]; x.x + x.y + x.a + x.b == 6 && x.c == null", true);
    test("class X { def f = {[1,2]}; def (x,y) = f(); def (a,b,c) = f() }; def (def x,y) = [new X()]; x.x + x.y + x.a + x.b == 6 && x.c == null", true);
    test("def (x,y) = [a:1, b:2]; x == null && y == null", true);
    testError("def (x,var y) = [a:1, b:2]; x == ['a',1] && y == ['b',2]", "right-hand side is non-list type");
    test("def (x,y) = [1,2,3]", 2);
    test("def (int x, int y) = ([1,2,3] as int[])", 2);
    test("def (int x, int y) = ([1,2,3] as int[]); x + y", 3);
    test("def (x,y); x == null && y == null", true);
    test("def (int x, int y); x == 0 && y == 0", true);
    testError("def (int x = 1, int y)", "unexpected token '='");
  }

  @Test public void multiAssignments() {
    test("def a = [:]; a.('a' + 'b') = 1; a.ab", 1);
    testError("def x; (x) = 1; x", "invalid parent object type");
    test("def x; (x) = [1]; x", 1);
    test("def x; return (x) = [1]", 1);
    test("def x; (x) = [1]", 1);
    test("def x,y; (x, y) = [1,2]; x + y", 3);
    test("def x = []; (x[0], x[1]) = [1,2]; x[0] + x[1]", 3);
    test("def x = [:]; (x.b.c[0], x.y.z) = [1,2]; x.b.c[0] + x.y.z", 3);
    test("def x = [:]; (x.b.c[0], x.y.z) = 'abc'; x.b.c[0] + x.y.z", "ab");
    testError("def x = [:]; (x.b.c[0], x.y.z) = 'a'; x.b.c[0] + x.y.z", "index out of bounds");
    test("def f = {[1,2]}; def x; def y; (x,y) = f(); x + y", 3);
    test("def f = {[1,2]}; def x; def y; ((x,y) = f()) + x + y", 5);
    test("def (x,y) = [1,2]; (x,y) = [y,x]; \"x=$x,y=$y\"", "x=2,y=1");
    test("int[] a = [1,2,3] as int[]; int x; int y; ((x,y) = a) + x + y", 5);
    test("def a = [1,2,3]; int x; int y; (a[1],y) = a; y", 1);
    test("List a = [1,2,3]; int y; (a[1],y) = a; y", 1);
    test("int[] a = [1,2,3]; int y; (a[1],y) = a; y", 1);
    test("def (x,y) = [1,2]; (x,y) = [y,x]; \"$x:$y\"", "2:1");
    test("def (x,y) = [1,2]; ((x,y) = [y,x])", 1);
    test("def (x,y) = [1,2]; ((x,y) = [y,x]) as String", "1");

    test("def (a,b) = [[x:1,y:2], [x:3,y:4]]; ((a,b) = [b,a]) as String", "[x:1, y:2]");
    test("class X { def (x,y) = [1,2] }; def (a,b) = [new X(x:1,y:2), new X(x:3,y:4)]; ((a,b) = [b,a]) as String", "[x:1, y:2]");
    test("class X { def (x,y) = [1,2] }; def (a,b) = [new X(x:1,y:2), new X(x:3,y:4)]; def r = ((a,b) = [b,a]); r as String", "[x:1, y:2]");
    test("class X { def (x,y) = [1,2] }; def (a,b) = [new X(x:1,y:2), new X(x:3,y:4)]; (a,b) = [b,a]; \"a=$a, b=$b\"", "a=[x:3, y:4], b=[x:1, y:2]");
    test("def x,y; (x,y) = [1,2,3]", 2);

    test("def a = [:]; def x; a.(x='b') = 1; a.b", 1);
    test("def a = [:]; def (x,y)=['x','y']; a.((x,y) = ['a','b']) = 1; x + y + a.b", "ab1");
    testError("(1,2,3)", "expression lists not supported");
    testError("1 + (1,2,3)", "expression lists not supported");
    testError("def x = 1; x + (1,2,3)", "expression lists not supported");

    test("def a,b,c; (a,b) = [1,2]; (a,b) ?= [3,c]; a + b", 5);
    test("def a,b,c; (a,b,c) = [1,[:],4]; (a,b.x.y) ?= [3,c]; \"$a:$b\"", "3:[x:[y:4]]");
    test("def a,b,c; (a,b) = [1,[:]]; (a,b.x.y) ?= [3,c]; \"$a:$b\"", "3:[:]");
    test("def (x,y) = [1,2]; (x,y) += [2,3]; x + y", 8);
    testError("def (x,y) = [1,2]; (x,y)++; x + y", "expression lists not supported");
    testError("def (x,y) = [1,2]; --(x,y); x + y", "expression lists not supported");
  }

  @Test public void questionColon() {
    useAsyncDecorator = false;
    test("null ?: 1", 1);
    test("null ? 0 : 1", 1);
    test("1 ?: null", 1);
    test("1 ? 1 : null", 1);
    test("1 ? null : 1", null);
    test("1 ?: 2", 1);
    test("1 ?: 2", 1);
    test("null ?: null ?: 1", 1);
    test("1 + 2 ?: 3 + 4 ?: 5 * 6 ?: 7", 3);
    test("def x; x ?: 2", 2);
    test("def x; x ? 1 : 2", 2);
    testError("true ? 'abc':1", "not compatible");
    test("false ? 'abc':'1'", "1");
    test("def x = 'abc'; true ? x:1", "abc");
    test("def x = 'abc'; true ? 1:x", 1);
    test("def x = 'abc'; false ? x:1", 1);
    testError("def x; x ? 1 : [1,2,3]", "are not compatible");
    testError("def x; x ? { 1 } : 2", "not compatible");
    test("def x; var y = true ? x : 1", null);
    test("def x; var y = true ? 1 : x", 1);
    test("true ? 1 : 2L", 1L);
    test("false ? 1 : 2L", 2L);
    test("true ? true ? 1 : 2 : 3", 1);
    test("true ? true ? 1 + 2 : 4 : 5", 3);
    test("true ? false ? 1 + 2 : true ? 4 : 5 : 6", 4);
    test("Map x = [a:1]; true ? false ? 1 + 2 + x.a : true ? 5 + x.a : 7 : 8", 6);
    test("true ? null ?: 4 : 5", 4);
    test("true ? null ?: false ? 4 : 5 : 6", 5);
    test("def x = 1; true ? 1 : 2L", 1L);
    test("def x = 1; x ?: 2L", 1);
    test("Map m = true ? null : [:]", null);
    test("def x = [1]; true ? x.map() : [x]", Utils.listOf(1));
    test("def x = [1]; false ? x.flatMap() : [x]", Utils.listOf(Utils.listOf(1)));
    test("List x = [1]; true ? x : x.map()", Utils.listOf(1));
    test("List x = [1]; false ? x : x.flatMap()", Utils.listOf(1));
    test("(null?:sleep(0,5))", 5);
    test("(null?:sleep(0,[:])).i = 5", 5);
    test("true ? (byte)1 : (byte)2", (byte)1);
    test("true ? (byte)1 : 2", 1);
    test("true ? 1 : (byte)2", 1);
    test("false ? (byte)1 : (byte)2", (byte)2);
    test("false ? (byte)1 : 2", 2);
    test("false ? 1 : (byte)2", 2);
    test("false ? (byte)1 : 2L", 2L);
    test("false ? (byte)1 : 2D", 2D);
    test("false ? (byte)1 : 2.0", "#2.0");
    test("def x = (byte)1; def y = (byte)2; true ? x : y", (byte)1);
    test("def x = (byte)1; def y = 2; true ? x : y", (byte)1);
    test("def x = (byte)1; def y = 2; true ? x : (int)y", (byte)1);
    test("(2 ?: 1)\n 1+2\n", 3);
  }

  @Test public void bracketedExpressionsEndOfStatment() {
    test("(2)\n 1+2\n", 3);
    test("(2 + 1)\n 1+2\n", 3);
    test("(2 + 1); 1+2\n", 3);
  }

  @Test public void plusEquals(){
    test("byte x = 1; x += (byte)3", (byte)4);
    test("byte x = 1; (x += (byte)3) + (x += (byte)2)", (byte)10);
    test("byte x = 1; (x += (byte)3) + (x += (byte)2); x", (byte)6);
    test("byte x = 1; x += 3; x", (byte)4);
    test("byte x = 1; x += 3", (byte)4);
    test("byte x = 1; (x += 3) + (x += 2)", (byte)10);
    test("byte x = 1; (x += 3) + (x += 2); x", (byte)6);
    test("byte x = 1; x += 3; x", (byte)4);
    test("int x = 1; x += 3", 4);
    test("int x = 1; (x += 3) + (x += 2)", 10);
    test("int x = 1; (x += 3) + (x += 2); x", 6);
    test("int x = 1; x += 3; x", 4);
    test("def x = 1; x += 3", 4);
    test("def x = 1; x += 3; x", 4);
    test("var x = 1; x += 3", 4);
    test("var x = 1; x += 3; x", 4);
    test("long x = 1; x += 3", 4L);
    test("long x = 1; x += 3; x", 4L);
    test("double x = 1; x += 3", 4.0D);
    test("double x = 1; x += 3; x", 4.0D);
    test("Decimal x = 1.0; x += 3", "#4.0");
    test("Decimal x = 1.0; x += 3; x", "#4.0");
    test("var x = 1.0; x += 3", "#4.0");
    test("var x = 1.0; x += 3; x", "#4.0");
    test("var x = (byte)1; x += (byte)3", (byte)4);
    test("var x = (byte)1; x += (byte)3; x", (byte)4);
    test("var x = (byte)1; (x += (byte)3) + (x += (byte)2)", (byte)10);
    test("var x = (byte)1; (x += (byte)3) + (x += (byte)2); x", (byte)6);
    test("var x = (byte)1; x += 3", (byte)4);
    test("var x = (byte)1; x += 3; x", (byte)4);
    test("var x = (byte)1; (x += 3) + (x += 2)", (byte)10);
    test("var x = (byte)1; (x += 3) + (x += 2); x", (byte)6);
    test("var x = (byte)1; x += 3L", (byte)4);
    test("var x = (byte)1; x += 3L; x", (byte)4);
    test("var x = (byte)1; (x += 3L) + (x += 2L)", (byte)10);
    test("var x = (byte)1; (x += 3L) + (x += 2L); x", (byte)6);
    test("var x = (byte)1; x += 3D", (byte)4);
    test("var x = (byte)1; x += 3D; x", (byte)4);
    test("var x = (byte)1; (x += 3D) + (x += 2D)", (byte)10);
    test("var x = (byte)1; (x += 3D) + (x += 2D); x", (byte)6);
    test("var x = (byte)1; x += 3.0", (byte)4);
    test("var x = (byte)1; x += 3.0; x", (byte)4);
    test("var x = (byte)1; (x += 3.0) + (x += 2.0)", (byte)10);
    test("var x = (byte)1; (x += 3.0) + (x += 2.0); x", (byte)6);
    test("def x = (byte)1; x += (byte)3", (byte)4);
    test("def x = (byte)1; (x += (byte)3) + (x += (byte)2)", (byte)10);
    test("def x = (byte)1; (x += (byte)3) + (x += (byte)2); x", (byte)6);
    test("def x = (byte)1; x += 3; x", 4);
    test("def x = (byte)1; x += 3", 4);
    test("def x = (byte)1; (x += 3) + (x += 2)", 10);
    test("def x = (byte)1; (x += 3) + (x += 2); x", 6);
    test("def x = 1; int y = 3; x += y", 4);
    test("def x = 1; int y = 3; x += y; x", 4);
    test("def x = 1; int y = 3; x += (y += 1)", 5);
    test("def x = 1; int y = 3; x += (y += 1); x", 5);
    test("def x = 1; int y = 3; x += (y += 1); x + y", 9);
    test("def x = 1; int y = 3; x += y += 1", 5);
    test("def x = 1; int y = 3; x += y += 1; x", 5);
    test("def x = 1; int y = 3; x += y += 1; x + y", 9);
    test("def x = 1; int y = 3; y += x; y", 4);
    test("def x = 1; int y = 3; y += x", 4);
    test("double x = 1; int y = 3; y += x", 4);
    test("double x = 1; int y = 3; x += y", 4.0D);
    test("def x = 1.0D; int y = 3; y += x", 4);
    test("def x = 1.0D; int y = 3; x += y", 4.0D);
    test("def x = [a:2]; x.a += 3", 5);
    test("def x = [a:2]; x.a += (x.a += 3)", 7);
    test("Map x = [a:2]; x.a += (x.a += 3)", 7);
    test("def x = [:]; x.a += (x.a += 3)", 3);
    test("Map x; x.a += 3", 3);
    test("Map x; x.a += (x.a += 3)", 3);
    test("def x = [:]; x.a += 'xxx'", "xxx");
    test("Map x; x.a += 'xxx'", "xxx");
  }

  @Test public void minusEquals() {
    test("byte x = 7; x -= (byte)3", (byte)4);
    test("byte x = 9; (x -= (byte)3) + (x -= (byte)2)", (byte)10);
    test("byte x = 9; (x -= (byte)3) + (x -= (byte)2); x", (byte)4);
    test("byte x = 7; x -= 3; x", (byte)4);
    test("byte x = 7; x -= 3", (byte)4);
    test("def x = (byte)7; x -= (byte)3; x", (byte)4);
    test("def x = (byte)7; x -= (byte)3", (byte)4);
    test("def x = (byte)7; x -= 3; x", 4);
    test("def x = (byte)7; x -= 3", 4);
    test("byte x = 9; (x -= 3) + (x -= 2)", (byte)10);
    test("byte x = 9; (x -= 3) + (x -= 2); x", (byte)4);
    test("byte x = 7; x -= 3; x", (byte)4);
    test("int x = 1; x -= (byte)3", -2);
    test("int x = 1; x -= 3", -2);
    test("int x = 1; (x -= 3) + (x -= 2)", -6);
    test("int x = 1; (x -= 3) + (x -= 2); x", -4);
    test("int x = 1; x -= 3; x", -2);
    test("def x = 1; x -= (byte)3", -2);
    test("def x = 1; x -= 3", -2);
    test("def x = 1; x -= 3; x", -2);
    test("var x = 1; x -= 3", -2);
    test("var x = 1; x -= 3; x", -2);
    test("long x = 1; x -= (byte)3", -2L);
    test("long x = 1; x -= 3", -2L);
    test("long x = 1; x -= 3; x", -2L);
    test("double x = 1; x -= (byte)3", -2.0D);
    test("double x = 1; x -= 3", -2.0D);
    test("double x = 1; x -= 3; x", -2.0D);
    test("Decimal x = 1.0; x -= (byte)3", "#-2.0");
    test("Decimal x = 1.0; x -= 3", "#-2.0");
    test("Decimal x = 1.0; x -= 3; x", "#-2.0");
    test("var x = 1.0; x -= (byte)3", "#-2.0");
    test("var x = 1.0; x -= 3", "#-2.0");
    test("var x = 1.0; x -= 3; x", "#-2.0");
    test("def x = 1; byte y = 3; x -= y", -2);
    test("def x = 1; int y = 3; x -= y", -2);
    test("def x = 1; int y = 3; x -= y; x", -2);
    test("def x = 1; int y = 3; x -= (y -= 1)", -1);
    test("def x = 1; int y = 3; x -= (y -= 1); x", -1);
    test("def x = 1; int y = 3; x -= (y -= 1); x + y", 1);
    test("def x = 1; int y = 3; x -= y -= 1", -1);
    test("def x = 1; int y = 3; x -= y -= 1; x", -1);
    test("def x = 1; int y = 3; x -= y -= 1; x + y", 1);
    test("def x = 1; int y = 3; y -= x; y", 2);
    test("def x = 1; int y = 3; y -= x", 2);
    test("double x = 1; int y = (byte)3; y -= x", 2);
    test("double x = 1; int y = 3; y -= x", 2);
    test("double x = 1; int y = 3; x -= y", -2.0D);
    test("def x = 1.0D; int y = (byte)3; y -= x", 2);
    test("def x = 1.0D; int y = 3; y -= x", 2);
    test("def x = 1.0D; int y = 3; x -= y", -2.0D);
  }

  @Test public void starEquals(){
    test("byte x = 2; x *= (byte)3", (byte)6);
    test("byte x = 2; (x *= (byte)3) + (x *= (byte)2)", (byte)18);
    test("byte x = 2; (x *= (byte)3) + (x *= (byte)2); x", (byte)12);
    test("byte x = 2; x *= (byte)3; x", (byte)6);
    test("def x = (byte)2; x *= (byte)3", (byte)6);
    test("def x = (byte)2; (x *= (byte)3) + (x *= (byte)2)", (byte)18);
    test("def x = (byte)2; (x *= (byte)3) + (x *= (byte)2); x", (byte)12);
    test("def x = (byte)2; x *= (byte)3; x", (byte)6);
    test("def x = (byte)2; x *= 3", 6);
    test("def x = (byte)2; (x *= 3) + (x *= 2)", 18);
    test("def x = (byte)2; (x *= 3) + (x *= 2); x", 12);
    test("def x = (byte)2; x *= 3; x", 6);
    test("int x = 2; x *= (byte)3", 6);
    test("int x = 2; x *= 3", 6);
    test("int x = 2; (x *= 3) + (x *= 2)", 18);
    test("int x = 2; (x *= 3) + (x *= 2); x", 12);
    test("int x = 2; x *= 3; x", 6);
    test("def x = 2; x *= (byte)3", 6);
    test("def x = 2; x *= 3", 6);
    test("def x = 2; x *= 3; x", 6);
    test("var x = 2; x *= 3", 6);
    test("var x = 2; x *= 3; x", 6);
    test("long x = 2; x *= (byte)3", 6L);
    test("long x = 2; x *= 3", 6L);
    test("long x = 2; x *= 3; x", 6L);
    test("double x = 2; x *= (byte)3", 6.0D);
    test("double x = 2; x *= 3", 6.0D);
    test("double x = 2; x *= 3; x", 6.0D);
    test("Decimal x = 2.0; x *= (byte)3", "#6.0");
    test("Decimal x = 2.0; x *= 3", "#6.0");
    test("Decimal x = 2.0; x *= 3; x", "#6.0");
    test("var x = 2.0; x *= 3", "#6.0");
    test("var x = 2.0; x *= 3; x", "#6.0");
    test("def x = 2; int y = 3; x *= y", 6);
    test("def x = 2; int y = 3; x *= y; x", 6);
    test("def x = 2; int y = 3; x *= (y *= 2)", 12);
    test("def x = 2; int y = 3; x *= (y *= 2); x", 12);
    test("def x = 2; int y = 3; x *= (y *= 2); x + y", 18);
    test("def x = 2; int y = 3; x *= y *= 2", 12);
    test("def x = 2; int y = 3; x *= y *= 2; x", 12);
    test("def x = 2; int y = 3; x *= y *= 2; x + y", 18);
    test("def x = 2; int y = 3; y *= x; y", 6);
    test("def x = 2; int y = 3; y *= x", 6);
    test("def x = 2; int y = 3; def z = 4; x += y *= z += 2", 20);
    test("def x = 2; int y = 3; def z = 4; x += y *= z += 2; x", 20);
    test("def x = 2; int y = 3; def z = 4; x += y *= z += 2; y", 18);
    test("def x = 2; int y = 3; def z = 4; x += y *= z += 2; z", 6);
    test("double x = 2; byte y = 3; y *= x", (byte)6);
    test("double x = 2; int y = 3; y *= x", 6);
    test("double x = 2; int y = 3; x *= y", 6.0D);
    test("def x = 2.0D; byte y = 3; y *= x", (byte)6);
    test("def x = 2.0D; int y = 3; y *= x", 6);
    test("def x = 2.0D; int y = 3; x *= y", 6.0D);
    testError("def x; x *= 2", "null operand for left-hand side");
    test("def x = [:]; x.a *= 2", 0);
  }

  @Test public void slashEquals(){
    test("byte x = (byte)18; x /= (byte)3", (byte)6);
    test("byte x = (byte)18; (x /= (byte)3) + (x /= (byte)2)", (byte)9);
    test("byte x = (byte)18; (x /= (byte)3) + (x /= (byte)2); x", (byte)3);
    test("byte x = (byte)18; x /= (byte)3; x", (byte)6);
    test("def x = (byte)18; x /= (byte)3", (byte)6);
    test("def x = (byte)18; x /= (byte)3; x", (byte)6);
    test("def x = (byte)18; x /= 3", 6);
    test("def x = (byte)18; x /= 3; x", 6);
    test("var x = (byte)18; x /= (byte)3", (byte)6);
    test("var x = (byte)18; x /= (byte)3; x", (byte)6);
    test("int x = 18; x /= (byte)3", 6);
    test("int x = 18; x /= 3", 6);
    test("int x = 18; (x /= 3) + (x /= 2)", 9);
    test("int x = 18; (x /= 3) + (x /= 2); x", 3);
    test("int x = 18; x /= 3; x", 6);
    test("def x = 18; x /= (byte)3", 6);
    test("def x = 18; x /= 3", 6);
    test("def x = 18; x /= 3; x", 6);
    test("var x = 18; x /= 3", 6);
    test("var x = 18; x /= 3; x", 6);
    test("long x = 18; x /= (byte)3", 6L);
    test("long x = 18; x /= 3", 6L);
    test("long x = 18; x /= 3; x", 6L);
    test("double x = 18; x /= (byte)3", 6.0D);
    test("double x = 18; x /= 3", 6.0D);
    test("double x = 18; x /= 3; x", 6.0D);
    test("Decimal x = 18.0; x /= (byte)3", "#6.0");
    test("Decimal x = 18.0; x /= 3", "#6.0");
    test("Decimal x = 18.0; x /= 3; x", "#6.0");
    test("var x = 18.0; x /= 3", "#6.0");
    test("var x = 18.0; x /= 3; x", "#6.0");
    test("def x = 18; int y = 3; x /= y", 6);
    test("def x = 18; int y = 3; x /= y; x", 6);
    test("def x = 18; int y = 6; x /= (y /= 2)", 6);
    test("def x = 18; int y = 6; x /= (y /= 2); x", 6);
    test("def x = 18; int y = 6; x /= (y /= 2); x + y", 9);
    test("def x = 18; int y = 6; x /= y /= 2", 6);
    test("def x = 18; int y = 6; x /= y /= 2; x", 6);
    test("def x = 18; int y = 6; x /= y /= 2; x + y", 9);
    test("def x = 6; int y = 18; y /= x; y", 3);
    test("def x = 6; int y = 18; y /= x", 3);
    test("double x = 3; int y = 18; y /= x", 6);
    test("double x = 18; int y = 3; x /= y", 6.0D);
    test("def x = 3.0D; int y = 18; y /= x", 6);
    test("def x = 18.0D; int y = 3; x /= y", 6.0D);
    testError("int x = 1; x /= 0", "divide by zero");
    testError("long x = 1; x /= 0", "divide by zero");
    test("double x = 1; x /= 0", Double.POSITIVE_INFINITY);
    testError("Decimal x = 1; x /= 0", "divide by zero");
    testError("byte x = 1; x /= 0", "divide by zero");
  }

  @Test public void bitOperations() {
    test("(byte)1 & 1", 1);
    test("(byte)1 & 0", 0);
    test("(byte)0 & -1", 0);
    test("(byte)1 & (byte)1", (byte)1);
    test("(byte)1 & (byte)0", (byte)0);
    test("(byte)0 & (byte)-1", (byte)0);
    test("byte[] x = [255]; x[0] >> (byte)4", (byte)15);
    test("byte[] x = [255]; x[0] >>> (byte)4", (byte)15);
    test("1 & (byte)1", 1);
    test("1 & (byte)0", 0);
    test("0 & (byte)-1", 0);
    test("1 & 1", 1);
    test("1 & 0", 0);
    test("0 & -1", 0);
    test("-1 & 1L", 1L);
    test("5L & (byte)-1", 5L);
    test("5L & -1", 5L);
    test("5 & 4", 4);
    test("(256+255) & 0xff", 255);
    test("(256+255) & (byte)-1", 255);
    test("(byte)((256+255) & (byte)-1)", (byte)255);
    test("12345678901234L & 1234567", 12345678901234L & 1234567);
    test("(byte)1 | (byte)0", (byte)1);
    test("1 | 0", 1);
    test("(byte)1 | 0", 1);
    test("1 | 0L", 1L);
    test("12345678901234L | 1234567", 12345678901234L | 1234567);
    test("(byte)1 ^ (byte)0", (byte)1);
    test("1 ^ 0", 1);
    test("(byte)1 ^ 0", 1);
    test("5 ^ 7", 2);
    test("1L ^ 0", 1L);
    test("5 ^ 7L", 2L);
    test("12345678901234L ^ 1234567", 12345678901234L ^ 1234567);
    testError("1.0 & 1", "must be int, byte, or long");
    testError("1 & 1.0", "must be int, byte, or long");
    testError("1D & 1", "must be int, byte, or long");
    testError("1 & 1D", "must be int, byte, or long");
    testError("1.0 | 1", "must be int, byte, or long");
    testError("1 | 1.0", "must be int, byte, or long");
    testError("1D | 1", "must be int, byte, or long");
    testError("1 | 1D", "must be int, byte, or long");
    testError("1.0 ^ 1", "must be int, byte, or long");
    testError("1 ^ 1.0", "must be int, byte, or long");
    testError("1D ^ 1", "must be int, byte, or long");
    testError("1 ^ 1D", "must be int, byte, or long");
    testError("1 ^ 'abc'", "non-numeric operand");
    test("~(byte)1", (byte)~1);
    test("~1", ~1);
    test("~1L", ~1L);
    test("~0", ~0);
    test("~0L", ~0L);
    test("~12345", ~12345);
    test("~123456789012345L", ~123456789012345L);
    testError("~'abc'", "must be int, byte, or long");
    testError("~1.0", "must be int, byte, or long");
    testError("~1.0D", "must be int, byte, or long");
    test("(byte)1 << (byte)2", (byte)(1 << 2));
    test("(byte)4 >> (byte)1", (byte)2);
    test("(byte)-1 >> (byte)4", (byte)15);
    test("(byte)-1 >>> (byte)4", (byte)15);
    test("(byte)1 << (byte)9", (byte)2);
    test("def x = (byte)1; def y = (byte)2; x << y", (byte)(1 << 2));
    test("def x = (byte)4; def y =  (byte)1; x >> y", (byte)2);
    test("def x = (byte)-1; def y = (byte)4; x >> y", (byte)15);
    test("def x = (byte)-1; def y = (byte)4; x >>> y", (byte)15);
    test("def x = (byte)1 << (byte)9", (byte)2);
    test("1 << (byte)2", 1 << 2);
    test("1 << 2", 1 << 2);
    test("1 << 2L", 1 << 2L);
    test("1L << (byte)40", 1L << 40);
    test("1L << 40", 1L << 40);
    test("1 << ((1L << 32) + 1)", 1 << ((1L << 32) + 1));
    test("0 << (byte)7", 0);
    test("0 << 7", 0);
    test("0L << 7", 0L);
    test("2 << 40", 2 << 40);
    test("2L << 40", 2L << 40);
    test("1234567 >> (byte)5", 1234567 >> 5);
    test("1234567 >> 5", 1234567 >> 5);
    test("1234567 >> 5L", 1234567 >> 5L);
    test("123456789012345L >> (byte)5", 123456789012345L >> 5);
    test("123456789012345L >> 5", 123456789012345L >> 5);
    test("123456789012345L >> 5L", 123456789012345L >> 5L);
    test("-1 >> (byte)20", -1);
    test("-1 >> 20", -1);
    test("-1L >> 20", -1L);
    test("def x = -1; def y = (byte)20; x >>> y", -1 >>> 20);
    test("-1 >>> (byte)20", -1 >>> 20);
    test("-1 >>> 20", -1 >>> 20);
    test("-1L >>> 20", -1L >>> 20);

    test("def x = 1; def y = 1; x & y", 1);
    test("def x = 1; def y = 0; x & y", 0);
    test("def x = 0; def y = -1; x & y", 0);
    test("def x = -1; def y = 1L; x & y", 1L);
    test("def x = 5L; def y = -1; x & y", 5L);
    test("def x = 5; def y = 4; x & y", 4);
    test("def x = 12345678901234L; def y = 1234567; x & y", 12345678901234L & 1234567);
    test("def x = 1; def y = 0; x | y", 1);
    test("def x = 1; def y = 0L; x | y", 1L);
    test("def x = 12345678901234L; def y = 1234567; x | y", 12345678901234L | 1234567);
    test("def x = 1; def y = 0; x ^ y", 1);
    test("def x = 5; def y = 7; x ^ y", 2);
    test("def x = 1L; def y = 0; x ^ y", 1L);
    test("def x = (byte)5; def y = (byte)7; x ^ y", (byte)2);
    test("def x = 5; def y = (byte)7; x ^ y", 2);
    test("def x = 5; def y = 7L; x ^ y", 2L);
    test("def x = 12345678901234L; def y = 1234567; x ^ y", 12345678901234L ^ 1234567);
    testError("def x = 1.0; def y = 1; x & y", "must be int, byte, or long");
    testError("def x = 1; def y = 1.0; x & y", "must be int, byte, or long");
    testError("def x = 1D; def y = 1; x & y", "must be int, byte, or long");
    testError("def x = 1; def y = 1D; x & y", "must be int, byte, or long");
    testError("def x = 1.0; def y = 1; x | y", "must be int, byte, or long");
    testError("def x = 1; def y = 1.0; x | y", "must be int, byte, or long");
    testError("def x = 1D; def y = 1; x | y", "must be int, byte, or long");
    testError("def x = 1; def y = 1D; x | y", "must be int, byte, or long");
    testError("def x = 1.0; def y = 1; x ^ y", "must be int, byte, or long");
    testError("def x = 1; def y = 1.0; x ^ y", "must be int, byte, or long");
    testError("def x = 1D; def y = 1; x ^ y", "must be int, byte, or long");
    testError("def x = 1; def y = 1D; x ^ y", "must be int, byte, or long");
    testError("def x = 1; def y = 'abc'; x ^ y", "must be int, byte, or long");
    test("def x = (byte)1; ~x", (byte)~1);
    test("def x = 1; ~x", ~1);
    test("def x = 1L; ~x", ~1L);
    test("def x = 0; ~x", ~0);
    test("def x = 0L; ~x", ~0L);
    test("def x = 12345; ~x", ~12345);
    test("def x = 123456789012345L; ~x", ~123456789012345L);
    testError("def x = 'abc'; ~x", "must be int, byte, or long");
    testError("def x = 1.0; ~x", "must be int, byte, or long");
    testError("def x = 1.0D; ~x", "must be int, byte, or long");
    test("def x = 1; def y = 2; x << y", 1 << 2);
    test("def x = 1; def y = 2L; x << y", 1 << 2L);
    test("def x = 1L; def y = 40; x << y", 1L << 40);
    test("def x = 1; def y = ((1L << 32) + 1); x << y", 1 << ((1L << 32) + 1));
    test("def x = 0; def y = 7; x << y", 0);
    test("def x = 0L; def y = 7; x << y", 0L);
    test("def x = 2; def y = 40; x << y", 2 << 40);
    test("def x = 2L; def y = 40; x << y", 2L << 40);
    test("def x = 1234567; def y = 5; x >> y", 1234567 >> 5);
    test("def x = 1234567; def y = 5L; x >> y", 1234567 >> 5L);
    test("def x = 123456789012345L; def y = 5; x >> y", 123456789012345L >> 5);
    test("def x = 123456789012345L; def y = 5L; x >> y", 123456789012345L >> 5L);
    test("def x = -1; def y = 20; x >> y", -1);
    test("def x = -1L; def y = 20; x >> y", -1L);
    test("def x = -1; def y = 20; x >>> y", -1 >>> 20);
    test("def x = -1L; def y = 20; x >>> y", -1L >>> 20);

    test("def x = (byte)1; def y = (byte)1; x &= y; x", (byte)1);
    test("def x = 1; def y = 1; x &= y; x", 1);
    test("def x = 1; def y = 0; x &= y; x", 0);
    test("def x = 0; def y = -1; x &= y; x", 0);
    test("def x = -1; def y = 1L; x &= y; x", 1L);
    test("def x = 5L; def y = -1; x &= y; x", 5L);
    test("def x = 5; def y = 4; x &= y; x", 4);
    test("def x = 12345678901234L; def y = 1234567; x &= y; x", 12345678901234L & 1234567);
    test("def x = (byte)1; def y = (byte)0; x |= y; x", (byte)1);
    test("def x = 1; def y = 0; x |= y; x", 1);
    test("def x = 1; def y = 0L; x |= y; x", 1L);
    test("def x = 12345678901234L; def y = 1234567; x |= y; x", 12345678901234L | 1234567);
    test("def x = 1; def y = 0; x ^= y; x", 1);
    test("def x = 5; def y = 7; x ^= y; x", 2);
    test("def x = 1L; def y = 0; x ^= y; x", 1L);
    test("def x = 5; def y = 7L; x ^= y; x", 2L);
    test("def x = 12345678901234L; def y = 1234567; x ^= y; x", 12345678901234L ^ 1234567);
    testError("def x = 1.0; def y = 1; x &= y; x", "must be int, byte, or long");
    testError("def x = 1; def y = 1.0; x &= y; x", "must be int, byte, or long");
    testError("def x = 1D; def y = 1; x &= y; x", "must be int, byte, or long");
    testError("def x = 1; def y = 1D; x &= y; x", "must be int, byte, or long");
    testError("def x = 1.0; def y = 1; x |= y; x", "must be int, byte, or long");
    testError("def x = 1; def y = 1.0; x |= y; x", "must be int, byte, or long");
    testError("def x = 1D; def y = 1; x |= y; x", "must be int, byte, or long");
    testError("def x = 1; def y = 1D; x |= y; x", "must be int, byte, or long");
    testError("def x = 1.0; def y = 1; x ^= y; x", "must be int, byte, or long");
    testError("def x = 1; def y = 1.0; x ^= y; x", "must be int, byte, or long");
    testError("def x = 1D; def y = 1; x ^= y; x", "must be int, byte, or long");
    testError("def x = 1; def y = 1D; x ^= y; x", "must be int, byte, or long");
    testError("def x = 1; def y = 'abc'; x ^= y; x", "must be int, byte, or long");
    test("def x = 1; def y = 2; x <<= y", 1 << 2);
    test("def x = 1; def y = 2L; x <<= y", 1 << 2L);
    test("def x = 1L; def y = 40; x <<= y", 1L << 40);
    test("def x = 1; def y = ((1L << 32) + 1); x <<= y", 1 << ((1L << 32) + 1));
    test("def x = 0; def y = 7; x <<= y", 0);
    test("def x = 0L; def y = 7; x <<= y", 0L);
    test("def x = 2; def y = 40; x <<= y", 2 << 40);
    test("def x = 2L; def y = 40; x <<= y", 2L << 40);
    test("def x = 1234567; def y = 5; x >>= y", 1234567 >> 5);
    test("def x = 1234567; def y = 5L; x >>= y", 1234567 >> 5L);
    test("def x = 123456789012345L; def y = 5; x >>= y", 123456789012345L >> 5);
    test("def x = 123456789012345L; def y = 5L; x >>= y", 123456789012345L >> 5L);
    test("def x = -1; def y = 20; x >>= y", -1);
    test("def x = -1L; def y = 20; x >>= y", -1L);
    test("def x = -1; def y = 20; x >>>= y", -1 >>> 20);
    test("def x = -1L; def y = 20; x >>>= y", -1L >>> 20);

    test("var x = (byte)1; def y = (byte)1; x &= y; x", (byte)1);
    test("var x = 1; def y = (byte)1; x &= y; x", 1);
    test("var x = (byte)1; def y = 1; x &= y; x", (byte)1);
    test("var x = (byte)1; def y = 1L; x &= y; x", (byte)1);
    test("var x = 1; def y = 1; x &= y; x", 1);
    test("var x = 1; def y = 0; x &= y; x", 0);
    test("var x = -1; def y = 0; x &= y; x", 0);
    test("var x = -1; def y = 1L; x &= y; x", 1);
    test("var x = -1L; def y = 5; x &= y; x", 5L);
    test("var x = 5; def y = 4; x &= y; x", 4);
    test("var x = 12345678901234L; def y = 1234567; x &= y; x", 12345678901234L & 1234567);
    test("var x = (byte)1; def y = (byte)0; x |= y; x", (byte)1);
    test("var x = (byte)1; def y = 0; x |= y; x", (byte)1);
    test("var x = 1; def y = (byte)0; x |= y; x", 1);
    test("var x = 1L; def y = (byte)0; x |= y; x", 1L);
    test("var x = 1; def y = 0; x |= y; x", 1);
    test("var x = 1; def y = 0L; x |= y; x", 1);
    test("var x = 12345678901234L; def y = 1234567; x |= y; x", 12345678901234L | 1234567);
    test("var x = (byte)1; def y = (byte)0; x ^= y; x", (byte)1);
    test("var x = 1L; def y = (byte)0; x ^= y; x", 1L);
    test("var x = (byte)1; def y = 0; x ^= y; x", (byte)1);
    test("var x = 1; def y = 0; x ^= y; x", 1);
    test("var x = 5; def y = 7; x ^= y; x", 2);
    test("var x = 1L; def y = 0; x ^= y; x", 1L);
    test("var x = 5L; def y = 7; x ^= y; x", 2L);
    test("var x = 12345678901234L; def y = 1234567; x ^= y; x", 12345678901234L ^ 1234567);
    testError("var x = 1.0; def y = 1; x &= y; x", "must be int, byte, or long");
    testError("var x = 1; def y = 1.0; x &= y; x", "must be int, byte, or long");
    testError("var x = 1D; def y = 1; x &= y; x", "must be int, byte, or long");
    testError("var x = 1; def y = 1D; x &= y; x", "must be int, byte, or long");
    testError("var x = 1.0; def y = 1; x |= y; x", "must be int, byte, or long");
    testError("var x = 1; def y = 1.0; x |= y; x", "must be int, byte, or long");
    testError("var x = 1D; def y = 1; x |= y; x", "must be int, byte, or long");
    testError("var x = 1; def y = 1D; x |= y; x", "must be int, byte, or long");
    testError("var x = 1.0; def y = 1; x ^= y; x", "must be int, byte, or long");
    testError("var x = 1; def y = 1.0; x ^= y; x", "must be int, byte, or long");
    testError("var x = 1D; def y = 1; x ^= y; x", "must be int, byte, or long");
    testError("var x = 1; def y = 1D; x ^= y; x", "must be int, byte, or long");
    testError("var x = 1; def y = 'abc'; x ^= y; x", "must be int, byte, or long");
    test("var x = 1; def y = 2; x <<= y", 1 << 2);
    test("var x = 1; def y = 2L; x <<= y", 1 << 2L);
    test("var x = 1L; def y = 40; x <<= y", 1L << 40);
    test("var x = 1; def y = ((1L << 32) + 1); x <<= y", 1 << ((1L << 32) + 1));
    test("var x = 0; def y = 7; x <<= y", 0);
    test("var x = 0L; def y = 7; x <<= y", 0L);
    test("var x = 2; def y = 40; x <<= y", 2 << 40);
    test("var x = 2L; def y = 40; x <<= y", 2L << 40);
    test("var x = 1234567; def y = 5; x >>= y", 1234567 >> 5);
    test("var x = 1234567; def y = 5L; x >>= y", 1234567 >> 5L);
    test("var x = 123456789012345L; def y = 5; x >>= y", 123456789012345L >> 5);
    test("var x = 123456789012345L; def y = 5L; x >>= y", 123456789012345L >> 5L);
    test("var x = -1; def y = 20; x >>= y", -1);
    test("var x = -1L; def y = 20; x >>= y", -1L);
    test("var x = -1; def y = 20; x >>>= y", -1 >>> 20);
    test("var x = -1L; def y = 20; x >>>= y", -1L >>> 20);

    test("def x = 1; var y = 1; x &= y; x", 1);
    test("def x = 1; var y = 0; x &= y; x", 0);
    test("def x = -1; var y = 0; x &= y; x", 0);
    test("def x = -1; var y = 1L; x &= y; x", 1L);
    test("def x = -1; var y = 5L; x &= y; x", 5L);
    test("def x = 5; var y = 4; x &= y; x", 4);
    test("def x = 12345678901234L; var y = 1234567; x &= y; x", 12345678901234L & 1234567);
    test("def x = 1; var y = 0; x |= y; x", 1);
    test("def x = 1; var y = 0L; x |= y; x", 1L);
    test("def x = 12345678901234L; var y = 1234567; x |= y; x", 12345678901234L | 1234567);
    test("def x = 1; var y = 0; x ^= y; x", 1);
    test("def x = 5; var y = 7; x ^= y; x", 2);
    test("def x = 1L; var y = 0; x ^= y; x", 1L);
    test("def x = 5; var y = 7L; x ^= y; x", 2L);
    test("def x = 12345678901234L; var y = 1234567; x ^= y; x", 12345678901234L ^ 1234567);
    testError("def x = 1.0; var y = 1; x &= y; x", "must be int, byte, or long");
    testError("def x = 1; var y = 1.0; x &= y; x", "must be int, byte, or long");
    testError("def x = 1D; var y = 1; x &= y; x", "must be int, byte, or long");
    testError("def x = 1; var y = 1D; x &= y; x", "must be int, byte, or long");
    testError("def x = 1.0; var y = 1; x |= y; x", "must be int, byte, or long");
    testError("def x = 1; var y = 1.0; x |= y; x", "must be int, byte, or long");
    testError("def x = 1D; var y = 1; x |= y; x", "must be int, byte, or long");
    testError("def x = 1; var y = 1D; x |= y; x", "must be int, byte, or long");
    testError("def x = 1.0; var y = 1; x ^= y; x", "must be int, byte, or long");
    testError("def x = 1; var y = 1.0; x ^= y; x", "must be int, byte, or long");
    testError("def x = 1D; var y = 1; x ^= y; x", "must be int, byte, or long");
    testError("def x = 1; var y = 1D; x ^= y; x", "must be int, byte, or long");
    testError("def x = 1; var y = 'abc'; x ^= y; x", "non-numeric operand");
    test("def x = 1; var y = 2; x <<= y", 1 << 2);
    test("def x = 1; var y = 2L; x <<= y", 1 << 2L);
    test("def x = 1L; var y = 40; x <<= y", 1L << 40);
    test("def x = 1; var y = ((1L << 32) + 1); x <<= y", 1 << ((1L << 32) + 1));
    test("def x = 0; var y = 7; x <<= y", 0);
    test("def x = 0L; var y = 7; x <<= y", 0L);
    test("def x = 2; var y = 40; x <<= y", 2 << 40);
    test("def x = 2L; var y = 40; x <<= y", 2L << 40);
    test("def x = 1234567; var y = 5; x >>= y", 1234567 >> 5);
    test("def x = 1234567; var y = 5L; x >>= y", 1234567 >> 5L);
    test("def x = 123456789012345L; var y = 5; x >>= y", 123456789012345L >> 5);
    test("def x = 123456789012345L; var y = 5L; x >>= y", 123456789012345L >> 5L);
    test("def x = -1; var y = 20; x >>= y", -1);
    test("def x = -1L; var y = 20; x >>= y", -1L);
    test("def x = -1; var y = 20; x >>>= y", -1 >>> 20);
    test("def x = -1L; var y = 20; x >>>= y", -1L >>> 20);
  }

  @Test public void percentEquals(){
    test("byte x = 18; x %= 7L", (byte)4);
    test("byte x = 18; x %= 7; x", (byte)4);
    test("byte x = 18; (x %= 7) + (x %= 3)", (byte)5);
    test("byte x = 18; (x %= 7) + (x %= 3); x", (byte)1);
    test("byte x = 18; x %= 7; x", (byte)4);
    test("int x = 18; x %= 7L", 4);
    test("int x = 18; x %= 7; x", 4);
    test("int x = 18; (x %= 7) + (x %= 3)", 5);
    test("int x = 18; (x %= 7) + (x %= 3); x", 1);
    test("int x = 18; x %= 7; x", 4);
    test("def x = 18; x %= 7L", 4L);
    test("def x = 18; x %= 7; x", 4);
    test("var x = 18; x %= 7L", 4);
    test("var x = 18; x %= 7; x", 4);
    test("long x = 18; x %= 7L", 4L);
    test("long x = 18; x %= 7; x", 4L);
    test("double x = 18; x %= 7L", 4.0D);
    test("double x = 18; x %= 7; x", 4.0D);
    test("Decimal x = 18.0; x %= 7L", "#4.0");
    test("Decimal x = 18.0; x %= 7; x", "#4.0");
    test("var x = 18.0; x %= 7L", "#4.0");
    test("var x = 18.0; x %= 7; x", "#4.0");
    test("def x = 18; int y = 7; x %= y", 4);
    test("def x = 18; int y = 7; x %= y; x", 4);
    test("def x = 18; int y = 7; x %= (y %= 4)", 0);
    test("def x = 18; int y = 7; x %= (y %= 4); x", 0);
    test("def x = 18; int y = 7; x %= (y %= 4); x + y", 3);
    test("def x = 18; int y = 7; x %= y %= 4", 0);
    test("def x = 18; int y = 7; x %= y %= 4; x", 0);
    test("def x = 18; int y = 7; x %= y %= 4; x + y", 3);
    test("def x = 7; int y = 18; y %= x; y", 4);
    test("def x = 7; int y = 18; y %= x", 4);
    test("double x = 7; int y = 18; y %= x", 4);
    test("double x = 18; int y = 7; x %= y", 4.0D);
    test("def x = 7.0D; int y = 18; y %= x", 4);
    test("def x = 18.0D; int y = 7; x %= y", 4.0D);
    test("int x = -18; x %= 7L", 3);
    test("int x = -18; x %= 7; x", 3);
    test("int x = -18; (x %= 7) + (x %= 2)", 4);
    test("int x = -18; (x %= 7) + (x %= 3); x", 0);
    test("int x = -18; x %= 7; x", 3);
    test("def x = -18; x %= 7L", 3L);
    test("def x = -18; x %= 7; x", 3);
    test("var x = -18; x %= 7L", 3);
    test("var x = -18; x %= 7; x", 3);
    test("long x = -18; x %= 7L", 3L);
    test("long x = -18; x %= 7; x", 3L);
    test("double x = -18; x %= 7L", 3.0D);
    test("double x = -18; x %= 7; x", 3.0D);
    test("Decimal x = -18.0; x %= 7L", "#3.0");
    test("Decimal x = -18.0; x %= 7; x", "#3.0");
    test("var x = -18.0; x %= 7L", "#3.0");
    test("var x = -18.0; x %= 7; x", "#3.0");
    test("def x = -18; int y = 7; x %= y", 3);
    test("def x = -18; int y = 7; x %= y; x", 3);
    test("def x = -18; int y = 7; x %= (y %= 4)", 0);
    test("def x = -18; int y = 7; x %= (y %= 4); x", 0);
    test("def x = -18; int y = 7; x %= (y %= 4); x + y", 3);
    test("def x = -18; int y = 7; x %= y %= 4", 0);
    test("def x = -18; int y = 7; x %= y %= 4; x", 0);
    test("def x = -18; int y = 7; x %= y %= 4; x + y", 3);
    test("def x = 7; int y = -18; y %= x; y", 3);
    test("def x = 7; int y = -18; y %= x", 3);
    test("double x = 7; int y = -18; y %= x", 3);
    test("double x = -18; int y = 7; x %= y", 3.0D);
    test("def x = 7.0D; int y = -18; y %= x", 3);
    test("def x = -18.0D; int y = 7; x %= y", 3.0D);
    test("byte x = 18; x %%= 7L", (byte)4);
    test("byte x = 18; x %%= 7; x", (byte)4);
    test("byte x = 18; (x %%= 7) + (x %%= 3)", (byte)5);
    test("byte x = 18; (x %%= 7) + (x %%= 3); x", (byte)1);
    test("byte x = 18; x %%= 7; x", (byte)4);
    test("int x = 18; x %%= 7L", 4);
    test("int x = 18; x %%= 7; x", 4);
    test("int x = 18; (x %%= 7) + (x %%= 3)", 5);
    test("int x = 18; (x %%= 7) + (x %%= 3); x", 1);
    test("int x = 18; x %%= 7; x", 4);
    test("def x = 18; x %%= 7L", 4L);
    test("def x = (byte)18; x %%= 7L", 4L);
    test("def x = 18; x %%= 7; x", 4);
    test("var x = 18; x %%= 7L", 4);
    test("var x = 18; x %%= 7; x", 4);
    test("long x = 18; x %%= 7L", 4L);
    test("long x = 18; x %%= 7; x", 4L);
    test("double x = 18; x %%= 7L", 4.0D);
    test("double x = 18; x %%= (byte)7", 4.0D);
    test("double x = 18; x %%= 7; x", 4.0D);
    test("Decimal x = 18.0; x %%= 7L", "#4.0");
    test("Decimal x = 18.0; x %%= 7; x", "#4.0");
    test("Decimal x = 18.0; x %%= (byte)7; x", "#4.0");
    test("var x = 18.0; x %%= 7L", "#4.0");
    test("var x = 18.0; x %%= 7; x", "#4.0");
    test("def x = 18; int y = 7; x %%= y", 4);
    test("def x = 18; int y = 7; x %%= y; x", 4);
    test("def x = 18; int y = 7; x %%= (y %%= 4)", 0);
    test("def x = 18; byte y = (byte)7; x %%= (y %%= 4); x", 0);
    test("def x = 18; int y = 7; x %%= (y %%= 4); x + y", 3);
    test("def x = 18; int y = 7; x %%= y %%= 4", 0);
    test("def x = 18; int y = 7; x %%= y %%= 4; x", 0);
    test("def x = 18; int y = 7; x %%= y %%= 4; x + y", 3);
    test("def x = 7; int y = 18; y %%= x; y", 4);
    test("def x = 7; int y = 18; y %%= x", 4);
    test("double x = 7; int y = 18; y %%= x", 4);
    test("double x = 18; int y = 7; x %%= y", 4.0D);
    test("def x = 7.0D; int y = 18; y %%= x", 4);
    test("def x = 18.0D; int y = 7; x %%= y", 4.0D);
    test("int x = -18; x %%= 7L", -4);
    test("int x = -18; x %%= 7; x", -4);
    test("int x = -18; (x %%= 7) + (x %%= 3)", -5);
    test("int x = -18; (x %%= 7) + (x %%= 3); x", -1);
    test("int x = -18; x %%= 7; x", -4);
    test("def x = -18; x %%= 7L", -4L);
    test("def x = -18; x %%= 7; x", -4);
    test("var x = -18; x %%= 7L", -4);
    test("var x = -18; x %%= 7; x", -4);
    test("long x = -18; x %%= 7L", -4L);
    test("long x = -18; x %%= 7; x", -4L);
    test("double x = -18; x %%= 7L", -4.0D);
    test("double x = -18; x %%= 7; x", -4.0D);
    test("Decimal x = -18.0; x %%= 7L", "#-4.0");
    test("Decimal x = -18.0; x %%= 7; x", "#-4.0");
    test("var x = -18.0; x %%= 7L", "#-4.0");
    test("var x = -18.0; x %%= 7; x", "#-4.0");
    test("def x = -18; int y = 7; x %%= y", -4);
    test("def x = -18; int y = 7; x %%= y; x", -4);
    test("def x = -18; int y = 7; x %%= (y %%= 4)", 0);
    test("def x = -18; int y = 7; x %%= (y %%= 4); x", 0);
    test("def x = -18; int y = 7; x %%= (y %%= 4); x + y", 3);
    test("def x = -18; int y = 7; x %%= y %%= 4", 0);
    test("def x = -18; int y = 7; x %%= y %%= 4; x", 0);
    test("def x = -18; int y = 7; x %%= y %%= 4; x + y", 3);
    test("def x = 7; int y = -18; y %%= x; y", -4);
    test("def x = 7; int y = -18; y %%= x", -4);
    test("double x = 7; int y = -18; y %%= x", -4);
    test("double x = -18; int y = 7; x %%= y", -4.0D);
    test("def x = 7.0D; int y = -18; y %%= x", -4);
    test("def x = -18.0D; int y = 7; x %%= y", -4.0D);
  }

  @Test
  public void defVariableArithmetic() {
    test("def v = 1", 1);
    testError("def v = 1; v + true", "non-numeric operand for right-hand side");
    testError("def v = false; v + 1", "non-numeric operand for left-hand side");
    testError("def v = true; 1 + v", "non-numeric operand for right-hand side");
    testError("def v = 1; false + 1", "non-numeric operand for left-hand side");
    testError("def x = 1; def y = true; x + y", "non-numeric operand for right-hand side");
    testError("def x = 1; x - 'abc'", "non-numeric operand for right-hand side");
    testError("def x = 'abc'; 1 - x", "non-numeric operand for right-hand side");
    testError("def x = 'abc'; x - 1", "non-numeric operand for left-hand side");
    testError("def x = 'abc'; def y = 1; x - y", "non-numeric operand for left-hand side");
    testError("def x = 1; 'abc' - x", "non-numeric operand for left-hand side");
    testError("def x = false; x + true", "non-numeric operand for left-hand side");
    testError("def x = true; false + x", "non-numeric operand for left-hand side");
    testError("def x = false; def y = true; x + y", "non-numeric operand for left-hand side");
    testError("def x = 1; x + null", "null operand for right-hand side");
    testError("def x = null; 1 + x", "null operand for right-hand side");
    testError("def x = 1; def y =null; x + y", "null operand for right-hand side");
    testError("def x = null; x + 1", "null operand for left-hand side");
    testError("def x = 1; null + x", "null operand for left-hand side");
    testError("def x = null; def y = 1; x + y", "null operand for left-hand side");

    test("def x = false; !x", true);
    test("def x = true; !x", false);
    test("def x = (byte)1; x + (byte)2", (byte)3);
    test("def x = (byte)2; (byte)1 + x", (byte)3);
    test("def x = (byte)1; def y = (byte)2; x + y", (byte)3);
    test("def x = (byte)1; x - (byte)2", (byte)-1);
    test("def x = (byte)2; (byte)1 - x", (byte)-1);
    test("def x = (byte)1; def y = (byte)2; x - y", (byte)-1);
    test("def x = (byte)1; x - (byte)-2", (byte)3);
    test("def x = (byte)2; (byte)1 - -x", (byte)3);
    test("def x = (byte)1; def y = (byte)2; x - -y", (byte)3);
    test("def x = (byte)2; x * (byte)3", (byte)6);
    test("def x = (byte)3; (byte)2 * x", (byte)6);
    test("def x = (byte)2; def y = (byte)3; x * y", (byte)6);
    test("def x = (byte)6; x / (byte)3", (byte)2);
    test("def x = (byte)3; (byte)6 / x", (byte)2);
    test("def x = (byte)6; def y = (byte)3; x / y", (byte)2);
    test("def x = (byte)8; x %% (byte)5", (byte)3);
    test("def x = (byte)5; (byte)8 %% x", (byte)3);
    test("def x = (byte)8; def y = (byte)5; x %% y", (byte)3);
    test("def x = (byte)-8; x %% (byte)5", (byte)3);
    test("def x = (byte)5; (byte)-8 %% x", (byte)3);
    test("def x = (byte)-8; def y = (byte)5; x %% y", (byte)3);
    test("def x = (byte)8; x % (byte)5", (byte)3);
    test("def x = (byte)5; (byte)8 % x", (byte)3);
    test("def x = (byte)8; def y = (byte)5; x % y", (byte)3);
    test("def x = 1; x + 2", 3);
    test("def x = 2; 1 + x", 3);
    test("def x = 1; def y = 2; x + y", 3);
    test("def x = 1; x - 2", -1);
    test("def x = 2; 1 - x", -1);
    test("def x = 1; def y = 2; x - y", -1);
    test("def x = 1; x - -2", 3);
    test("def x = 2; 1 - -x", 3);
    test("def x = 1; def y = 2; x - -y", 3);
    test("def x = 2; x * 3", 6);
    test("def x = 3; 2 * x", 6);
    test("def x = 2; def y = 3; x * y", 6);
    test("def x = 6; x / 3", 2);
    test("def x = 3; 6 / x", 2);
    test("def x = 6; def y = 3; x / y", 2);
    test("def x = 8; x %% 5", 3);
    test("def x = 5; 8 %% x", 3);
    test("def x = 8; def y = 5; x %% y", 3);
    test("def x = -8; x %% 5", -3);
    test("def x = 5; -8 %% x", -3);
    test("def x = -8; def y = 5; x %% y", -3);
    test("def x = 8; x % 5", 3);
    test("def x = 5; 8 % x", 3);
    test("def x = 8; def y = 5; x % y", 3);
    test("def x = -8; x % 5", 2);
    test("def x = 5; -8 % x", 2);
    test("def x = -8; def y = 5; x % y", 2);
    test("def x = 1L; x + 2L", 3L);
    test("def x = 2L; 1L + x", 3L);
    test("def x = 1L; def y = 2L; x + y", 3L);
    test("def x = 1L; x - 2L", -1L);
    test("def x = 2L; 1L - x", -1L);
    test("def x = 1L; def y = 2L; x - y", -1L);
    test("def x = 1L; x - -2L", 3L);
    test("def x = 2L; 1L - -x", 3L);
    test("def x = 1L; def y = 2L; x - -y", 3L);
    test("def x = 2L; x * 3L", 6L);
    test("def x = 3L; 2L * x", 6L);
    test("def x = 2L; def y = 3L; x * y", 6L);
    test("def x = 6L; x / 3L", 2L);
    test("def x = 3L; 6L / x", 2L);
    test("def x = 6L; def y = 3L; x / y", 2L);
    test("def x = 8L; x %% 5L", 3L);
    test("def x = 5L; 8L %% x", 3L);
    test("def x = 8L; def y = 5L; x %% y", 3L);
    test("def x = -8L; x %% 5L", -3L);
    test("def x = 5L; -8L %% x", -3L);
    test("def x = -8L; def y = 5L; x %% y", -3L);
    test("def x = 8L; x % 5L", 3L);
    test("def x = 5L; 8L % x", 3L);
    test("def x = 8L; def y = 5L; x % y", 3L);
    test("def x = -8L; x % 5L", 2L);
    test("def x = 5L; -8L % x", 2L);
    test("def x = -8L; def y = 5L; x % y", 2L);
    test("def x = 1; x + 2L", 3L);
    test("def x = 2L; 1 + x", 3L);
    test("def x = 1; def y = 2L; x + y", 3L);
    test("def x = 1L; x - 2", -1L);
    test("def x = 2; 1L - x", -1L);
    test("def x = 1L; def y = 2; x - y", -1L);
    test("def x = 1; x - -2L", 3L);
    test("def x = 2L; 1 - -x", 3L);
    test("def x = 1; def y = 2L; x - -y", 3L);
    test("def x = 2L; x * 3", 6L);
    test("def x = 3; 2L * x", 6L);
    test("def x = 2L; def y = 3; x * y", 6L);
    test("def x = 6; x / 3L", 2L);
    test("def x = 3L; 6 / x", 2L);
    test("def x = 6; def y = 3L; x / y", 2L);
    test("def x = 8L; x %% 5", 3L);
    test("def x = 5; 8L %% x", 3L);
    test("def x = 8L; def y = 5; x %% y", 3L);
    test("def x = 8; x %% 5L", 3L);
    test("def x = 5L; 8 %% x", 3L);
    test("def x = 8; def y = 5L; x %% y", 3L);
    test("def x = -8L; x %% 5", -3L);
    test("def x = 5; -8L %% x", -3L);
    test("def x = -8L; def y = 5; x %% y", -3L);
    test("def x = -8; x %% 5L", -3L);
    test("def x = 5L; -8 %% x", -3L);
    test("def x = -8; def y = 5L; x %% y", -3L);
    test("def x = 8L; x % 5", 3L);
    test("def x = 5; 8L % x", 3L);
    test("def x = 8L; def y = 5; x % y", 3L);
    test("def x = 8; x % 5L", 3L);
    test("def x = 5L; 8 % x", 3L);
    test("def x = 8; def y = 5L; x % y", 3L);
    test("def x = -8L; x % 5", 2L);
    test("def x = 5; -8L % x", 2L);
    test("def x = -8L; def y = 5; x % y", 2L);
    test("def x = -8; x % 5L", 2L);
    test("def x = 5L; -8 % x", 2L);
    test("def x = -8; def y = 5L; x % y", 2L);

    test("def x = 1.0D; x + 2.0D", 3.0D);
    test("def x =  2.0D; 1.0D + x", 3.0D);
    test("def x = 1.0D; def y = 2.0D; x + y", 3.0D);
    test("def x = 1.0D; x - 2.0D", -1.0D);
    test("def x =  2.0D; 1.0D - x", -1.0D);
    test("def x = 1.0D; def y = 2.0D; x - y", -1.0D);
    test("def x = 1.0D; x - -2.0D", 3.0D);
    test("def x =  -2.0D; 1.0D - x", 3.0D);
    test("def x = 1.0D; def y = 2.0D; x - -y", 3.0D);
    test("def x = 2.0D; x * 3.0D", 6D);
    test("def x =  3.0D; 2.0D * x", 6D);
    test("def x = 2.0D; def y = 3.0D; x * y", 6D);
    test("def x = 6.0D; x / 3.0D", 2.0D);
    test("def x =  3.0D; 6.0D / x", 2.0D);
    test("def x = 6.0D; def y = 3.0D; x / y", 2.0D);
    test("def x = 8.0D; x %% 5.0D", 3D);
    test("def x =  5.0D; 8.0D %% x", 3D);
    test("def x = 8.0D; def y = 5.0D; x %% y", 3D);
    test("def x = -8.0D; x %% 5.0D", -3D);
    test("def x =  5.0D; -8.0D %% x", -3D);
    test("def x = -8.0D; def y = 5.0D; x %% y", -3D);
    test("def x = 8.0D; x % 5.0D", 3D);
    test("def x =  5.0D; 8.0D % x", 3D);
    test("def x = 8.0D; def y = 5.0D; x % y", 3D);
    test("def x = -8.0D; x % 5.0D", 2D);
    test("def x =  5.0D; -8.0D % x", 2D);
    test("def x = -8.0D; def y = 5.0D; x % y", 2D);
    test("def x = 1L; x + 2.0D", 3.0D);
    test("def x =  2.0D; 1L + x", 3.0D);
    test("def x = 1L; def y = 2.0D; x + y", 3.0D);
    test("def x = 1.0D; x - 2L", -1.0D);
    test("def x =  2L; 1.0D - x", -1.0D);
    test("def x = 1.0D; def y = 2L; x - y", -1.0D);
    test("def x = 1L; x - -2.0D", 3.0D);
    test("def x =  -2.0D; 1L - x", 3.0D);
    test("def x = 1L; def y = 2.0D; x - -y", 3.0D);
    test("def x = 2.0D; x * 3L", 6D);
    test("def x =  3L; 2.0D * x", 6D);
    test("def x = 2.0D; def y = 3L; x * y", 6D);
    test("def x = 6L; x / 3.0D", 2.0D);
    test("def x =  3.0D; 6L / x", 2.0D);
    test("def x = 6L; def y = 3.0D; x / y", 2.0D);
    test("def x = 8.0D; x %% 5L", 3D);
    test("def x =  5L; 8.0D %% x", 3D);
    test("def x = 8.0D; def y = 5L; x %% y", 3D);
    test("def x = -8.0D; x %% 5L", -3D);
    test("def x =  5L; -8.0D %% x", -3D);
    test("def x = -8.0D; def y = 5L; x %% y", -3D);
    test("def x = 8.0D; x % 5L", 3D);
    test("def x =  5L; 8.0D % x", 3D);
    test("def x = 8.0D; def y = 5L; x % y", 3D);
    test("def x = -8.0D; x % 5L", 2D);
    test("def x =  5L; -8.0D % x", 2D);
    test("def x = -8.0D; def y = 5L; x % y", 2D);
    test("def x = 1.0; x + 2.0", "#3.0");
    test("def x =  2.0; 1.0 + x", "#3.0");
    test("def x = 1.0; def y = 2.0; x + y", "#3.0");
    test("def x = 1.0; x - 2.0", "#-1.0");
    test("def x =  2.0; 1.0 - x", "#-1.0");
    test("def x = 1.0; def y = 2.0; x - y", "#-1.0");
    test("def x = 1.0; x - -2.0", "#3.0");
    test("def x =  -2.0; 1.0 - x", "#3.0");
    test("def x = 1.0; def y = 2.0; x - -y", "#3.0");
    test("def x = 2.0; x * 3.0", "#6.00");
    test("def x =  3.0; 2.0 * x", "#6.00");
    test("def x = 2.0; def y = 3.0; x * y", "#6.00");
    test("def x = 6.0; x / 3.0", "#2");
    test("def x =  3.0; 6.0 / x", "#2");
    test("def x = 6.0; def y = 3.0; x / y", "#2");
    test("def x = 6.0; x / 7.0", "#0.8571428571");
    test("def x =  7.0; 6.0 / x", "#0.8571428571");
    test("def x = 6.0; def y = 7.0; x / y", "#0.8571428571");
    test("def x = 8.0; x %% 5.0", "#3.0");
    test("def x =  5.0; 8.0 %% x", "#3.0");
    test("def x = 8.0; def y = 5.0; x %% y", "#3.0");
    test("def x = -8.0; x %% 5.0", "#-3.0");
    test("def x =  5.0; -8.0 %% x", "#-3.0");
    test("def x = -8.0; def y = 5.0; x %% y", "#-3.0");
    test("def x = 8.0; x % 5.0", "#3.0");
    test("def x =  5.0; 8.0 % x", "#3.0");
    test("def x = 8.0; def y = 5.0; x % y", "#3.0");
    test("def x = -8.0; x % 5.0", "#2.0");
    test("def x =  5.0; -8.0 % x", "#2.0");
    test("def x = -8.0; def y = 5.0; x % y", "#2.0");
    test("def x = 1; x + 2D", 3D);
    test("def x =  2D; 1 + x", 3D);
    test("def x = 1; def y = 2D; x + y", 3D);
    test("def x = 1D; x - 2", -1D);
    test("def x =  2; 1D - x", -1D);
    test("def x = 1D; def y = 2; x - y", -1D);
    test("def x = 1; x - -2D", 3D);
    test("def x =  -2D; 1 - x", 3D);
    test("def x = 1; def y = 2D; x - -y", 3D);
    test("def x = 2D; x * 3", 6D);
    test("def x =  3; 2D * x", 6D);
    test("def x = 2D; def y = 3; x * y", 6D);
    test("def x = 6; x / 3D", 2D);
    test("def x =  3D; 6 / x", 2D);
    test("def x = 6; def y = 3D; x / y", 2D);
    test("def x = 8D; x %% 5", 3D);
    test("def x =  5; 8D %% x", 3D);
    test("def x = 8D; def y = 5; x %% y", 3D);
    test("def x = 8; x %% 5D", 3D);
    test("def x =  5D; 8 %% x", 3D);
    test("def x = 8; def y = 5D; x %% y", 3D);
    test("def x = -8D; x %% 5", -3D);
    test("def x =  5; -8D %% x", -3D);
    test("def x = -8D; def y = 5; x %% y", -3D);
    test("def x = -8; x %% 5D", -3D);
    test("def x =  5D; -8 %% x", -3D);
    test("def x = -8; def y = 5D; x %% y", -3D);
    test("def x = 8D; x % 5", 3D);
    test("def x =  5; 8D % x", 3D);
    test("def x = 8D; def y = 5; x % y", 3D);
    test("def x = 8; x % 5D", 3D);
    test("def x =  5D; 8 % x", 3D);
    test("def x = 8; def y = 5D; x % y", 3D);
    test("def x = -8D; x % 5", 2D);
    test("def x =  5; -8D % x", 2D);
    test("def x = -8D; def y = 5; x % y", 2D);
    test("def x = -8; x % 5D", 2D);
    test("def x =  5D; -8 % x", 2D);
    test("def x = -8; def y = 5D; x % y", 2D);
    test("def x = 1; x + 2.0", "#3.0");
    test("def x =  2.0; 1 + x", "#3.0");
    test("def x = 1; def y = 2.0; x + y", "#3.0");
    test("def x = 1.0; x - 2", "#-1.0");
    test("def x =  2; 1.0 - x", "#-1.0");
    test("def x = 1.0; def y = 2; x - y", "#-1.0");
    test("def x = 1; x - -2.0", "#3.0");
    test("def x =  -2.0; 1 - x", "#3.0");
    test("def x = 1; def y = 2.0; x - -y", "#3.0");
    test("def x = 2.0; x * 3", "#6.0");
    test("def x =  3; 2.0 * x", "#6.0");
    test("def x = 2.0; def y = 3; x * y", "#6.0");
    test("def x = 6; x / 3.0", "#2");
    test("def x =  3.0; 6 / x", "#2");
    test("def x = 6; def y = 3.0; x / y", "#2");
    test("def x = 8.0; x %% 5", "#3.0");
    test("def x =  5; 8.0 %% x", "#3.0");
    test("def x = 8.0; def y = 5; x %% y", "#3.0");
    test("def x = 8; x %% 5.0", "#3.0");
    test("def x =  5.0; 8 %% x", "#3.0");
    test("def x = 8; def y = 5.0; x %% y", "#3.0");
    test("def x = -8.0; x %% 5", "#-3.0");
    test("def x =  5; -8.0 %% x", "#-3.0");
    test("def x = -8.0; def y = 5; x %% y", "#-3.0");
    test("def x = -8; x %% 5.0", "#-3.0");
    test("def x =  5.0; -8 %% x", "#-3.0");
    test("def x = -8; def y = 5.0; x %% y", "#-3.0");
    test("def x = 8.0; x % 5", "#3.0");
    test("def x =  5; 8.0 % x", "#3.0");
    test("def x = 8.0; def y = 5; x % y", "#3.0");
    test("def x = 8; x % 5.0", "#3.0");
    test("def x =  5.0; 8 % x", "#3.0");
    test("def x = 8; def y = 5.0; x % y", "#3.0");
    test("def x = -8.0; x % 5", "#2.0");
    test("def x =  5; -8.0 % x", "#2.0");
    test("def x = -8.0; def y = 5; x % y", "#2.0");
    test("def x = -8; x % 5.0", "#2.0");
    test("def x =  5.0; -8 % x", "#2.0");
    test("def x = -8; def y = 5.0; x % y", "#2.0");
    test("def x = 1L; x + 2.0", "#3.0");
    test("def x =  2.0; 1L + x", "#3.0");
    test("def x = 1L; def y = 2.0; x + y", "#3.0");
    test("def x = 1.0; x - 2L", "#-1.0");
    test("def x =  2L; 1.0 - x", "#-1.0");
    test("def x = 1.0; def y = 2L; x - y", "#-1.0");
    test("def x = 1L; x - -2.0", "#3.0");
    test("def x =  -2.0; 1L - x", "#3.0");
    test("def x = 1L; def y = 2.0; x - -y", "#3.0");
    test("def x = 2.0; x * 3L", "#6.0");
    test("def x =  3L; 2.0 * x", "#6.0");
    test("def x = 2.0; def y = 3L; x * y", "#6.0");
    test("def x = 6L; x / 3.0", "#2");
    test("def x =  3.0; 6L / x", "#2");
    test("def x = 6L; def y = 3.0; x / y", "#2");
    test("def x = 8.0; x %% 5L", "#3.0");
    test("def x =  5L; 8.0 %% x", "#3.0");
    test("def x = 8.0; def y = 5L; x %% y", "#3.0");
    test("def x = 8L; x %% 5.0", "#3.0");
    test("def x =  5.0; 8L %% x", "#3.0");
    test("def x = 8L; def y = 5.0; x %% y", "#3.0");
    test("def x = -8.0; x %% 5L", "#-3.0");
    test("def x =  5L; -8.0 %% x", "#-3.0");
    test("def x = -8.0; def y = 5L; x %% y", "#-3.0");
    test("def x = -8L; x %% 5.0", "#-3.0");
    test("def x =  5.0; -8L %% x", "#-3.0");
    test("def x = -8L; def y = 5.0; x %% y", "#-3.0");
    test("def x = 8.0; x % 5L", "#3.0");
    test("def x =  5L; 8.0 % x", "#3.0");
    test("def x = 8.0; def y = 5L; x % y", "#3.0");
    test("def x = 8L; x % 5.0", "#3.0");
    test("def x =  5.0; 8L % x", "#3.0");
    test("def x = 8L; def y = 5.0; x % y", "#3.0");
    test("def x = -8.0; x % 5L", "#2.0");
    test("def x =  5L; -8.0 % x", "#2.0");
    test("def x = -8.0; def y = 5L; x % y", "#2.0");
    test("def x = -8L; x % 5.0", "#2.0");
    test("def x =  5.0; -8L % x", "#2.0");
    test("def x = -8L; def y = 5.0; x % y", "#2.0");
    test("def x = 1D; x + 2.0", "#3.0");
    test("def x =  2.0; 1D + x", "#3.0");
    test("def x = 1D; def y = 2.0; x + y", "#3.0");
    test("def x = 1.0; x - 2D", "#-1.0");
    test("def x =  2D; 1.0 - x", "#-1.0");
    test("def x = 1.0; def y = 2D; x - y", "#-1.0");
    test("def x = 1D; x - -2.0", "#3.0");
    test("def x =  -2.0; 1D - x", "#3.0");
    test("def x = 1D; def y = 2.0; x - -y", "#3.0");
    test("def x = 2.0; x * 3D", "#6.00");
    test("def x =  3D; 2.0 * x", "#6.00");
    test("def x = 2.0; def y = 3D; x * y", "#6.00");
    test("def x = 6D; x / 3.0", "#2");
    test("def x =  3.0; 6D / x", "#2");
    test("def x = 6D; def y = 3.0; x / y", "#2");
    test("def x = 8.0; x %% 5D", "#3.0");
    test("def x =  5D; 8.0 %% x", "#3.0");
    test("def x = 8.0; def y = 5D; x %% y", "#3.0");
    test("def x = 8D; x %% 5.0", "#3.0");
    test("def x =  5.0; 8D %% x", "#3.0");
    test("def x = 8D; def y = 5.0; x %% y", "#3.0");
    test("def x = -8.0; x %% 5D", "#-3.0");
    test("def x =  5D; -8.0 %% x", "#-3.0");
    test("def x = -8.0; def y = 5D; x %% y", "#-3.0");
    test("def x = -8D; x %% 5.0", "#-3.0");
    test("def x =  5.0; -8D %% x", "#-3.0");
    test("def x = -8D; def y = 5.0; x %% y", "#-3.0");
    test("def x = 8.0; x % 5D", "#3.0");
    test("def x =  5D; 8.0 % x", "#3.0");
    test("def x = 8.0; def y = 5D; x % y", "#3.0");
    test("def x = 8D; x % 5.0", "#3.0");
    test("def x =  5.0; 8D % x", "#3.0");
    test("def x = 8D; def y = 5.0; x % y", "#3.0");
    test("def x = -8.0; x % 5D", "#2.0");
    test("def x =  5D; -8.0 % x", "#2.0");
    test("def x = -8.0; def y = 5D; x % y", "#2.0");
    test("def x = -8D; x % 5.0", "#2.0");
    test("def x =  5.0; -8D % x", "#2.0");
    test("def x = -8D; def y = 5.0; x % y", "#2.0");

    testError("def x = 1; x / 0", "divide by zero");
    testError("def x = 1.0; x / 0", "divide by zero");
    testError("def x = 1L; x / 0", "divide by zero");
    test("def x = 1.0D; x / 0", Double.POSITIVE_INFINITY);
  }

  @Test public void booleanValues() {
    test("boolean TRUE=true; boolean FALSE=false; !TRUE", false);
    test("boolean TRUE=true; boolean FALSE=false; !FALSE", true);
    test("boolean TRUE=true; boolean FALSE=false; !!TRUE", true);
    test("boolean TRUE=true; boolean FALSE=false; !!FALSE", false);
    test("boolean TRUE=true; boolean FALSE=false; !(!!TRUE)", false);
    test("boolean TRUE=true; boolean FALSE=false; !!(!FALSE)", true);
    test("boolean TRUE=true; boolean FALSE=false; TRUE && TRUE", true);
    test("boolean TRUE=true; boolean FALSE=false; FALSE && TRUE", false);
    test("boolean TRUE=true; boolean FALSE=false; TRUE && FALSE", false);
    test("boolean TRUE=true; boolean FALSE=false; FALSE && FALSE", false);
    test("boolean TRUE=true; boolean FALSE=false; TRUE || TRUE", true);
    test("boolean TRUE=true; boolean FALSE=false; FALSE || TRUE", true);
    test("boolean TRUE=true; boolean FALSE=false; TRUE || FALSE", true);
    test("boolean TRUE=true; boolean FALSE=false; FALSE || FALSE", false);
    test("boolean TRUE=true; boolean FALSE=false; !FALSE || FALSE", true);
    test("boolean TRUE=true; boolean FALSE=false; FALSE || TRUE && FALSE", false);
    test("boolean TRUE=true; boolean FALSE=false; TRUE  || TRUE && FALSE", true);
    test("boolean TRUE=true; boolean FALSE=false; TRUE  || TRUE && TRUE", true);
    test("boolean TRUE=true; boolean FALSE=false; FALSE || !FALSE && TRUE", true);

    test("var TRUE=true; var FALSE=false; !TRUE", false);
    test("var TRUE=true; var FALSE=false; !FALSE", true);
    test("var TRUE=true; var FALSE=false; !!TRUE", true);
    test("var TRUE=true; var FALSE=false; !!FALSE", false);
    test("var TRUE=true; var FALSE=false; !(!!TRUE)", false);
    test("var TRUE=true; var FALSE=false; !!(!FALSE)", true);
    test("var TRUE=true; var FALSE=false; TRUE && TRUE", true);
    test("var TRUE=true; var FALSE=false; FALSE && TRUE", false);
    test("var TRUE=true; var FALSE=false; TRUE && FALSE", false);
    test("var TRUE=true; var FALSE=false; FALSE && FALSE", false);
    test("var TRUE=true; var FALSE=false; TRUE || TRUE", true);
    test("var TRUE=true; var FALSE=false; FALSE || TRUE", true);
    test("var TRUE=true; var FALSE=false; TRUE || FALSE", true);
    test("var TRUE=true; var FALSE=false; FALSE || FALSE", false);
    test("var TRUE=true; var FALSE=false; !FALSE || FALSE", true);
    test("var TRUE=true; var FALSE=false; FALSE || TRUE && FALSE", false);
    test("var TRUE=true; var FALSE=false; TRUE  || TRUE && FALSE", true);
    test("var TRUE=true; var FALSE=false; TRUE  || TRUE && TRUE", true);
    test("var TRUE=true; var FALSE=false; FALSE || !FALSE && TRUE", true);

    test("const TRUE=true; const FALSE=false; !TRUE", false);
    test("const TRUE=true; const FALSE=false; !FALSE", true);
    test("const TRUE=true; const FALSE=false; !!TRUE", true);
    test("const TRUE=true; const FALSE=false; !!FALSE", false);
    test("const TRUE=true; const FALSE=false; !(!!TRUE)", false);
    test("const TRUE=true; const FALSE=false; !!(!FALSE)", true);
    test("const TRUE=true; const FALSE=false; TRUE && TRUE", true);
    test("const TRUE=true; const FALSE=false; FALSE && TRUE", false);
    test("const TRUE=true; const FALSE=false; TRUE && FALSE", false);
    test("const TRUE=true; const FALSE=false; FALSE && FALSE", false);
    test("const TRUE=true; const FALSE=false; TRUE || TRUE", true);
    test("const TRUE=true; const FALSE=false; FALSE || TRUE", true);
    test("const TRUE=true; const FALSE=false; TRUE || FALSE", true);
    test("const TRUE=true; const FALSE=false; FALSE || FALSE", false);
    test("const TRUE=true; const FALSE=false; !FALSE || FALSE", true);
    test("const TRUE=true; const FALSE=false; FALSE || TRUE && FALSE", false);
    test("const TRUE=true; const FALSE=false; TRUE  || TRUE && FALSE", true);
    test("const TRUE=true; const FALSE=false; TRUE  || TRUE && TRUE", true);
    test("const TRUE=true; const FALSE=false; FALSE || !FALSE && TRUE", true);

    test("def TRUE=true; def FALSE=false; !TRUE", false);
    test("def TRUE=true; def FALSE=false; !FALSE", true);
    test("def TRUE=true; def FALSE=false; !!TRUE", true);
    test("def TRUE=true; def FALSE=false; !!FALSE", false);
    test("def TRUE=true; def FALSE=false; !(!!TRUE)", false);
    test("def TRUE=true; def FALSE=false; !!(!FALSE)", true);
    test("def TRUE=true; def FALSE=false; TRUE && TRUE", true);
    test("def TRUE=true; def FALSE=false; FALSE && TRUE", false);
    test("def TRUE=true; def FALSE=false; TRUE && FALSE", false);
    test("def TRUE=true; def FALSE=false; FALSE && FALSE", false);
    test("def TRUE=true; def FALSE=false; TRUE || TRUE", true);
    test("def TRUE=true; def FALSE=false; FALSE || TRUE", true);
    test("def TRUE=true; def FALSE=false; TRUE || FALSE", true);
    test("def TRUE=true; def FALSE=false; FALSE || FALSE", false);
    test("def TRUE=true; def FALSE=false; !FALSE || FALSE", true);
    test("def TRUE=true; def FALSE=false; FALSE || TRUE && FALSE", false);
    test("def TRUE=true; def FALSE=false; TRUE  || TRUE && FALSE", true);
    test("def TRUE=true; def FALSE=false; TRUE  || TRUE && TRUE", true);
    test("def TRUE=true; def FALSE=false; FALSE || !FALSE && TRUE", true);

    test("def TRUE=true; def FALSE=null; !FALSE", true);
    test("def TRUE=true; def FALSE=null; !!FALSE", false);
    test("def TRUE=true; def FALSE=null; !!(!FALSE)", true);
    test("def TRUE=true; def FALSE=null; FALSE && TRUE", false);
    test("def TRUE=true; def FALSE=null; TRUE && FALSE", false);
    test("def TRUE=true; def FALSE=null; FALSE && FALSE", false);
    test("def TRUE=true; def FALSE=null; FALSE || TRUE", true);
    test("def TRUE=true; def FALSE=null; TRUE || FALSE", true);
    test("def TRUE=true; def FALSE=null; FALSE || FALSE", false);
    test("def TRUE=true; def FALSE=null; !FALSE || FALSE", true);
    test("def TRUE=true; def FALSE=null; FALSE || TRUE && FALSE", false);
    test("def TRUE=true; def FALSE=null; TRUE  || TRUE && FALSE", true);
    test("def TRUE=true; def FALSE=null; TRUE  || TRUE && TRUE", true);
    test("def TRUE=true; def FALSE=null; FALSE || !FALSE && TRUE", true);

    test("byte TRUE=(byte)7; def FALSE=null; !FALSE", true);
    test("byte TRUE=(byte)7; def FALSE=null; !!FALSE", false);
    test("byte TRUE=(byte)7; def FALSE=null; !!(!FALSE)", true);
    test("byte TRUE=(byte)7; def FALSE=null; FALSE && TRUE", false);
    test("byte TRUE=(byte)7; def FALSE=null; TRUE && FALSE", false);
    test("byte TRUE=(byte)7; def FALSE=null; FALSE && FALSE", false);
    test("byte TRUE=(byte)7; def FALSE=null; FALSE || TRUE", true);
    test("byte TRUE=(byte)7; def FALSE=null; TRUE || FALSE", true);
    test("byte TRUE=(byte)7; def FALSE=null; FALSE || FALSE", false);
    test("byte TRUE=(byte)7; def FALSE=null; !FALSE || FALSE", true);
    test("byte TRUE=(byte)7; def FALSE=null; FALSE || TRUE && FALSE", false);
    test("byte TRUE=(byte)7; def FALSE=null; TRUE  || TRUE && FALSE", true);
    test("byte TRUE=(byte)7; def FALSE=null; TRUE  || TRUE && TRUE", true);
    test("byte TRUE=(byte)7; def FALSE=null; FALSE || !FALSE && TRUE", true);
    test("byte TRUE=(byte)7; def FALSE=''; !FALSE", true);
    test("byte TRUE=(byte)7; def FALSE=''; !!FALSE", false);
    test("byte TRUE=(byte)7; def FALSE=''; !!(!FALSE)", true);
    test("byte TRUE=(byte)7; def FALSE=''; FALSE && TRUE", false);
    test("byte TRUE=(byte)7; def FALSE=''; TRUE && FALSE", false);
    test("byte TRUE=(byte)7; def FALSE=''; FALSE && FALSE", false);
    test("byte TRUE=(byte)7; def FALSE=''; FALSE || TRUE", true);
    test("byte TRUE=(byte)7; def FALSE=''; TRUE || FALSE", true);
    test("byte TRUE=(byte)7; def FALSE=''; FALSE || FALSE", false);
    test("byte TRUE=(byte)7; def FALSE=''; !FALSE || FALSE", true);
    test("byte TRUE=(byte)7; def FALSE=''; FALSE || TRUE && FALSE", false);
    test("byte TRUE=(byte)7; def FALSE=''; TRUE  || TRUE && FALSE", true);
    test("byte TRUE=(byte)7; def FALSE=''; TRUE  || TRUE && TRUE", true);
    test("byte TRUE=(byte)7; def FALSE=''; FALSE || !FALSE && TRUE", true);
    test("byte TRUE=(byte)7; def FALSE=(byte)0; !FALSE", true);
    test("byte TRUE=(byte)7; def FALSE=(byte)0; !!FALSE", false);
    test("byte TRUE=(byte)7; def FALSE=(byte)0; !!(!FALSE)", true);
    test("byte TRUE=(byte)7; def FALSE=(byte)0; FALSE && TRUE", false);
    test("byte TRUE=(byte)7; def FALSE=(byte)0; TRUE && FALSE", false);
    test("byte TRUE=(byte)7; def FALSE=(byte)0; FALSE && FALSE", false);
    test("byte TRUE=(byte)7; def FALSE=(byte)0; FALSE || TRUE", true);
    test("byte TRUE=(byte)7; def FALSE=(byte)0; TRUE || FALSE", true);
    test("byte TRUE=(byte)7; def FALSE=(byte)0; FALSE || FALSE", false);
    test("byte TRUE=(byte)7; def FALSE=(byte)0; !FALSE || FALSE", true);
    test("byte TRUE=(byte)7; def FALSE=(byte)0; FALSE || TRUE && FALSE", false);
    test("byte TRUE=(byte)7; def FALSE=(byte)0; TRUE  || TRUE && FALSE", true);
    test("byte TRUE=(byte)7; def FALSE=(byte)0; TRUE  || TRUE && TRUE", true);
    test("byte TRUE=(byte)7; def FALSE=(byte)0; FALSE || !FALSE && TRUE", true);
    test("def TRUE=(byte)7; double FALSE=(byte)0; !FALSE", true);
    test("def TRUE=(byte)7; double FALSE=(byte)0; !!FALSE", false);
    test("def TRUE=(byte)7; double FALSE=(byte)0; !!(!FALSE)", true);
    test("def TRUE=(byte)7; double FALSE=(byte)0; FALSE && TRUE", false);
    test("def TRUE=(byte)7; double FALSE=(byte)0; TRUE && FALSE", false);
    test("def TRUE=(byte)7; double FALSE=(byte)0; FALSE && FALSE", false);
    test("def TRUE=(byte)7; double FALSE=(byte)0; FALSE || TRUE", true);
    test("def TRUE=(byte)7; double FALSE=(byte)0; TRUE || FALSE", true);
    test("def TRUE=(byte)7; double FALSE=(byte)0; FALSE || FALSE", false);
    test("def TRUE=(byte)7; double FALSE=(byte)0; !FALSE || FALSE", true);
    test("def TRUE=(byte)7; double FALSE=(byte)0; FALSE || TRUE && FALSE", false);
    test("def TRUE=(byte)7; double FALSE=(byte)0; TRUE  || TRUE && FALSE", true);
    test("def TRUE=(byte)7; double FALSE=(byte)0; TRUE  || TRUE && TRUE", true);
    test("def TRUE=(byte)7; double FALSE=(byte)0; FALSE || !FALSE && TRUE", true);

    test("int TRUE=7; def FALSE=null; !FALSE", true);
    test("int TRUE=7; def FALSE=null; !!FALSE", false);
    test("int TRUE=7; def FALSE=null; !!(!FALSE)", true);
    test("int TRUE=7; def FALSE=null; FALSE && TRUE", false);
    test("int TRUE=7; def FALSE=null; TRUE && FALSE", false);
    test("int TRUE=7; def FALSE=null; FALSE && FALSE", false);
    test("int TRUE=7; def FALSE=null; FALSE || TRUE", true);
    test("int TRUE=7; def FALSE=null; TRUE || FALSE", true);
    test("int TRUE=7; def FALSE=null; FALSE || FALSE", false);
    test("int TRUE=7; def FALSE=null; !FALSE || FALSE", true);
    test("int TRUE=7; def FALSE=null; FALSE || TRUE && FALSE", false);
    test("int TRUE=7; def FALSE=null; TRUE  || TRUE && FALSE", true);
    test("int TRUE=7; def FALSE=null; TRUE  || TRUE && TRUE", true);
    test("int TRUE=7; def FALSE=null; FALSE || !FALSE && TRUE", true);

    test("int TRUE=7; def FALSE=''; !FALSE", true);
    test("int TRUE=7; def FALSE=''; !!FALSE", false);
    test("int TRUE=7; def FALSE=''; !!(!FALSE)", true);
    test("int TRUE=7; def FALSE=''; FALSE && TRUE", false);
    test("int TRUE=7; def FALSE=''; TRUE && FALSE", false);
    test("int TRUE=7; def FALSE=''; FALSE && FALSE", false);
    test("int TRUE=7; def FALSE=''; FALSE || TRUE", true);
    test("int TRUE=7; def FALSE=''; TRUE || FALSE", true);
    test("int TRUE=7; def FALSE=''; FALSE || FALSE", false);
    test("int TRUE=7; def FALSE=''; !FALSE || FALSE", true);
    test("int TRUE=7; def FALSE=''; FALSE || TRUE && FALSE", false);
    test("int TRUE=7; def FALSE=''; TRUE  || TRUE && FALSE", true);
    test("int TRUE=7; def FALSE=''; TRUE  || TRUE && TRUE", true);
    test("int TRUE=7; def FALSE=''; FALSE || !FALSE && TRUE", true);

    test("int TRUE=7; def FALSE=0; !FALSE", true);
    test("int TRUE=7; def FALSE=0; !!FALSE", false);
    test("int TRUE=7; def FALSE=0; !!(!FALSE)", true);
    test("int TRUE=7; def FALSE=0; FALSE && TRUE", false);
    test("int TRUE=7; def FALSE=0; TRUE && FALSE", false);
    test("int TRUE=7; def FALSE=0; FALSE && FALSE", false);
    test("int TRUE=7; def FALSE=0; FALSE || TRUE", true);
    test("int TRUE=7; def FALSE=0; TRUE || FALSE", true);
    test("int TRUE=7; def FALSE=0; FALSE || FALSE", false);
    test("int TRUE=7; def FALSE=0; !FALSE || FALSE", true);
    test("int TRUE=7; def FALSE=0; FALSE || TRUE && FALSE", false);
    test("int TRUE=7; def FALSE=0; TRUE  || TRUE && FALSE", true);
    test("int TRUE=7; def FALSE=0; TRUE  || TRUE && TRUE", true);
    test("int TRUE=7; def FALSE=0; FALSE || !FALSE && TRUE", true);

    test("def TRUE=7; double FALSE=0; !FALSE", true);
    test("def TRUE=7; double FALSE=0; !!FALSE", false);
    test("def TRUE=7; double FALSE=0; !!(!FALSE)", true);
    test("def TRUE=7; double FALSE=0; FALSE && TRUE", false);
    test("def TRUE=7; double FALSE=0; TRUE && FALSE", false);
    test("def TRUE=7; double FALSE=0; FALSE && FALSE", false);
    test("def TRUE=7; double FALSE=0; FALSE || TRUE", true);
    test("def TRUE=7; double FALSE=0; TRUE || FALSE", true);
    test("def TRUE=7; double FALSE=0; FALSE || FALSE", false);
    test("def TRUE=7; double FALSE=0; !FALSE || FALSE", true);
    test("def TRUE=7; double FALSE=0; FALSE || TRUE && FALSE", false);
    test("def TRUE=7; double FALSE=0; TRUE  || TRUE && FALSE", true);
    test("def TRUE=7; double FALSE=0; TRUE  || TRUE && TRUE", true);
    test("def TRUE=7; double FALSE=0; FALSE || !FALSE && TRUE", true);

    test("double TRUE=7; Decimal FALSE=0; !FALSE", true);
    test("double TRUE=7; Decimal FALSE=0; !!FALSE", false);
    test("double TRUE=7; Decimal FALSE=0; !!(!FALSE)", true);
    test("double TRUE=7; Decimal FALSE=0; FALSE && TRUE", false);
    test("double TRUE=7; Decimal FALSE=0; TRUE && FALSE", false);
    test("double TRUE=7; Decimal FALSE=0; FALSE && FALSE", false);
    test("double TRUE=7; Decimal FALSE=0; FALSE || TRUE", true);
    test("double TRUE=7; Decimal FALSE=0; TRUE || FALSE", true);
    test("double TRUE=7; Decimal FALSE=0; FALSE || FALSE", false);
    test("double TRUE=7; Decimal FALSE=0; !FALSE || FALSE", true);
    test("double TRUE=7; Decimal FALSE=0; FALSE || TRUE && FALSE", false);
    test("double TRUE=7; Decimal FALSE=0; TRUE  || TRUE && FALSE", true);
    test("double TRUE=7; Decimal FALSE=0; TRUE  || TRUE && TRUE", true);
    test("double TRUE=7; Decimal FALSE=0; FALSE || !FALSE && TRUE", true);

    test("Decimal TRUE=7; Decimal FALSE=0; !FALSE", true);
    test("Decimal TRUE=7; Decimal FALSE=0; !!FALSE", false);
    test("Decimal TRUE=7; Decimal FALSE=0; !!(!FALSE)", true);
    test("Decimal TRUE=7; Decimal FALSE=0; FALSE && TRUE", false);
    test("Decimal TRUE=7; Decimal FALSE=0; TRUE && FALSE", false);
    test("Decimal TRUE=7; Decimal FALSE=0; FALSE && FALSE", false);
    test("Decimal TRUE=7; Decimal FALSE=0; FALSE || TRUE", true);
    test("Decimal TRUE=7; Decimal FALSE=0; TRUE || FALSE", true);
    test("Decimal TRUE=7; Decimal FALSE=0; FALSE || FALSE", false);
    test("Decimal TRUE=7; Decimal FALSE=0; !FALSE || FALSE", true);
    test("Decimal TRUE=7; Decimal FALSE=0; FALSE || TRUE && FALSE", false);
    test("Decimal TRUE=7; Decimal FALSE=0; TRUE  || TRUE && FALSE", true);
    test("Decimal TRUE=7; Decimal FALSE=0; TRUE  || TRUE && TRUE", true);
    test("Decimal TRUE=7; Decimal FALSE=0; FALSE || !FALSE && TRUE", true);

    testError("def x; x.a && true", "null value");
    test("def x; true || x.a", true);
    test("def x; false && x.a", false);
  }

  @Test public void questionQuestion() {
    test("?? true", true);
    test("?? (byte)1", true);
    test("?? 1", true);
    test("?? 1D", true);
    test("?? 1.0", true);
    test("?? 'abc'", true);
    test("?? 'abc' && ?? null || ?? null", false);
    test("?? false", true);
    test("?? null", false);
    test("?? ?? null", true);
    test("def x; ?? x", false);
    test("def x = []; ?? x", true);
    test("def x = [:]; ?? x", true);
    test("def x = [:]; ?? x.a", false);
    test("def x = [:]; ?? x?.a", false);
  }

  @Test public void explicitReturnFromScript() {
    test("double v = 2; return v", 2D);
    test("byte v = 2; { v = v + 1; return v }; v = v + 3", (byte)3);
    test("int v = 2; { v = v + 1; return v }; v = v + 3", 3);
    test("String v = '2'; { v = v + 1; { return v }}", "21");
    test("var v = 2.0; { v = v + 1; { return v }}", "#3.0");
    test("const v = 2.0; { def x = v + 1; { return x+v }}", "#5.0");
    test("Decimal v = 2.0; { v = v + 1; { return v }}", "#3.0");
    test("def v = '2'; { v = v + 1; { return v }}", "21");
    testError("double v = 2; return v; v = v + 1", "unreachable statement");
    testError("double v = 2; return v; { v = v + 1 }", "unreachable statement");
    test("return true and false", true);
    test("false or return true and false", true);
    test("false and return true and false", false);
  }

  @Test
  public void implicitReturnFromScript() {
    test("double v = 2; v", 2D);
    test("byte v = 2; { v = v + 1; v }", (byte)3);
    test("int v = 2; { v = v + 1; v }", 3);
    test("String v = '2'; { v = v + 1; { v }}", "21");
    test("var v = 2.0; { v = v + 1; { v }}", "#3.0");
    test("const v = 2.0; { def x = v + 1; { x+v }}", "#5.0");
    test("def v = '2'; { v = v + 1; { v }}", "21");
  }

  @Test
  public void constExprArithmeticPrecedence() {
    alwaysEvalConsts = true;
    test("1 + -2 * -3 + 4", 11);
    test("1 + (2 + 3) * 4 - 5", 16);
    test("13 + 12 %% 7L", 18L);
    test("13 + 12 %% 7 - 3", 15);
    testError("13 + 12 %% ++6 - 3", "cannot modify a constant value");
    test("13 + 12 % 7L", 18L);
    test("13 + 12 % 7 - 3", 15);
  }

  @Test public void constStringConcatenation() {
    testError("'abc' - '123'", "non-numeric operand");
    test("'abc' + '123'", "abc123");
    test("'abc' + null", "abcnull");
    testError("null + 'abc'", "null operand");
    test("'abc' + 'def' + 'ghi'", "abcdefghi");
    test("'abc' + ('1' + '2' + '3') + 'def'", "abc123def");
    test("'' + 'abc'", "abc");
    test("'abc' + ''", "abc");
    test("'abc' + 1", "abc1");
    test("'abc' + (byte)1", "abc1");
  }

  @Test
  public void constStringRepeat() {
    test("'abc' * (byte)2", "abcabc");
    test("'abc' * 2", "abcabc");
    test("'abc' * 0", "");
    testError("'abc' * -1", "string repeat count must be >= 0");
  }

  @Test public void defaultValues() {
    test("boolean x", false);
    test("boolean x; x", false);
    test("byte x", (byte)0);
    test("byte x; x", (byte)0);
    test("int x", 0);
    test("int x; x", 0);
    test("long x", 0L);
    test("long x; x", 0L);
    test("double x", 0D);
    test("double x; x", 0D);
    test("Decimal x", "#0");
    test("Decimal x; x", "#0");
    testError("var x", "Initialiser expression required");
  }

  @Test void prefixResultUsage() {
    test("byte x = 1; ~x; 3", 3);
    test("int x = 1; ~x; 3", 3);
    test("def x = 1; ~x; 3", 3);
    test("boolean x = true; !x; 3", 3);
    test("def x = true; !x; 3", 3);
    test("def x = 1; !x; 3", 3);
    test("byte x = 1; -x; 3", 3);
    test("int x = 1; -x; 3", 3);
    test("def x = 1; -x; 3", 3);
  }

  @Test
  public void prefixIncOrDec() {
    alwaysEvalConsts = true;
    testError("++null", "null value");
    testError("--null", "null value");
    testError("++(byte)1", "cannot modify a constant value");
    testError("--(byte)1", "cannot modify a constant value");
    testError("++1", "cannot modify a constant value");
    testError("--1", "cannot modify a constant value");
    testError("++1L", "cannot modify a constant value");
    testError("--1L", "cannot modify a constant value");
    testError("++1D", "cannot modify a constant value");
    testError("--1D", "cannot modify a constant value");
    testError("++1.0", "cannot modify a constant value");
    testError("--1.0", "cannot modify a constant value");
    test("byte x = 1; ++x", (byte)2);
    test("byte x = 1; --x", (byte)0);
    test("byte x = 3; --x + --x", (byte)3);
    test("byte x = 3; ++x + ++x", (byte)9);
    test("int x = 1; ++x", 2);
    test("int x = 1; --x", 0);
    test("int x = 3; --x + --x", 3);
    test("int x = 3; ++x + ++x", 9);
    test("long x = 1; ++x", 2L);
    test("long x = 1; --x", 0L);
    test("long x = 3; --x + --x", 3L);
    test("long x = 3; ++x + ++x", 9L);
    test("double x = 1; ++x", 2D);
    test("double x = 1; --x", 0D);
    test("double x = 1.5D; --x", 0.5D);
    test("double x = 3; --x + --x", 3D);
    test("double x = 3.5D; --x + --x", 4D);
    test("double x = 3.5D; ++x + ++x", 10D);
    test("Decimal x = 1; ++x", "#2");
    test("Decimal x = 1.5; ++x", "#2.5");
    test("Decimal x = 1; --x", "#0");
    test("Decimal x = 1.5; --x", "#0.5");
    test("Decimal x = 3; --x + --x", "#3");
    test("Decimal x = 3.5; --x + ++x", "#6.0");

    test("def x = (byte)1; ++x", (byte)2);
    test("def x = (byte)1; --x", (byte)0);
    test("def x = (byte)3; --x + --x", (byte)3);
    test("def x = (byte)3; ++x + ++x", (byte)9);
    test("def x = 1; ++x", 2);
    test("def x = 1; --x", 0);
    test("def x = 3; --x + --x", 3);
    test("def x = 3; ++x + ++x", 9);
    test("def x = 1L; ++x", 2L);
    test("def x = 1L; --x", 0L);
    test("def x = 3L; --x + --x", 3L);
    test("def x = 3L; ++x + ++x", 9L);
    test("def x = 1D; ++x", 2D);
    test("def x = 1D; --x", 0D);
    test("def x = 1.5D; --x", 0.5D);
    test("def x = 3D; --x + --x", 3D);
    test("def x = 3.5D; --x + --x", 4D);
    test("def x = 3.5D; ++x + ++x", 10D);
    test("def x = 1.0; ++x", "#2.0");
    test("def x = 1.5; ++x", "#2.5");
    test("def x = 1.0; --x", "#0.0");
    test("def x = 1.5; --x", "#0.5");
    test("def x = 3.0; --x + --x", "#3.0");
    test("def x = 3.5; --x + ++x", "#6.0");

    test("def x = 1; (x + x)++", 2);
    test("def x = 1; (x + x)++; x", 1);
    testError("def x = 1; (x + x)++ ++", "expecting end of statement");

    testError("def x = 'a'; ++x", "non-numeric operand");
    testError("def x = [a:'a']; ++x.a", "non-numeric operand");
  }

  @Test public void postfixIncOrDec() {
    alwaysEvalConsts = true;
    testError("null++", "null value encountered");
    testError("null--", "null value encountered");
    testError("(byte)1++", "cannot modify a constant value");
    testError("(byte)1--", "cannot modify a constant value");
    testError("1++", "cannot modify a constant value");
    testError("1--", "cannot modify a constant value");
    testError("1L++", "cannot modify a constant value");
    testError("1L--", "cannot modify a constant value");
    testError("1D++", "cannot modify a constant value");
    testError("1D--", "cannot modify a constant value");
    testError("1.0++", "cannot modify a constant value");
    testError("1.0--", "cannot modify a constant value");
    test("byte x = 1; x++", (byte)1);
    test("byte x = 1; x--", (byte)1);
    test("byte x = 1; x++; x", (byte)2);
    test("byte x = 1; x--; x", (byte)0);
    test("byte x = 3; x-- + x--", (byte)5);
    test("byte x = 3; x-- + x--; x", (byte)1);
    test("byte x = 3; x++ + x++", (byte)7);
    test("byte x = 3; x++ + x++; x", (byte)5);
    test("int x = 1; x++", 1);
    test("int x = 1; x--", 1);
    test("int x = 1; x++; x", 2);
    test("int x = 1; x--; x", 0);
    test("int x = 3; x-- + x--", 5);
    test("int x = 3; x-- + x--; x", 1);
    test("int x = 3; x++ + x++", 7);
    test("int x = 3; x++ + x++; x", 5);
    test("long x = 1; x++", 1L);
    test("long x = 1; x++; x", 2L);
    test("long x = 1; x--", 1L);
    test("long x = 1; x--; x", 0L);
    test("long x = 3; x-- + x--", 5L);
    test("long x = 3; x-- + x--; x", 1L);
    test("long x = 3; x++ + x++", 7L);
    test("long x = 3; x++ + x++; x", 5L);
    test("double x = 1D; x++", 1D);
    test("double x = 1D; x++; x", 2D);
    test("double x = 1D; x--", 1D);
    test("double x = 1D; x--; x", 0D);
    test("double x = 1.5D; x--", 1.5D);
    test("double x = 1.5D; x--; x", 0.5D);
    test("double x = 3D; x-- + x--", 5D);
    test("double x = 3D; x-- + x--; x", 1D);
    test("double x = 3.5D; x-- + x--", 6D);
    test("double x = 3.5D; x-- + x--; x", 1.5D);
    test("double x = 3.5D; x++ + x++", 8D);
    test("double x = 3.5D; x++ + x++; x", 5.5D);
    test("Decimal x = 1; x++", "#1");
    test("Decimal x = 1; x++; x", "#2");
    test("Decimal x = 1.5; x++", "#1.5");
    test("Decimal x = 1.5; x++; x", "#2.5");
    test("Decimal x = 1; x--", "#1");
    test("Decimal x = 1; x--; x", "#0");
    test("Decimal x = 1.5; x--", "#1.5");
    test("Decimal x = 1.5; x--; x", "#0.5");
    test("Decimal x = 3; x-- + x--", "#5");
    test("Decimal x = 3; x-- + x--; x", "#1");
    test("Decimal x = 3.5; x-- + x++", "#6.0");
    test("Decimal x = 3.5; x-- + x++; x", "#3.5");

    test("def x = (byte)1; x++", (byte)1);
    test("def x = (byte)1; x--", (byte)1);
    test("def x = (byte)1; x++; x", (byte)2);
    test("def x = (byte)1; x--; x", (byte)0);
    test("def x = (byte)3; x-- + x--", (byte)5);
    test("def x = (byte)3; x-- + x--; x", (byte)1);
    test("def x = (byte)3; x++ + x++", (byte)7);
    test("def x = (byte)3; x++ + x++; x", (byte)5);
    test("def x = 1L; x++", 1L);
    test("def x = 1L; x++; x", 2L);
    test("def x = 1L; x--", 1L);
    test("def x = 1L; x--; x", 0L);
    test("def x = 3L; x-- + x--", 5L);
    test("def x = 3L; x-- + x--; x", 1L);
    test("def x = 3L; x++ + x++", 7L);
    test("def x = 3L; x++ + x++; x", 5L);
    test("def x = 1.0D; x++", 1D);
    test("def x = 1.0D; x++; x", 2D);
    test("def x = 1.0D; x--", 1D);
    test("def x = 1.0D; x--; x", 0D);
    test("def x = 1.5D; x--", 1.5D);
    test("def x = 1.5D; x--; x", 0.5D);
    test("def x = 3.0D; x-- + x--", 5D);
    test("def x = 3.0D; x-- + x--; x", 1D);
    test("def x = 3.5D; x-- + x--", 6D);
    test("def x = 3.5D; x-- + x--; x", 1.5D);
    test("def x = 3.5D; x++ + x++", 8D);
    test("def x = 3.5D; x++ + x++; x", 5.5D);
    test("def x = 1.0; x++", "#1.0");
    test("def x = 1.0; x++; x", "#2.0");
    test("def x = 1.5; x++", "#1.5");
    test("def x = 1.5; x++; x", "#2.5");
    test("def x = 1.0; x--", "#1.0");
    test("def x = 1.0; x--; x", "#0.0");
    test("def x = 1.5; x--", "#1.5");
    test("def x = 1.5; x--; x", "#0.5");
    test("def x = 3.0; x-- + x--", "#5.0");
    test("def x = 3.0; x-- + x--; x", "#1.0");
    test("def x = 3.5; x-- + x++", "#6.0");
    test("def x = 3.5; x-- + x++; x", "#3.5");

    test("def x = 1; ++(x + x)", 3);
    test("def x = 1; ++(x + x)--", 3);
    test("def x = 1; ++x--", 2);
    test("def x = 1; ++x--; x", 0);
    test("def x = 1; ++(x--); x", 0);
    test("def x = 1; -- -- -- ++x--", -1);

    test("def x = 1; def y = 3; x + --y * ++y++ - 2", 5);
    test("def x = 1; def y = 3; x + --y * ++++y++ - 2", 7);
    test("def x = 1; def y = 3; x + --y * ++++y++ - 2; y", 3);
    test("def x = (byte)1; def y = (byte)3; x + --y * ++y++ - (byte)2", (byte)5);
    test("def x = (byte)1; def y = (byte)3; x + --y * ++++y++ - (byte)2", (byte)7);
    test("def x = (byte)1; def y = (byte)3; x + --y * ++++y++ - (byte)2; y", (byte)3);

    testError("def x = 'a'; x++", "non-numeric operand");
    testError("def x = [a:'a']; x.a++", "non-numeric operand");
    testError("def x = 'a'; x--", "non-numeric operand");
    testError("def x = [a:'a']; x.a--", "non-numeric operand");
    testError("def x = 'a'; ++x", "non-numeric operand");
    testError("def x = [a:'a']; ++x.a", "non-numeric operand");
    testError("def x = 'a'; --x", "non-numeric operand");
    testError("def x = [a:'a']; --x.a", "non-numeric operand");
  }

  @Test public void varScoping() {
    testError("def x = x + 1", "variable initialisation cannot refer to itself");
    test("def x = 2; if (true) { def x = 4; x++ }; x", 2);
    test("def x = 2; if (true) { def x = 4; x++; { def x = 17; x = x + 5 } }; x", 2);
    testError("def x = 2; { def x = 3; def x = 4; }", "clashes with previously declared variable");
    testError("def x = 2; { int x = 3; String x = 'abc'; }", "clashes with previously declared variable");
    testError("int f() { def x = 3; def x = 4; }", "clashes with previously declared variable");
    testError("int f(x) { def x = 3; }", "clashes with previously declared variable");
  }

  @Test public void constVars() {
    alwaysEvalConsts = true;
    testError("const int i = 1; i = 2", "cannot modify a constant");
    testError("const int i = 1; i++", "cannot modify a constant");
    testError("const int i = 1; ++i", "cannot modify a constant");
    testError("const int i; i", "initialiser expression required");
    testError("const var i; i", "unexpected token 'var'");
    testError("const def i; i", "unexpected token 'def'");
    test("var i = 1", 1);
    test("var X = 1", 1);
    test("const int i = 1; i", 1);
    test("const i = 1", 1);
    test("const i = 1; i", 1);
    test("var i = (byte)-1", (byte)-1);
    test("var X = (byte)-1", (byte)-1);
    test("const byte i = (byte)-1; i", (byte)-1);
    test("const i = (byte)-1", (byte)-1);
    test("const i = (byte)-1; i", (byte)-1);
    testError("const List i = [1]; i", "constants can only be simple types");
    testError("const int[] i = [1]; i", "constants can only be simple types");
    testError("const i; i", "initialiser expression required");
    test("const int X = 1; X", 1);
    test("const X = 1; X", 1);
    testError("const X = [1,2,3]; X", "simple constant value");
    test("def f() { const int i = 1; i }; f()", 1);
    testError("def f() { const def i = 1; i }; f()", "unexpected token 'def'");
    test("def f() { const i = 1; i }; f()", 1);
    test("const x = 2; def f() { const i = 1; i+x }; f()", 3);
    test("const X = 2; def f() { const i = 1; i+X }; f()", 3);
    test("const X = 2; def f() { const X = 1; X }; f()", 1);
    test("class X{}; const X = 1", 1);
    testError("class X{}; const X i = 1", "can only be simple types");
    testError("class X{}; const X[] i = 1", "can only be simple types");
    test("const byte i = 1; i + 1", 2);
    test("const i = (byte)1; i + 1", 2);
    test("const int i = 1; i + 1", 2);
    test("const i = 1; i + 1", 2);
    test("const long i = 1; i + 1", 2L);
    test("const i = 1L; i + 1", 2L);
    test("const double i = 1; i + 1", 2D);
    test("const i = 1D; i + 1", 2D);
    test("const Decimal i = 1; i + 1", "#2");
    test("const Decimal i = 1D; i + 1", "#2.0");
    test("const Decimal i = 1L; i + 1", "#2");
    test("const i = (Decimal)1; i + 1", "#2");
    test("const i = 1.0; i + 1", "#2.0");
    test("const boolean i = true; i && true", true);
    test("const i = true; i && true", true);
    test("const String i = 'abc'; i + 'x'", "abcx");
    test("const i = 'abc'; i + 'x'", "abcx");
  }

  @Test public void exprStrings() {
    test("def x = 1; \"$x\"", "1");
    test("def x = 1; \"\\$x\"", "$x");
    test("def x = 1; \"$x\\\"\"", "1\"");
    test("\"${1}\"", "1");
    test("def x = 1; \"${x}\"", "1");
    test("\"${}\"", "null");
    test("\"${\"${1}\"}\"", "1");
    test("\"'a'\"", "'a'");
    test("\"'a'\\n\"", "'a'\n");
    test("\"${1 + 2}\"", "3");
    test("\"x${1 + 2}y\"", "x3y");
    test("\"x${\"1\" + 2}y\"", "x12y");
    test("\"x${\"${2*4}\" + 2}y\"", "x82y");
    test("boolean x; \"$x\"*2", "falsefalse");
    test("boolean x; \"$x${\"${2*4}\" + 2}y\"", "false82y");
    test("boolean x; boolean y = true; \"$x${\"${\"$x\"*4}\" + 2}$y\"", "falsefalsefalsefalsefalse2true");
    test("def x = 3;\"x = ${x}\"", "x = 3");
    test("def x = 3;\"x = $x\"", "x = 3");
    test("\"\"\"x${1 + 2}y\n${3.0*3}\"\"\"", "x3y\n9.0");
    test("def x = 3; \"x=$x=${\"\"\"${1+2}\"\"\"}\"", "x=3=3");

    testError("def x = 3; \"\"\"${1+2}$\"\"\" + 'abc'", "unexpected character '\"'");
    testError("def x = 3; \"$x=${\"\"\"${1+2}${\"\"\"}\"", "unexpected end of file");
    testError("def x = 3; \"\"\"${1+2}${\"\"\" + 'abc'", "unexpected end of file");
    testError("def x = 3; \"\"\"${1+2}${x\"\"\" + 'abc'", "unexpected end of file");
    testError("def x = 3; \"\"\"${1+2}${x\"\"\"} + 'abc'", "unexpected end of file");
    testError("def x = 3; \"$x=${\"\"\"${1+2}${\"\"\"}\"", "unexpected end of file");
    testError("def x = 3; \"$x=${\"\"\"${1+2}$\"\"\"}\"", "expecting start of identifier");
    testError("def x = 3; \"\"\"${1+2}$\"\"\" + 'abc'", "expecting start of identifier");

    testError("def x = 3; \"$x=${\"\"\"${1\n+2}\"\"\"}\"", "new line not allowed");
    testError("def x = 3; \"$x=${\"\"\"\n${1\n+2}\n\"\"\"}\"", "new line not allowed");

    test("def x = (byte)1; /$x/", "1");
    test("def x = 1; /$x/", "1");
    test("def x = 1; def y = /$x/; y", "1");
    test("def x = 1; def y = /\\$x/; y", "\\$x");
    test("def x = 1; def y = /$x\\//; y", "1/");
    test("def x = /${(byte)1}/; x", "1");
    test("def x = /${1}/; x", "1");
    test("def x = 1; def y = /${x}/; y", "1");
    test("def x = /${}/; x", "null");
    test("/${/${1}/}/", "1");
    test("def x = /'a'/; x", "'a'");
    test("def x = /'a'\\n/; x", "'a'\\n");
    test("def x = /${1 + 2}/; x", "3");
    test("def x = /x${1 + 2}y/; x", "x3y");
    test("def x = /x${/1/ + 2}y/; x", "x12y");
    test("def x = /x${\"${2*4}\" + 2}y/; x", "x82y");
    test("boolean x; def y = /$x/*2; y", "falsefalse");
    test("boolean x; def z = /$x${\"${2*4}\" + 2}y/; z", "false82y");
    test("boolean x; boolean y = true; def z = /$x${\"${\"$x\"*4}/\"+ 2}$y/; z", "falsefalsefalsefalsefalse/2true");
    test("def x = 3;def z = /x = ${x+//comment\nx}/; z", "x = 6");
    test("def x = 3; def z = /x = $x/; z", "x = 3");
    test("def x = 3; def z = /x = $x/; z", "x = 3");
    testError("def x = 3; def z = /$x=${\"${1+2}${\"}/", "unexpected end of file");
    testError("def x = 3; def z = \"$x=${/${1+2\n}/}\"", "new line not allowed");
    testError("def x = 3; def z = \"$x=${/\n${1\n+2}\n/}\"", "unexpected new line");

    test("Map x = [a:[b:(byte)1]]; x.a.\"${'b'}\"", (byte)1);
    test("Map x = [a:[b:1]]; x.a.\"${'b'}\"", 1);
    test("Map x = [a:[b:1]]; x.a./${'b'}/", 1);
    test("Map m = [a:[b:1]]; def x = \"${'b'}\"; m.a[x]", 1);
    test("def m = [a:[b:1]]; String x = 'b'; m.a.(x)", 1);
    test("Map m = [a:[b:1]]; String x = 'b'; m.a.(x)", 1);
    test("Map m = [a:[b:1]]; def x = 'b'; m.a.(x)", 1);
    test("Map m = [a:[b:1]]; def x = \"${'b'}\"; m.a.(x)", 1);
    test("def it = 'itx'; Map m = [a:[b:1],c:2]; def x = \"${'size'}\"; m.(x)()", 2);
    test("def it = 'itx'; Map m = [a:[b:1],c:2]; def x = /${'size'}/; m.(x)()", 2);
    test("def it = 'itx'; Map m = [a:[b:1]]; def x = /${'b'}/; m.a.(x)", 1);
    test("def it = 'itx'; Map m = [a:[b:1]]; def x = /${'b'}/; m.a[x]", 1);
    test("def it = 'itx'; def x = /${'abcde'}/; x[2]", "c");

    testError("def x = 1; \"\"\"$x\"\"", "unexpected end of file");

    test("\"${return 'abc'}\"", "abc");
    test("def x = 'xx'; \"${return x}\"", "xx");
    test("def x = 'xx'; x = \"${return x}\" + 'yy'", "xxyy");
    test("def x = 'xx'; x = \"${return x}\" + 'yy'; x", "xxyy");
    test("def x = 'xx'; \"${x += 'yy'; return x}\"", "xxyy");
    test("def x = 'xx'; \"${x += 'yy' and return x}xx\"", "xxyyxx");
    test("def x = 'xx'; \"${x += 'yy'; return x}\"; x", "xxyy");
    test("def it = 'xx'; \"${it += 'yy'; return it}\"; it", "xxyy");
    test("\"x = ${ def x = 1 + 2; x}\"", "x = 3");
    test("\"5 pyramid numbers: ${ def p(n){ n == 1 ? 1 : n*n + p(n-1) }; [1,2,3,4,5].map{p(it)}.join(', ') }\"", "5 pyramid numbers: 1, 5, 14, 30, 55");
    test("def p(x){x*x}; \"5 pyramid numbers: ${ def p(n){ n == 1 ? 1 : n*n + p(n-1) }; [1,2,3,4,5].map{p(it)}.join(', ') }: ${p(3)}\"", "5 pyramid numbers: 1, 5, 14, 30, 55: 9");
    test("['a','b'].map{\"\"\"\"$it=\" + $it\"\"\" }.join(' + \", \" + ')", "\"a=\" + a + \", \" + \"b=\" + b");
  }

  @Test public void regexMatch() {
    test("'abc' =~ 'a'", true);
    test("'abc' =~ /a/", true);
    test("'abc' =~ /a/i", true);
    test("'abc' =~ /A/i", true);
    test("'Abc' =~ /a/i", true);
    test("'abc' =~ /^a/", true);
    test("'abc' =~ /^b/", false);
    test("'abc' =~ ''", true);
    test("'abc' =~ /^abc$/", true);
    test("'abc' =~ /c$/", true);
    testError("'abc' =~ /(c$/", "unclosed group");
    test("'ab\\nc' =~ /\\nc$/", true);
    test("'ab\\nc\\n' =~ /\\nc$/", true);   // Weird but $ matches the trailing \n
    test("'ab\\nc\\n' =~ /\\nc\\z/", false);
    test("'ab\\nc\\n' =~ /\\nc\\n\\z/", true);
    test("'ab\\nc\\n' =~ /\\nc$.*/", true);

    testError("'abc' =~ /a/x", "unrecognised regex modifier 'x'");
    testError("'abc' =~ /a/figsmx", "unrecognised regex modifier");

    test("'abc' !~ 'a'", false);
    test("'abc' !~ /a/", false);
    test("'abc' !~ /a/i", false);
    test("'abc' !~ /A/i", false);
    test("'Abc' !~ /a/i", false);
    test("'abc' !~ /^a/", false);
    test("'abc' !~ /^b/", true);
    test("'abc' !~ ''", false);
    test("'abc' !~ /^abc$/", false);
    test("'abc' !~ /c$/", false);
    testError("'abc' !~ /(c$/", "unclosed group");
    test("'ab\\nc' !~ /\\nc$/", false);
    test("'ab\\nc\\n' !~ /\\nc$/", false);   // Weird but $ is supposed to match the trailing \n
    test("'ab\\nc\\n' !~ /\\nc\\z/", true);
    test("'ab\\nc\\n' !~ /\\nc\\n\\z/", false);
    test("'ab\\nc\\n' !~ /\\nc$.*/", false);

    test("'a\\nbc' =~ /a$/", false);
    test("'a\\nbc' =~ /a$/m", true);
    test("'a\\nbc' =~ /a./", false);
    test("'a\\nbc' =~ /a./s", true);
    test("'a\\nbc' =~ /a.bc$/s", true);
    test("'a\\n\\nbc' =~ /a.$/s", false);
    test("'a\\n\\nbc' =~ /a.$/ms", true);

    test("def x = 'abc'; def y = 'a'; x =~ y", true);
    test("def x = 'abc'; def y = /a/; x =~ y", true);
    test("def x = 'abc'; def y = /^a/; x =~ y", true);
    test("def x = 'abc'; def y = /^b/; x =~ y", false);
    test("def x = 'abc'; def y = 'a'; x !~ y", false);
    test("def x = 'abc'; def y = /a/; x !~ y", false);
    test("def x = 'abc'; def y = /^a/; x !~ y", false);
    test("def x = 'abc'; def y = /^b/; x !~ y", true);
    test("def x = 'abc'; def y = ''; x =~ y", true);
    test("def x = 'abc'; def y = /^abc$/; x =~ y", true);
    test("def x = 'abc'; def y = /c$/; x =~ y", true);
    testError("def x = 'abc'; def y = /(c$/; x =~ y", "unclosed group");
    test("def x = 'ab\\nc'; def y = /\nc$/; x =~ y", true);
    test("def x = 'ab\\nc\\n'; def y = /\nc\\z/; x =~ y", false);
    test("def x = 'ab\\nc\\n'; def y = /\nc$.*/; x =~ y", true);
    test("def it = 'xyyz'; /yy/r and it = 'baa'; /aa$/r and return 'xxx'", "xxx");
    test("def it = 'xyz'; String x = /x/; x", "x");
    test("def it = 'xyz'; def x = /x/; x == 'x'", true);
    test("def it = 'xyz'; def x = /x/r; x", true);
    testError("def x = /x/r; x", "no 'it' variable");
    testError("def it = 'xyz'; boolean x = /x/; x", "regex string used in boolean context");
    test("def it = 'xyz'; boolean x = /x/r; x", true);
    test("def it = 'xyz'; boolean x = /a/r; x", false);
    test("def str = 'xyz'; def x; str =~ /(x)(y)(z)/ and !(str =~ /abc/) and x = \"$3$2$1\"; x", "nullnullnull");
    test("def it = 'xyz'; def x; /(x)(y)(z)/r and !/abc/r and x = \"$3$2$1\"; x", "nullnullnull");
    test("def it = 'xyz'; def x; /(x)(y)(z)/r and x = \"$3$2$1\"; x", "zyx");
    test("def it = 'xyz'; def x; !/(x)(y)(z)/r or x = \"$3$2$1\"; x", "zyx");
    test("def it = 'xyz'; def x = /x/r; { x ? 'match' : 'nomatch' }()", "match");
    test("def it = 'xyz'; def x = /x/; { x == 'x' ? 'match' : 'nomatch' }()", "match");
    test("def it = 'xyz'; def x = /x/r; { x == 'x' ? 'match' : 'nomatch' }()", "nomatch");
    test("def it = 'xyz'; def x = /X/i; { x ? 'match' : 'nomatch' }()", "match");
    test("def it = 'xyz'; def x = /X/i; { x == 'x' ? 'match' : 'nomatch' }()", "nomatch");
    test("['abc','xzt','sas',''].map{/a/r ? true : false}", Utils.listOf(true,false,true,false));
    test("['abc','xzt','sas',''].map{ if (/a/r) true else false}", Utils.listOf(true,false,true,false));
    test("['abc','xzt','sas',''].map{ /a/r and return true; false}", Utils.listOf(true,false,true,false));

    testError("def it = 'abc'; def x; /a/ and x = 'x'; x", "regex string used in boolean context");
    testError("def it = 'abc'; def x; /a/ ? true : false", "regex string used in boolean context");
    testError("def it = 'abc'; def x; if (/a/) true else false", "regex string used in boolean context");
    testError("def it = 'abc'; def x; while (/a/) ;", "regex string used in boolean context");
    testError("def it = 'abc'; def x; for (; /a/;) ;", "regex string used in boolean context");
    test("def x = 'abc'; def y; x =~ /a/ and y = 'y'; y", "y");
    test("def x = 'a=b'; x =~ /=b/", true);
    test("'^ cd' =~ /^\\^ cd/", true);
    test("'$ cd' =~ /^\\$/", true);
    test("'''\n:''' =~ /^$.:$/ms", true);
    test("def x = 'aa'; 'abcaa' =~ /$x/", true);
    test("def x = 'aa'; 'abcaa' =~ /\\$x/", false);
    test("def x = 'aa'; 'abc$x' =~ /\\$x/", true);
    test("def x = 'aa'; 'abc$x' =~ /\\$x$/", true);

    test("['a','b','c'].map{/(.)/r\n[name:$1]\n }.map{it.name}", Utils.listOf("a","b","c"));
    test("def x = ['a','b','c'].map{/(.)/r\n[name:$1]\n }.map{it.name}; x", Utils.listOf("a","b","c"));

    test("def it = 'ab\\ncd'; /b$/mr", true);
    test("def it = 'ab\\n#d'; /b$\\n#/mr", true);
    test("def it = 'ab\\ncd'; /b\\$\\nc/mr", false);
    test("def it = 'ab\\ncd'; /b$.c/smr", true);
    test("def it = 'ab\\ncd'; /b\\$.c/smr", false);
    test("def it = 'ab\\ncd'; /b.c/smr", true);

    testError("1 =~ /abc/", "cannot convert");
    testError("def x = 1; x =~ /abc/", "cannot convert");
    test("'abc' =~ /\\\\/", false);
    test("'ab\\\\c' =~ /\\\\/", true);
    test("'ab\\\\c' =~ s/\\\\/x/gr", "abxc");
    test("def it = '=A'; it =~ /=a/i", true);
    test("def it = '='; /=/r", true);
  }

  @Test public void regexCaptureVars() {
    test("def x = ''; 'abc' =~ /$x/", true);
    test ("def x = 'abc'; x =~ /${''}/", true);
    testError("def x; 'abc' =~ x", "null regex");
    test("def x; x =~ /abc/", false);
    test("'abcaaxy' =~ /(a+)/", true);
    test("'bcaaxy' =~ /(a+)/ and return $1", "aa");
    test("def it = 'bcaaxy'; /(a+)/r and return $1", "aa");
    test("def it = 'bcaaxy'; /(a+)/r and return $2", null);
    testError("def it = 'bcaaxy'; /(a+)/r and return $1000", "capture variable number too large");
    test("def x = 'abcaaxy'; x =~ /(a+)/", true);
    test("def x = 'bcaaxy'; x =~ /(a+)/ and return $1", "aa");
    test("def x; 'bcaaxy' =~ /(a+)/ and x = $1; 'abc' =~ /(a).(c)/ and x += $2; x", "aac");
    test("def x; 'bcaaxy' =~ /(a+)/ and x = $1; { 'abc' =~ /(a).(c)/ and x += $2 }; x", "aac");
    test("def x; 'bcaaxy' =~ /(a+)/ and x = $1; { 'abc' =~ /(a).(c)/ and x += $2 }; x += $1", "aacaa");
    test("def x; 'bcaaxy' =~ /(a+)/ and x = $1; 'abc' =~ /(a).(c)/; \"$1$2\"", "ac");
    testError("{ 'bcaaxy' =~ /(a+)/ }; \"$1$2\"", "no regex match");
    test("'abc' =~ /a/; $0", "a");
    test("'abc' =~ /a(bc)/; $0 + $1", "abcbc");
    test("'abc' =~ /a(bc)/; $2", null);
    test("'abc' =~ /a(bc)/ and 'xyz' =~ /(y)/; $1", "y");
    test("def it = 'abc'; /a/r; $0", "a");
    test("def it = 'abc'; /a(bc)/r; $0 + $1", "abcbc");
    test("def it = 'abc'; /a(bc)/r; $2", null);
    test("def str = 'xyz'; def x; str =~ /(x)(y)(z)/ and str =~ /x/ and x = \"$3$2$1\"; x", "nullnullnull");
    test("def it = 'xyz'; def x; /(x)(y)(z)/r and /x/r and x = \"$3$2$1\"; x", "nullnullnull");
    test("def it = 'xyz'; def x; /(x)(y)(z)/r and { x = \"$3$2$1\" }(); x", "zyx");
    test("def it = 'xyz'; def x; /(x)(y)(z)/r and { x = \"$3$2$1\"; /a(b)/r and x += $1 }('abc'); x", "zyxb");
    test("def it = 'xyz'; def x; /(x)(y)(z)/r and { x = \"$3$2$1\"; /a(b)/r and x += $1 }('abc'); x += $3; x", "zyxbz");
    test("def it = 'xyz'; def x; it =~ sleep(0,/(x)(y)(z)/) and { x = \"$3$2$1\" }(); x", "zyx");

    test("'a123b' =~ /.(\\d+)./; $1", "123");
    test("'a123b' =~ /.(\\d+)./n; $1", 123L);
    test("'a123.4b' =~ /.([\\d.]+)./n; $1", "#123.4");
    test("'a-1234b' =~ /.([\\d.-]+)./n; $1", -1234L);
    test("'a-123.4b' =~ /.([\\d.-]+)./n; $1", "#-123.4");
    test("'a123.4.5b' =~ /.([\\d.]+)./n; $1", "123.4.5");
    test("'a12345123451234512341234123412341234123412341234b' =~ /.([\\d.]+)./n; $1", "12345123451234512341234123412341234123412341234");
    test("'1bc' =~ /(\\d)(.*(\\d))?/n; $2", null);
    test("def f(x){x}; 'a123b' =~ /.(\\d+)./n; f($1)", 123L);
  }

  @Test public void regexGlobalMatch() {
    testError("String x = 'abc'; def y = ''; x =~ /([a-z])/g and y += $1; x =~ /([a-z])/g and y += $1; y", "cannot use 'g' modifier");
    test("String x = 'abc'; def y = ''; while (x =~ /([a-z])/g) { y += $1 }; y", "abc");
    testError("String x = 'abc'; def y = ''; while (y =~ /^$|a$/g && x =~ /([a-z])/g) { y += $1 }; y", "can only occur once");
    testError("def it = 'abc'; def y = ''; while (y =~ /^$|a$/g && /([a-z])/g) { y += $1 }; y", "can only occur once");
    testError("def it = 'abc'; def y = ''; while (/^$|a$/g && /([a-z])/g) { y += $1 }; y", "can only occur once");
    test("String x = 'abc'; def y = ''; while (y =~ /^$|a$/ && x =~ /([a-z])/g) { y += $1 }; y", "ab");
    test("String x = 'abc'; def y = 0; while (y.toString() =~ /[0-2]/ && x =~ /([a-z])/g && y.toString() !~ /x/) { y++ }; y", 3);
    test("def it = 'abc'; def y = ''; while (/([a-z])/g) { y += $1 }; y", "abc");
    test("def it = 'abc'; def y = ''; while (y =~ /^$|a$/ && /([a-z])/g) { y += $1 }; y", "ab");
    test("def it = 'abc'; def y = 0; while (y.toString() =~ /[0-2]/ && /([a-z])/g && y.toString() !~ /x/) { y++ }; y", 3);

    testError("def it = 'abc'; def y = ''; while (/([a-z])/g) { y += $1 }; y += $1", "in scope where no regex match has occurred");
    testError("def it = 'abc'; def y = ''; for (int i = 0; /${''}/g && i < 10; i++) { y += $1 }; y += $1", "in scope where no regex match has occurred");
    test("def it = 'abc'; def y = ''; for (int i = 0; /${''}/g && i < 3; i++) { y += $1 }; y", "nullnullnull");
    test("def it = 'abcd'; def y = ''; for (int i = 0; /([a-z])./g && i < 10; i++) { y += $1 }; y", "ac");
    test("def it = 'abcd'; def y = ''; for (int i = 0; /([A-Z])./ig && i < 10; i++) { y += $1 }; y", "ac");
    test("def x = 'abcd'; def y = ''; for (int i = 0; x =~/([A-Z])./ig && i < 10; i++) { y += $1 }; y", "ac");
    test("def it = 'abcd'; def x = ''; while (/([a-z])/gr) { x += $1 }; while (/([A-Z])/ig) { x += $1 }; x", "abcdabcd");
    test("def it = 'abc'; def x = ''; while (/([a-z])/gr) { x += $1; while (/([A-Z])/ig) { x += $1 } }; x", "aabcbabccabc");
    test("def it = null; def x = 'empty'; while (/([a-z])/gr) { x += $1; while (/([A-Z])/ig) { x += $1 } }; x", "empty");
    test("def x = 'abcde'; int i = 0; while (x =~ /([ace])/g) { i++; x = 'aaaa' }; i", 5);
    test("def x = 0; def f() { '123' }; while(f() =~ /(\\d)/ng) { x+= $1 }; x", 6L);
    testError("def x = 0; int i = 0; def f() { die if i++ > 0; '123' }; while(f() =~ /(\\d)/ng) { x+= $1 }; x", "script death");
  }

  @Test public void regexSubstitute() {
    test("def it = 'abc'; s/a/x/", "xbc");
    test("def it = 'abc'; s/a/x/; it", "xbc");
    test("String x = 'abc'; x =~ s/a/x/", "xbc");
    test("String x = 'abc'; x =~ s/a/x/; x", "xbc");
    test("def x = [a:'abc']; x.a =~ s/a/x/", "xbc");
    test("def x = [a:'abc']; x.a =~ s/a/x/; x.a", "xbc");
    test("def it = 'abaac'; s/a/x/g", "xbxxc");
    test("def it = 'abaac'; s/a/x/g; it", "xbxxc");
    test("String x = 'abaac'; x =~ s/a/x/g", "xbxxc");
    test("String x = 'abaac'; x =~ s/a/x/g; x", "xbxxc");
    test("def x = [a:'abaac']; x.a =~ s/a/x/g", "xbxxc");
    test("def x = [a:'abaac']; x.a =~ s/a/x/rg", "xbxxc");
    test("def x = [a:'abaac']; x.a =~ s/a/x/rg; x.a", "abaac");
    test("def x = [a:'abaac']; x.a =~ s/a/x/g; x.a", "xbxxc");
    testError("def x = [a:'abc']; (x.a + 'xyz') =~ s/a/x/; x.a", "invalid lvalue");
    test("def it = 'abaac'; s/a//g", "bc");
    test("def it = '=ab=a=ac'; s/=a//g", "bc");
    test("def it = '=ab=a=ac'; s/=a/=/g", "=b==c");
    test("def it = 'abaac'; s/a//g; it", "bc");
    test("def it = 'abaac'; s///g", "abaac");
    test("def it = 'abaac'; s///g; it", "abaac");
    test("def it = 'abaac'; s//a/g", "aaabaaaaaca");
    test("def it = 'abaac'; s//a/g; it", "aaabaaaaaca");
    testError("1 =~ s/abc/xyz/", "invalid lvalue");
    testError("def x = 1; x =~ s/abc/xyz/", "cannot convert");
    testError("'a123c' =~ /(\\d+)/; $1 =~ s/123/abc/; $1", "invalid lvalue");
    test("def it = '123456'; s/([0-9])/${ $1 * $1 }/rng", "149162536");
    test("def it = 'a1b2c3def4g56'; s/([0-9])/${ $1 * $1 }/rng", "a1b4c9def16g2536");
    test("def it = 'abcdef'; s/([a-z])/${ $1 + $1 }/rg", "aabbccddeeff");
    test("def it = '   *# parseScript -&gt; packageDecl? script;'; s/^.*#//; s/^ *([^ ]*) *-&gt;/${ $1.toUpperCase(1) }->/g; $1 == null", true);
  }

  @Test public void regexSubstituteExprString() {
    test("def it = 'abaAc'; s/(A)/x$1/i; ", "xabaAc");
    test("def it = 'abaAc'; s/(A)/x$1/i; it", "xabaAc");
    test("def x = 'abaAc'; x =~ s/(A)/x$1/i; ", "xabaAc");
    test("def x = 'abaAc'; x =~ s/(A)/x$1/i; x", "xabaAc");
    test("def x = [a:'abaAc']; x.a =~ s/(A)/x$1/i; ", "xabaAc");
    test("def x = [a:'abaAc']; x.a =~ s/(A)/x$1/i; x.a", "xabaAc");
    test("def it = 'abaAc'; s/(A)/x$1/ri; ", "xabaAc");
    test("def it = 'abaAc'; s/(A)/x$1/ri; it", "abaAc");
    test("def x = 'abaAc'; x =~ s/(A)/x$1/ri; ", "xabaAc");
    test("def x = 'abaAc'; x =~ s/(A)/x$1/ri; x", "abaAc");
    test("def x = [a:'abaAc']; x.a =~ s/(A)/x$1/ri; ", "xabaAc");
    test("def x = [a:'abaAc']; x.a =~ s/(A)/x$1/ri; x.a", "abaAc");
    test("def x = [a:'abaAc']; x.a =~ s/(A)/x$1/ig; x.a", "xabxaxAc");
    test("def y = 'y'; def x = [a:'abaAc']; x.a =~ s/(A)/x$1$y/ig; x.a", "xaybxayxAyc");
    test("def x = 'abcdefghijklmn'; x =~ s/(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)/x$10$11/ig", "xjkmn");
    test("def x = 'abcdefghijklmn'; x =~ s/(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)/x$10$11/ig; x", "xjkmn");
    test("def x = 'abcdefghijklmn'; x =~ s/(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)/x$10$11/i", "xjkmn");
    test("def x = 'abcdefghijk123456789xy11'; x =~ s/(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)/X$10$11/ig", "XjkXxy11");
    test("def x = 'abcdefghijk123456789xy11'; x =~ s/(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)/X$10$11/ig; x", "XjkXxy11");
    testError("def x = [a:'abaAc']; x.a =~ s/(A)/x$1$2/ig; x.a", "no group");
    test("def a = 'a'; def it = 'abcd'; s/(.)(.)/${a}${$1}${$2*2 + $1*2}/g", "aabbaaacddcc");
    test("def a = 'a'; def it = 'abc'; s/([a-z])/\\$a\\$1/g", "$a$1$a$1$a$1");
    test("def it = 'abc'; s/([a-z])/\\$1\\$1/g", "$1$1$1$1$1$1");
    test("def it = 'abc'; s/([a-z])/\\$1\\$1${$1 + $1}/g", "$1$1aa$1$1bb$1$1cc");
    testError("def root = 'abc'; def m=[:]; root =~ s/abc/\"${m{'abc'}}\"/\n", "object of type map");
    test("def x = 'This SentenCe has Capital letTErs'; x =~ s/([A-Z][a-z])/${$1 =~ /^((.*))$/; $2.toLowerCase()}/g; x", "this sentence has capital letTers");
    test("def x = 'This'; x =~ s/[a-z]/${1+2}/g; x = 'This'; x =~ s/[a-z]/${1+2}/rg; x = 'This'; x =~ s/[a-z]/${1+2}/g; x", "T333");
    test("'This SentenCe has Capital letTErs' =~ s/([A-Z][a-z])/${$1 =~ /^((.*))$/; $2.toLowerCase()}/rg", "this sentence has capital letTers");
    test("'This' =~ s/[a-z]/${1+2}/rg; 'This' =~ s/[a-z]/${1+2}/rg; 'This' =~ s/[a-z]/${1+2}/rg", "T333");
    test("def x = 'This SentenCe has Capital letTErs'; sleep(0, x =~ s/([A-Z][a-z])/${$1 =~ /^((.*))$/; $2.toLowerCase()}/g); x", "this sentence has capital letTers");
    test("'This SentenCe has Capital letTErs' =~ s/([A-Z][a-z])/${sleep(0,$1) =~ sleep(0,/^((.*))$/); sleep(0,sleep(0,$2).toLowerCase())}/rg", "this sentence has capital letTers");
    test("def f(x,y,z){ sleep(0,0) if false; z }; f(null, 13, 'abc' =~ s/([A-Z][a-z])/${f(null, 17,$1)}/rg)", "abc");
    test("def f(x,y,z){ z }; f(null, 13, 'abc' =~ s/([A-Z][a-z])/${f(null, 17,$1)}/rg)", "abc");
    test("'12345' =~ s/([0-9])/${$1+$1}/rng", "246810");
    testError("'12345' =~ s/([0-9])/${$1+$1}/ng", "invalid lvalue");
    testError("1 =~ s/([0-9])/${$1+$1}/ng", "invalid lvalue");
    test("'abcdefg' =~ s/(..)/${ $1 =~ s/(.)/${$1 + $1}/rg }/rg", "aabbccddeeffg");
    test("'abcdefg' =~ s/(..)/${ $1 + ('abcdefg' =~ s/(..)/x/rg) }/rg", "abxxxgcdxxxgefxxxgg");
    testError("for(int i = 0; i < 10; i++) { 'abc' =~ s/(.)/${ continue }/rg }", "must be within a while/for loop");
  }

  @Test public void doBlock() {
    test("true and do { true } and return true", true);
    test("true and do { for(byte i=0;i<10;i++); false } and return true", false);
    test("true and do { for(byte i=0;i<10;i++); true } and return true", true);
    test("true and do { for(int i=0;i<10;i++); false } and return true", false);
    test("true and do { for(int i=0;i<10;i++); if (true) 1 == 1 } and return true", true);
    test("true and do { for(int i=0;i<10;i++); return false } and return true", false);
    test("def it = 'abc'; /ab/r and do { /c/r and return false } and return true", false);
    test("def x; def it = 'abc'; /ab/r and do { it = 'xyz'; x = 'x' } and return \"$it$x\"", "xyzx");
    test("do { 1 }", 1);
    test("{ do { 1 } }", 1);
    test("do { do { 1 } }", 1);
    test("def f = { do { 1 } }; f()", 1);
    test("def f() { do { 1 } }; f()", 1);
    test("do { if (true) 1 }", 1);
    test("do { int x = 1 }", 1);
    test("do { def x = 1 }", 1);
    test("do { 1L }", 1L);
    test("{ do { 1L } }", 1L);
    test("do { do { 1L } }", 1L);
    test("def f = { do { 1L } }; f()", 1L);
    test("def f() { do { 1L } }; f()", 1L);
    test("do { if (true) 1L }", 1L);
    test("do { long x = 1L }", 1L);
    test("do { def x = 1L }", 1L);
    test("do { 1D }", 1D);
    test("{ do { 1D } }", 1D);
    test("do { do { 1D } }", 1D);
    test("def f = { do { 1D } }; f()", 1D);
    test("def f() { do { 1D } }; f()", 1D);
    test("do { if (true) 1D }", 1D);
    test("do { double x = 1D }", 1D);
    test("do { def x = 1D }", 1D);
    test("do { 1.0 }", "#1.0");
    test("{ do { 1.0 } }", "#1.0");
    test("do { do { 1.0 } }", "#1.0");
    test("def f = { do { 1.0 } }; f()", "#1.0");
    test("def f() { do { 1.0 } }; f()", "#1.0");
    test("do { if (true) 1.0 }", "#1.0");
    test("do { Decimal x = 1.0 }", "#1.0");
    test("do { def x = 1.0 }", "#1.0");
    test("do { 'abc' }", "abc");
    test("{ do { 'abc' } }", "abc");
    test("do { do { 'abc' } }", "abc");
    test("def f = { do { 'abc' } }; f()", "abc");
    test("do { if (true) 'abc' }", "abc");
    test("do { String x = 'abc' }", "abc");
    test("do { def x = 'abc' }", "abc");
    test("def f() { do { { -> 'abc' } } }; f()()", "abc");
    test("def f() { sleep(0, do { { -> 'abc' } }) }; f()()", "abc");
    test("do { [1,2,3] }", Utils.listOf(1,2,3));
    test("{ do { [1,2,3] } }", Utils.listOf(1,2,3));
    test("do { do { [1,2,3] } }", Utils.listOf(1,2,3));
    test("def f = { do { [1,2,3] } }; f()", Utils.listOf(1,2,3));
    test("do { if (true) [1,2,3] }", Utils.listOf(1,2,3));
    test("do { List x = [1,2,3] }", Utils.listOf(1,2,3));
    test("do { def x = [1,2,3] }", Utils.listOf(1,2,3));
    test("def f() { do { { -> [1,2,3] } } }; f()()", Utils.listOf(1,2,3));
    test("def f() { sleep(0, do { { -> [1,2,3] } }) }; f()()", Utils.listOf(1,2,3));
    test("do {}", null);
    test("do { do {} }", null);
    test("do {while(false){}}", null);
    test("do { do {while(false){}} }", null);
    test("do {for(int i = 0; i < 10; i++){}}", null);
    test("do { if (true) 1 == 1 }", true);
    test("do { if (false) 1 == 1 }", null);
    test("do { if (true) 1 == 1 } and true", true);
    test("do { if (true) 1 == 1 } if true", true);
    test("do { if (true) 1 == 1 } and true if true", true);
    test("class X{int i}; do { if (true) new X(1) } == new X(1)", true);
    test("class X{int i}; do { if (false) new X(1) } == null", true);
    test("class X{int i}; do { do{ if (true) new X(1) } } == new X(1)", true);
    test("class X{int i}; do { do{ if (false) new X(1) } } == null", true);
  }

  @Test public void blocks() {
    test("{ 1 }", 1);
    test("{ 1; 2 }", 2);
    test("{ { 1; 2 } }", 2);
    test("{ { 1; { 2 } } }", 2);
    test("def x = { { 1; { 2 } } }()", 2);
    test("def x; x = { { 1; { 2 } } }()", 2);
    test("int x; x = { { 1; { 2 } } }()", 2);
  }

  @Test public void listLiterals() {
    test("[]", Utils.listOf());
    test("[1]", Utils.listOf(1));
    testError("[1,", "unexpected EOF");
    test("[(byte)1,2,3]", Utils.listOf((byte)1,2,3));
    test("[1,2,3]", Utils.listOf(1,2,3));
    test("[1,2+3,3]", Utils.listOf(1,5,3));
    test("[[]]", Utils.listOf(Utils.listOf()));
    test("[[1]]", Utils.listOf(Utils.listOf(1)));
    test("[[1],2]", Utils.listOf(Utils.listOf(1),2));
    test("[][0]", null);
    test("[1,2,3][0]", 1);
    test("[1,2,3][3]", null);
    test("[1,[2,3,4],5][1]", Utils.listOf(2,3,4));
    testError("String x = []", "cannot convert");
    testError("String x = [1,2,3]", "cannot convert");
    testError("def y = []; String x = y", "cannot convert");
    testError("def y = [1,2,3]; String x = y", "cannot convert");
    test("'' + [1,2,3]", "[1, 2, 3]");
    test("'' + []", "[]");
    test("'' + [1,[2,3]]", "[1, [2, 3]]");
    test("def x = [1,2,3]; ''+x", "[1, 2, 3]");
    test("def x = []; ''+x", "[]");
    test("def x = [1,[2,3]]; ''+x", "[1, [2, 3]]");
    test("def x = []; x[2] = 2; x[0] == null && x[1] == null && x[2] == 2", true);
    test("def x = []; x[2] = 2; x.filter{!it}.size()", 2);
    test("def x = [1,2,3]; x[(byte)-1] = 4; x", Utils.listOf(1,2,4));
    test("def x = [1,2,3]; x[-(byte)1] = 4; x", Utils.listOf(1,2,4));
    test("def x = [1,2,3]; x[-1] = 4; x", Utils.listOf(1,2,4));
    test("List x = [1,2,3]; x[-1] = 4; x", Utils.listOf(1,2,4));
    testError("List x = [1,2,3]; x[-4] = 4; x", "out of range");
  }

  @Test public void nullIndexes() {
    testError("String s; s[null]", "null value");
    testError("''[null]", "null value");
    testError("def y; ''[y]", "null value");
    testError("String x = ''; x[null]", "null value");
    testError("String x = ''; def y; x[y]", "null value");
    testError("'3'[null]", "null value");
    testError("def y; '3'[y]", "null value");
    testError("String x = 'a'; x[null]", "null value");
    testError("String x = 'a'; def y; x[y]", "null value");
    testError("def x = 'a'; x[null]", "null value");
    testError("def x = 'a'; def y; x[y]", "null value");
    testError("def x; x[0]", "null parent");
    testError("def x; x[null]", "null parent");
    testError("[][null]", "null value for index");
    testError("def y; [][y]", "null value for index");
    testError("List x = []; x[null]", "null value for index");
    testError("List x = []; def y; x[y]", "null value for index");
    testError("[1,2,3][null]", "null value for index");
    testError("def y; [1,2,3][y]", "null value for index");
    testError("List x = [1,2,3]; x[null]", "null value for index");
    testError("List x = [1,2,3]; def y; x[y]", "null value for index");
    testError("def x = [1,2,3]; x[null]", "null value for index");
    testError("def x = [1,2,3]; def y; x[y]", "null value for index");
    testError("[:][null]", "null value for field");
    testError("def y; [:][y]", "null value for field");
    testError("Map x = [:]; x[null]", "null value for field");
    testError("Map x = [:]; def y; x[y]", "null value for field");
    testError("[a:1,b:2][null]", "null value for field");
    testError("def y; [a:1,b:2,c:3][y]", "null value for field");
    testError("Map x = [a:1,b:2,c:3]; x[null]", "null value for field");
    testError("Map x = [a:1,b:2,c:3]; def y; x[y]", "null value for field");
    testError("def x = [a:1,b:2,c:3]; x[null]", "null value for field");
    testError("def x = [a:1,b:2,c:3]; def y; x[y]", "null value for field");
    testError("([] as int[])[null]", "null value");
    testError("def y; ([] as int[])[y]", "null value");
    testError("int[] x = []; x[null]", "null value");
    testError("int[] x = []; def y; x[y]", "null value");
    testError("([1,2,3] as int[])[null]", "null value");
    testError("def y; ([1,2,3] as int[])[y]", "null value");
    testError("int[] x = [1,2,3]; x[null]", "null value");
    testError("int[] x = [1,2,3]; def y; x[y]", "null value");
    testError("def x = [1,2,3] as int[]; x[null]", "null value");
    testError("def x = [1,2,3] as int[]; def y; x[y]", "null value");
  }

  @Test public void mapLiterals() {
    test("[:]", new HashMap<>());
    test("[a:(byte)1]", Utils.mapOf("a",(byte)1));
    test("[a:1]", Utils.mapOf("a",1));
    test("[a:1] if true", Utils.mapOf("a",1));
    testError("[:", "unexpected EOF");
    testError("[:123]", "unexpected token");
    test("[for:1]", Utils.mapOf("for",1));
    test("['for':1]", Utils.mapOf("for",1));
    test("[a:1,b:2]", Utils.mapOf("a",1, "b", 2));
    test("['a':1,'b':2]", Utils.mapOf("a",1, "b", 2));
    test("[('a'+'b'):1,b:2]", Utils.mapOf("ab",1, "b", 2));
    test("[\"ab\":1,b:2]", Utils.mapOf("ab",1, "b", 2));
    test("[a:1,b:[c:2]]", Utils.mapOf("a",1, "b", Utils.mapOf("c",2)));
    test("{:}", new HashMap<>());
    test("{a:1}", Utils.mapOf("a",1));
    test("{a:1} if true", Utils.mapOf("a",1));
    testError("{:", "unexpected EOF");
    test("{for:1}", Utils.mapOf("for",1));
    test("{'for':1}", Utils.mapOf("for",1));
    test("{a:1,b:2}", Utils.mapOf("a",1, "b", 2));
    test("{a:1,b:{c:2}}", Utils.mapOf("a",1, "b", Utils.mapOf("c",2)));
    test("[a:1].a", 1);
    test("[a:[b:2]].a.b", 2);
    test("[a:[b:2]]?.a?.b", 2);
    test("[a:[b:2]]?.a?['b']", 2);
    test("[a:[b:2]]['a']['b']", 2);
    test("[a:[b:2]].c", null);
    testError("String x = [a:1]", "cannot convert");
    testError("String x = {a:1,b:2}", "cannot convert");
    testError("String x = [:]", "cannot convert");
    test("String x = '' + [a:1]", "[a:1]");
    test("String x = '' + [a:1,b:2]", "[a:1, b:2]");
    test("String x = '' + {a:1,b:2}", "[a:1, b:2]");
    test("String x = '' + [:]", "[:]");
    test("String x = '' + [a:[1,2,3]]", "[a:[1, 2, 3]]");
    test("String x = '' + [a:[1,[b:2],3]]", "[a:[1, [b:2], 3]]");
    test("['1':['2':3]].1.2", 3);
    test("['1':['2':3]].(1).2", 3);
    testError("['1':[null:['2':3]].(1).(null).2", "unexpected EOF");
    testError("['1':[null:['2':3]]].(1).(null).2", "null value for field");
    test("['1':[null:['2':3]]].(1).null.2", 3);
    test("[\"a${1+2}\":1,b:2]", Utils.mapOf("a3",1, "b", 2));
    test("[this:1, if:2, while:[if:[z:3],for:3]].while.if.z", 3);
    test("[true:[false:[null:[if:[z:3],for:3]]]].true.false.null.if.z", 3);
    test("[true:[false:[null:[if:[z:3],for:3]]]]?.true?.false?.null?.if?.z", 3);
    test("[a:1]['a']", 1);
    testError("[(1):2]", "map key must be string");
    testError("[a:2,b:3,a:4]", "key 'a' occurs multiple times");
    test("{a:1}.a", 1);
    test("{a:{b:2}}.a.b", 2);
    test("{a:{b:2}}?.a?.b", 2);
    test("{a:{b:2}}?.a?['b']", 2);
    test("{a:{b:2}}['a']['b']", 2);
    test("{a:{b:2}}.c", null);
    testError("String x = {a:1}", "cannot convert");
    testError("String x = {a:1,b:2}", "cannot convert");
    testError("String x = {:}", "cannot convert");
    test("String x = '' + {a:1}", "[a:1]");
    test("String x = '' + {a:1,b:2}", "[a:1, b:2]");
    test("String x = '' + {a:1,b:2}", "[a:1, b:2]");
    test("String x = '' + {:}", "[:]");
    test("String x = '' + {a:[1,2,3]}", "[a:[1, 2, 3]]");
    test("String x = '' + {a:[1,{b:2},3]}", "[a:[1, [b:2], 3]]");
    test("{'1':{'2':3}}.1.2", 3);
    test("{'1':{'2':3}}.(1).2", 3);
    testError("{'1':{null:{'2':3}}.(1).(null).2", "unexpected EOF");
    testError("{'1':{null:{'2':3}}}.(1).(null).2", "null value for field");
    test("{'1':{null:{'2':3}}}.(1).null.2", 3);
    test("{\"a${1+2}\":1,b:2}", Utils.mapOf("a3",1, "b", 2));
    test("{this:1, if:2, while:{if:{z:3},for:3}}.while.if.z", 3);
    test("{true:{false:{null:{if:{z:3},for:3}}}}.true.false.null.if.z", 3);
    test("{true:{false:{null:{if:{z:3},for:3}}}}?.true?.false?.null?.if?.z", 3);
    test("{a:1}['a']", 1);
    testError("{(1):2}", "map key must be string");
    testError("{a:2,b:3,a:4}", "key 'a' occurs multiple times");
  }

  @Test public void listMapVariables() {
    testError("Map x = (byte)1", "cannot convert");
    testError("Map x = 1", "cannot convert");
    testError("List x = 1", "cannot convert");
    test("Map x = [a:1]; x.a", 1);
    test("Map x = [a:1]", Utils.mapOf("a", 1));
    test("Map x = [a:1]; 1", 1);
    testError("List list = [1]; list.a", "invalid object type");
    testError("int x = 1; x.a", "invalid object type");
    testError("int x = 1; x[0]", "invalid object type");
    test("Map map = [:]; map[0]", null);
    testError("Map map = [:]; map = 1", "cannot convert from int to map");
    testError("List list = []; list = 1", "cannot convert from int to list");

    test("var x = [a:1]; x.a", 1);
    test("var x = [a:1]", Utils.mapOf("a", 1));
    test("var x = [a:1]; 1", 1);
    testError("var list = [1]; list.a", "invalid object type");
    testError("var x = 1; x.a", "invalid object type");
    testError("var x = 1; x[0]", "invalid object type");
    test("var map = [:]; map[0]", null);
    testError("var map = [:]; map = 1", "cannot convert");
    testError("var list = []; list = 1", "cannot convert");

    test("def m = [a:1]", Utils.mapOf("a",1));
    test("def m = [1]", Utils.listOf(1));
    test("def m = [a:1]; m.a", 1);
    test("def m = [a:1]; m.b", null);
    test("def m = [a:[b:2]]; m.a.b", 2);
    test("def m = [a:[b:2]]; m?.a?.b", 2);
    test("def m = [a:[b:2]]; m?['a']?['b']", 2);
    test("def m = [a:[b:2]]; m?['a'].b", 2);
    test("def m = [a:[b:2]]; m.a.x?.y", null);
    testError("def m = [a:[b:2]]; m.a.x?.y.z", "null value");

    test("def x = [1,2,3]", Utils.listOf(1,2,3));
    test("def x = []", Utils.listOf());
    test("def x = []; x[0]", null);
    test("def x = [1,2,3][4]; x", null);
    test("def x = [1,2,3]; x[1]", 2);
    test("List x = [1,2,3]; x[-1]", 3);
    test("def x = [1,2,3]; x[-1]", 3);
    test("List x = [1,2,3]; x[-3]", 1);
    test("[1,2,3].map{ sleep(0,it) }[-3]", 1);
    test("def x = [1,2,3]; x[-3]", 1);
    testError("List x = [1,2,3]; x[-4]", "out of range");
    testError("def x = [1,2,3]; x[-4]", "out of range");
    testError("def x = []; x[-1]", "out of range");
    test("def x = []; def y = 7; x[y + y * y - y]", null);
    test("def x = [1,2,3,4]; def y = 7; x[y + y * y - y * y - 5]", 3);
    test("def x = [0,1,2,3,4]; def y = [a:7]; x[--y.a - y.a-- + --y.a - 3]", 1);
    test("def x = [0,1,2,3,4]; def y = [a:7.0]; x[--y.a - y.a-- + --y.a - 3]", 1);
    test("def x = [0,1,2,3,4]; def y = [a:7.5]; x[--y.a - y.a-- + --y.a - 3]", 1);
    test("def x = [0,1,2,3,4]; def y = [a:7.5D]; x[--y.a - y.a-- + --y.a - 3]", 1);
    test("def x = [0,1,2,3,4]; def y = [a:7L]; x[--y.a - y.a-- + --y.a - 3]", 1);
    test("def x = [0,[1,2,3],4]; def y = 2; x[1 + y + 3 - y - 3][y/2]", 2);

    test("def x = [1,2,3]; def y = [2,3]; x == y", false);
    test("def x = [1,2,3]; def y = [1,2,3]; x == y", true);
    test("def x = [a:1,b:2,c:3]; def y = [b:2,c:3]; x == y", false);
    test("def x = [a:1,b:2,c:3]; def y = [b:2,a:1,c:3]; x == y", true);
    test("[1,2,3] == [2,3]", false);
    test("[1,2,3] == [1,2,3]", true);
    test("[1,2,3] == [1,2L,3]", true);
    test("[1,2,3] == [1,2D,3]", true);
    test("[1,2,3] == [1,2 as Decimal,3]", true);
    test("[1,2,3] == [1,(byte)2,3]", true);
    test("[a:1,b:2,c:3] == [b:2,c:3]", false);
    test("[a:1,b:2,c:3] == [b:2L,c:3]", false);
    test("[a:1,b:2,c:3] == [b:2D,c:3]", false);
    test("[a:1,b:2,c:3] == [b:2 as Decimal,c:3]", false);
    test("[a:1,b:2,c:3] == [b:(byte)2,c:3]", false);
    test("[a:1,b:2,c:3] == [b:2,a:1,c:3]", true);

    test("def x = [1,2,3]; x == [1,2L,3]", true);
    test("def x = [1,2,3]; x == [1,2D,3]", true);
    test("def x = [1,2,3]; x == [1,2 as Decimal,3]", true);
    test("def x = [1,2,3]; x == [1,(byte)2,3]", true);
    test("def x = [a:1,b:2,c:3]; x == [b:2,c:3]", false);
    test("def x = [a:1,b:2,c:3]; x == [b:2L,c:3]", false);
    test("def x = [a:1,b:2,c:3]; x == [b:2D,c:3]", false);
    test("def x = [a:1,b:2,c:3]; x == [b:2 as Decimal,c:3]", false);
    test("def x = [a:1,b:2,c:3]; x == [b:(byte)2,c:3]", false);
    test("def x = [1,2,3]; def y = [2,3]; x != y", true);
    test("def x = [1,2,3]; def y = [1,2,3]; x != y", false);
    test("def x = [a:1,b:2,c:3]; def y = [b:2,c:3]; x != y", true);
    test("def x = [a:1,b:2,c:3]; def y = [b:2,a:1,c:3]; x != y", false);
    test("[1,2,3] != [2,3]", true);
    test("[1,2,3] != [1,2,3]", false);
    test("[a:1,b:2,c:3] != [b:2,c:3]", true);
    test("[a:1,b:2,c:3] != [b:2,a:1,c:3]", false);
    test("def x = [a:1]; x['a']", 1);
    test("def x = [a:1]; x['a'] = 2; x.a", 2);
    test("def x = [a:1]; def f = 'a'; x[f]", 1);
    test("def x = [a:1]; def f = 'a'; x[f] = 2; x.a", 2);
    test("Map x = [a:1]; x['a']", 1);
    test("Map x = [a:1]; x['a'] = 2; x.a", 2);
    test("Map x = [a:1]; def f = 'a'; x[f]", 1);
    test("Map x = [a:1]; def f = 'a'; x[f] = 2; x.a", 2);
    test("[a:1,b:2].map{ it[-1] }", Utils.listOf(1,2));
    test("[a:1,b:2].map{ it[-2] }", Utils.listOf("a","b"));
    testError("[a:1,b:2].map{ it[-3] }", "out of range");
    test("[for:1].for", 1);
    test("[true:1].true", 1);
  }

  @Test public void arrayIndexOutOfBounds() {
    testError("boolean[] a = new boolean[0]; a[0] = 1; a[0]", "array index out of bounds: 0");
    testError("boolean[] a = new boolean[0]; a[-1] = 1; a[0]", "array index out of bounds: -1");
    testError("boolean[] a = new boolean[0]; int i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("boolean[] a = new boolean[0]; int i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("boolean[] a = new boolean[0]; long i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("boolean[] a = new boolean[0]; long i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("boolean[] a = new boolean[0]; double i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("boolean[] a = new boolean[0]; double i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("boolean[] a = new boolean[0]; Decimal i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("boolean[] a = new boolean[0]; Decimal i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("byte[] a = new int[0]; def i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("byte[] a = new int[0]; def i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("byte[] a = new int[0]; a[0] = 1; a[0]", "array index out of bounds");
    testError("byte[] a = new int[0]; a[-1] = 1; a[0]", "array index out of bounds");
    testError("byte[] a = new int[0]; int i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("byte[] a = new int[0]; int i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("byte[] a = new int[0]; long i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("byte[] a = new int[0]; long i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("byte[] a = new int[0]; double i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("byte[] a = new int[0]; double i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("byte[] a = new int[0]; Decimal i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("byte[] a = new int[0]; Decimal i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("byte[] a = new int[0]; def i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("byte[] a = new int[0]; def i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("int[] a = new int[0]; def i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("int[] a = new int[0]; def i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("int[] a = new int[0]; a[0] = 1; a[0]", "array index out of bounds");
    testError("int[] a = new int[0]; a[-1] = 1; a[0]", "array index out of bounds");
    testError("int[] a = new int[0]; int i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("int[] a = new int[0]; int i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("int[] a = new int[0]; long i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("int[] a = new int[0]; long i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("int[] a = new int[0]; double i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("int[] a = new int[0]; double i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("int[] a = new int[0]; Decimal i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("int[] a = new int[0]; Decimal i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("int[] a = new int[0]; def i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("int[] a = new int[0]; def i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("long[] a = new long[0]; a[0] = 1; a[0]", "array index out of bounds");
    testError("long[] a = new long[0]; a[-1] = 1; a[0]", "array index out of bounds");
    testError("long[] a = new long[0]; int i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("long[] a = new long[0]; int i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("long[] a = new long[0]; long i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("long[] a = new long[0]; long i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("long[] a = new long[0]; double i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("long[] a = new long[0]; double i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("long[] a = new long[0]; Decimal i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("long[] a = new long[0]; Decimal i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("long[] a = new long[0]; def i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("long[] a = new long[0]; def i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("double[] a = new double[0]; a[0] = 1; a[0]", "array index out of bounds");
    testError("double[] a = new double[0]; a[-1] = 1; a[0]", "array index out of bounds");
    testError("double[] a = new double[0]; int i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("double[] a = new double[0]; int i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("double[] a = new double[0]; long i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("double[] a = new double[0]; long i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("double[] a = new double[0]; double i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("double[] a = new double[0]; double i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("double[] a = new double[0]; Decimal i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("double[] a = new double[0]; Decimal i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("double[] a = new double[0]; def i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("double[] a = new double[0]; def i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("Decimal[] a = new Decimal[0]; a[0] = 1; a[0]", "array index out of bounds");
    testError("Decimal[] a = new Decimal[0]; a[-1] = 1; a[0]", "array index out of bounds");
    testError("Decimal[] a = new Decimal[0]; int i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("Decimal[] a = new Decimal[0]; int i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("Decimal[] a = new Decimal[0]; long i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("Decimal[] a = new Decimal[0]; long i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("Decimal[] a = new Decimal[0]; Decimal i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("Decimal[] a = new Decimal[0]; Decimal i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("Decimal[] a = new Decimal[0]; Decimal i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("Decimal[] a = new Decimal[0]; Decimal i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("Decimal[] a = new Decimal[0]; def i = 0; a[i] = 1; a[0]", "array index out of bounds");
    testError("Decimal[] a = new Decimal[0]; def i = -1; a[i] = 1; a[0]", "array index out of bounds");
    testError("String[] a = new String[0]; a[0] = 'abc'; a[0]", "array index out of bounds");
    testError("String[] a = new String[0]; a[-1] = 'abc'; a[0]", "array index out of bounds");
    testError("String[] a = new String[0]; int i = 0; a[i] = 'abc'; a[0]", "array index out of bounds");
    testError("String[] a = new String[0]; int i = -1; a[i] = 'abc'; a[0]", "array index out of bounds");
    testError("String[] a = new String[0]; long i = 0; a[i] = 'abc'; a[0]", "array index out of bounds");
    testError("String[] a = new String[0]; long i = -1; a[i] = 'abc'; a[0]", "array index out of bounds");
    testError("String[] a = new String[0]; double i = 0; a[i] = 'abc'; a[0]", "array index out of bounds");
    testError("String[] a = new String[0]; double i = -1; a[i] = 'abc'; a[0]", "array index out of bounds");
    testError("String[] a = new String[0]; Decimal i = 0; a[i] = 'abc'; a[0]", "array index out of bounds");
    testError("String[] a = new String[0]; Decimal i = -1; a[i] = 'abc'; a[0]", "array index out of bounds");
    testError("String[] a = new String[0]; def i = 0; a[i] = 'abc'; a[0]", "array index out of bounds");
    testError("String[] a = new String[0]; def i = -1; a[i] = 'abc'; a[0]", "array index out of bounds");
    testError("boolean[] a; a[0] = 1; a[0]", "null value for array");
    testError("byte[] a; int i = 0; a[i] = 1; a[0]", "null value for array");
    testError("int[] a; int i = 0; a[i] = 1; a[0]", "null value for array");
    testError("long[] a; a[0] = 1; a[0]", "null value for array");
    testError("double[] a; a[0] = 1; a[0]", "null value for array");
    testError("Decimal[] a; a[-1] = 1; a[0]", "null value for array");
    testError("String[] a; a[0] = 'abc'; a[0]", "null value for array");
  }

  @Test public void intArrays() {
    test("int[] a = new int[10]; def i = 0; a[i] = 3; a[i]", 3);
    test("int[] a = new int[10]; def i = -1; a[i] = 3; a[i]", 3);
    test("int[] a = new int[10]; a[0] = 3; a[0]", 3);
    test("int[] a = new int[10]; a[-1] = 3; a[-1]", 3);
    test("int[] a = new int[10]; int i = 0; a[i] = 3; a[i]", 3);
    test("int[] a = new int[10]; int i = -1; a[i] = 3; a[i]", 3);
    test("int[] a = new int[10]; long i = 0; a[i] = 3; a[i]", 3);
    test("int[] a = new int[10]; long i = -1; a[i] = 3; a[i]", 3);
    test("int[] a = new int[10]; double i = 0; a[i] = 3; a[i]", 3);
    test("int[] a = new int[10]; double i = -1; a[i] = 3; a[i]", 3);
    test("int[] a = new int[10]; Decimal i = 0; a[i] = 3; a[i]", 3);
    test("int[] a = new int[10]; Decimal i = -1; a[i] = 3; a[i]", 3);
    test("int[] a = new int[10]; def i = 0; a[i] = 3; a[i]", 3);
    test("int[] a = new int[10]; def i = -1; a[i] = 3; a[i]", 3);
    test("def x = 3.2D; int[] a = new int[10]; def i = 0; a[i] = x; a[i]", 3);
    test("def x = 3.2D; int[] a = new int[10]; def i = -1; a[i] = x; a[i]", 3);
    test("def x = 3.2D; int[] a = new int[10]; a[0] = x; a[0]", 3);
    test("def x = 3.2D; int[] a = new int[10]; a[-1] = x; a[-1]", 3);
    test("def x = 3.2D; int[] a = new int[10]; int i = 0; a[i] = x; a[i]", 3);
    test("def x = 3.2D; int[] a = new int[10]; int i = -1; a[i] = x; a[i]", 3);
    test("def x = 3.2D; int[] a = new int[10]; long i = 0; a[i] = x; a[i]", 3);
    test("def x = 3.2D; int[] a = new int[10]; long i = -1; a[i] = x; a[i]", 3);
    test("def x = 3.2D; int[] a = new int[10]; double i = 0; a[i] = x; a[i]", 3);
    test("def x = 3.2D; int[] a = new int[10]; double i = -1; a[i] = x; a[i]", 3);
    test("def x = 3.2D; int[] a = new int[10]; Decimal i = 0; a[i] = x; a[i]", 3);
    test("def x = 3.2D; int[] a = new int[10]; Decimal i = -1; a[i] = x; a[i]", 3);
    test("def x = 3.2D; int[] a = new int[10]; def i = 0; a[i] = x; a[i]", 3);
    test("def x = 3.2D; int[] a = new int[10]; def i = -1; a[i] = x; a[i]", 3);
    test("def a = new int[10]; def i = 0; a[i] = 3; a[i]", 3);
    test("def a = new int[10]; def i = -1; a[i] = 3; a[i]", 3);
    test("def a = new int[10]; a[0] = 3; a[0]", 3);
    test("def a = new int[10]; a[-1] = 3; a[-1]", 3);
    test("def a = new int[10]; int i = 0; a[i] = 3; a[i]", 3);
    test("def a = new int[10]; int i = -1; a[i] = 3; a[i]", 3);
    test("def a = new int[10]; long i = 0; a[i] = 3; a[i]", 3);
    test("def a = new int[10]; long i = -1; a[i] = 3; a[i]", 3);
    test("def a = new int[10]; double i = 0; a[i] = 3; a[i]", 3);
    test("def a = new int[10]; double i = -1; a[i] = 3; a[i]", 3);
    test("def a = new int[10]; Decimal i = 0; a[i] = 3; a[i]", 3);
    test("def a = new int[10]; Decimal i = -1; a[i] = 3; a[i]", 3);
    test("def a = new int[10]; def i = 0; a[i] = 3; a[i]", 3);
    test("def a = new int[10]; def i = -1; a[i] = 3; a[i]", 3);
    test("def x = 3.2D; def a = new int[10]; def i = 0; a[i] = x; a[i]", 3);
    test("def x = 3.2D; def a = new int[10]; def i = -1; a[i] = x; a[i]", 3);
    test("def x = 3.2D; def a = new int[10]; a[0] = x; a[0]", 3);
    test("def x = 3.2D; def a = new int[10]; a[-1] = x; a[-1]", 3);
    test("def x = 3.2D; def a = new int[10]; int i = 0; a[i] = x; a[i]", 3);
    test("def x = 3.2D; def a = new int[10]; int i = -1; a[i] = x; a[i]", 3);
    test("def x = 3.2D; def a = new int[10]; long i = 0; a[i] = x; a[i]", 3);
    test("def x = 3.2D; def a = new int[10]; long i = -1; a[i] = x; a[i]", 3);
    test("def x = 3.2D; def a = new int[10]; double i = 0; a[i] = x; a[i]", 3);
    test("def x = 3.2D; def a = new int[10]; double i = -1; a[i] = x; a[i]", 3);
    test("def x = 3.2D; def a = new int[10]; Decimal i = 0; a[i] = x; a[i]", 3);
    test("def x = 3.2D; def a = new int[10]; Decimal i = -1; a[i] = x; a[i]", 3);
    test("def x = 3.2D; def a = new int[10]; def i = 0; a[i] = x; a[i]", 3);
    test("def x = 3.2D; def a = new int[10]; def i = -1; a[i] = x; a[i]", 3);
    test("def a = new int[10]; a[0]", 0);
    test("int[] arr = new int[10]; for (int i = 0; i < 10; i++) { arr[i] = i }; long result = 0; for (int i = 0; i < 10; i++) { result += arr[i] }; result", 45L);
    test("int[] arr = new int[10]; 10.each{ arr[it] = it }; long result = 0; for (int i = 0; i < 10; i++) { result += arr[i] }; result", 45L);
    test("def arr = new int[10]; 10.each{ arr[it] = it }; long result = 0; for (int i = 0; i < 10; i++) { result += arr[i] }; result", 45L);
    test("def arr = new int[10]; 10.each{ arr[it] = it }; long result = 0; for (def i = 0; i < 10; i++) { result += arr[i] }; result", 45L);
    testError("int[] a = new int[10]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "cannot be cast to int");
    test("def a = new int[10]; def i = -1; def x = 'a'; a[i] = x; a[i]", 97);
    testError("def a = new int[10]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "cannot be cast");
    testError("def a = new int[10][4]; int[] b = a", "cannot convert");
    testError("int[][] a = new int[10][4]; int[] b = a", "cannot convert");
    test("var a = new int[10]; a[0] = 3; a[0]", 3);
    test("var a = new int[10]; a[-1] = 3; a[-1]", 3);
    test("var a = new int[10]; def i = 0; a[i] = 3; a[i]", 3);
    test("var a = new int[10]; def i = -1; a[i] = 3; a[i]", 3);
    test("var a = new int[1]; var x = a[0]; x instanceof int", true);
    test("var a = new int[1]; a instanceof int[]", true);
    test("def a = new int[1]; ((int[])a)[0]", 0);
    test("def a = new int[1]; ((int[])a)[0] instanceof int", true);
    test("int[] f() { [1,2,3] }; f() instanceof int[] and f().sum() == 6", true);
    test("([1,-2,3] as int[]).toString()", "[1, -2, 3]");
    test("([[1],[-2],[3]] as int[][]).toString()", "[[1], [-2], [3]]");
  }

  @Test public void nullArrays() {
    testError("int[] a; a[0] = 3; a[0]", "null value for array");
    testError("int[] a; a[0]", "null parent");
    testError("int[][] a = new int[3][]; a[0][1] = 3; a[0][1]", "null value for array");
    testError("int[][] a = new int[3][]; a[0][0]", "null parent");
  }

  @Test public void intArrayMultipleDimensions() {
    test("int[][] a = new int[10][4]; a[0][0]", 0);
    test("int[][] a = new int[10][4]; def i = 0; a[i][i] = 3; a[i][i]", 3);
    test("int[][] a = new int[10][4]; def i = -1; a[i][i] = 3; a[i][i]", 3);
    test("int[][] a = new int[10][4]; a[0][0] = 3; a[0][0]", 3);
    test("int[][] a = new int[10][4]; a[-1][-1] = 3; a[-1][-1]", 3);
    test("int[][] a = new int[10][4]; int i = 0; a[i][i] = 3; a[i][i]", 3);
    test("int[][] a = new int[10][4]; int i = -1; a[i][i] = 3; a[i][i]", 3);
    test("int[][] a = new int[10][4]; long i = 0; a[i][i] = 3; a[i][i]", 3);
    test("int[][] a = new int[10][4]; long i = -1; a[i][i] = 3; a[i][i]", 3);
    test("int[][] a = new int[10][4]; double i = 0; a[i][i] = 3; a[i][i]", 3);
    test("int[][] a = new int[10][4]; double i = -1; a[i][i] = 3; a[i][i]", 3);
    test("int[][] a = new int[10][4]; Decimal i = 0; a[i][i] = 3; a[i][i]", 3);
    test("int[][] a = new int[10][4]; Decimal i = -1; a[i][i] = 3; a[i][i]", 3);
    test("int[][] a = new int[10][4]; def i = 0; a[i][i] = 3; a[i][i]", 3);
    test("int[][] a = new int[10][4]; def i = -1; a[i][i] = 3; a[i][i]", 3);
    test("int[][] a = new int[10][]; a[-1] = new int[3]; def i = -1; a[i][i] = 3; a[9][2]", 3);
    test("def x = 3.2D; int[][] a = new int[10][4]; def i = 0; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; int[][] a = new int[10][4]; def i = -1; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; int[][] a = new int[10][4]; a[0][0] = x; a[0][0]", 3);
    test("def x = 3.2D; int[][] a = new int[10][4]; a[-1][-1] = x; a[-1][-1]", 3);
    test("def x = 3.2D; int[][] a = new int[10][4]; int i = 0; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; int[][] a = new int[10][4]; int i = -1; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; int[][] a = new int[10][4]; long i = 0; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; int[][] a = new int[10][4]; long i = -1; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; int[][] a = new int[10][4]; double i = 0; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; int[][] a = new int[10][4]; double i = -1; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; int[][] a = new int[10][4]; Decimal i = 0; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; int[][] a = new int[10][4]; Decimal i = -1; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; int[][] a = new int[10][4]; def i = 0; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; int[][] a = new int[10][4]; def i = -1; a[i][i] = x; a[i][i]", 3);
    test("def a = new int[10][4]; def i = 0; a[i][i] = 3; a[i][i]", 3);
    test("def a = new int[10][4]; def i = -1; a[i][i] = 3; a[i][i]", 3);
    test("def a = new int[10][4]; a[0][0] = 3; a[0][0]", 3);
    test("def a = new int[10][4]; a[-1][-1] = 3; a[-1][-1]", 3);
    test("def a = new int[10][4]; int i = 0; a[i][i] = 3; a[i][i]", 3);
    test("def a = new int[10][4]; int i = -1; a[i][i] = 3; a[i][i]", 3);
    test("def a = new int[10][4]; long i = 0; a[i][i] = 3; a[i][i]", 3);
    test("def a = new int[10][4]; long i = -1; a[i][i] = 3; a[i][i]", 3);
    test("def a = new int[10][4]; double i = 0; a[i][i] = 3; a[i][i]", 3);
    test("def a = new int[10][4]; double i = -1; a[i][i] = 3; a[i][i]", 3);
    test("def a = new int[10][4]; Decimal i = 0; a[i][i] = 3; a[i][i]", 3);
    test("def a = new int[10][4]; Decimal i = -1; a[i][i] = 3; a[i][i]", 3);
    test("def a = new int[10][4]; def i = 0; a[i][i] = 3; a[i][i]", 3);
    test("def a = new int[10][4]; def i = -1; a[i][i] = 3; a[i][i]", 3);
    test("def x = 3.2D; def a = new int[10][4]; def i = 0; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; def a = new int[10][4]; def i = -1; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; def a = new int[10][4]; a[0][0] = x; a[0][0]", 3);
    test("def x = 3.2D; def a = new int[10][4]; a[-1][-1] = x; a[-1][-1]", 3);
    test("def x = 3.2D; def a = new int[10][4]; int i = 0; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; def a = new int[10][4]; int i = -1; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; def a = new int[10][4]; long i = 0; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; def a = new int[10][4]; long i = -1; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; def a = new int[10][4]; double i = 0; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; def a = new int[10][4]; double i = -1; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; def a = new int[10][4]; Decimal i = 0; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; def a = new int[10][4]; Decimal i = -1; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; def a = new int[10][4]; def i = 0; a[i][i] = x; a[i][i]", 3);
    test("def x = 3.2D; def a = new int[10][4]; def i = -1; a[i][i] = x; a[i][i]", 3);
    testError("int[][] a = new int[]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "need a size");
    testError("int[][] a = new int[][]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "need a size");
    testError("int[][] a = new int[10][4][]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "cannot convert");
    testError("int[][][] a = new int[10][][4]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "unexpected token");
    testError("int[][] a = new int[10][]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "cannot cast");
    testError("int[][] a = new int[10][]; def i = -1; def x = 'abc'; a[i] = new int[4]; a[i][0] = x; a[i][0]", "cannot be cast to int");
    test("var a = new int[10][1]; a[0][0] = 3; a[0][0]", 3);
    test("var a = new int[10][1]; a[-1][0] = 3; a[-1][0]", 3);
    test("var a = new int[10][1]; def i = 0; a[i][0] = 3; a[i][0]", 3);
    test("var a = new int[10][1]; def i = -1; a[i][0] = 3; a[i][0]", 3);
    test("var a = new int[1][1]; var x = a[0][0]; x instanceof int", true);
    test("var a = new int[1][]; a instanceof int[][]", true);
    test("def a = new int[1][1]; ((int[][])a)[0][0]", 0);
    test("def a = new int[1][1]; ((int[][])a)[0] instanceof int[]", true);
    test("def a = new int[1][1]; ((int[][])a)[0][0] instanceof int", true);
//TO BE FIXED:    testError("[[1,2],[3,4]] as int[]", "xxx");
  }

  @Test public void byteArrays() {
    test("byte[] a = new byte[10]; def i = 0; a[i] = 3; a[i]", (byte)3);
    test("byte[] a = new byte[10]; def i = -1; a[i] = 3; a[i]", (byte)3);
    test("byte[] a = new byte[10]; a[0] = 3; a[0]", (byte)3);
    test("byte[] a = new byte[10]; a[-1] = 3; a[-1]", (byte)3);
    test("byte[] a = new byte[10]; int i = 0; a[i] = 3; a[i]", (byte)3);
    test("byte[] a = new byte[10]; int i = -1; a[i] = 3; a[i]", (byte)3);
    test("byte[] a = new byte[10]; long i = 0; a[i] = 3; a[i]", (byte)3);
    test("byte[] a = new byte[10]; long i = -1; a[i] = 3; a[i]", (byte)3);
    test("byte[] a = new byte[10]; double i = 0; a[i] = 3; a[i]", (byte)3);
    test("byte[] a = new byte[10]; double i = -1; a[i] = 3; a[i]", (byte)3);
    test("byte[] a = new byte[10]; Decimal i = 0; a[i] = 3; a[i]", (byte)3);
    test("byte[] a = new byte[10]; Decimal i = -1; a[i] = 3; a[i]", (byte)3);
    test("byte[] a = new byte[10]; def i = 0; a[i] = 3; a[i]", (byte)3);
    test("byte[] a = new byte[10]; def i = -1; a[i] = 3; a[i]", (byte)3);
    test("def x = 3.2D; byte[] a = new byte[10]; def i = 0; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; byte[] a = new byte[10]; def i = -1; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; byte[] a = new byte[10]; a[0] = x; a[0]", (byte)3);
    test("def x = 3.2D; byte[] a = new byte[10]; a[-1] = x; a[-1]", (byte)3);
    test("def x = 3.2D; byte[] a = new byte[10]; int i = 0; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; byte[] a = new byte[10]; int i = -1; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; byte[] a = new byte[10]; long i = 0; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; byte[] a = new byte[10]; long i = -1; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; byte[] a = new byte[10]; double i = 0; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; byte[] a = new byte[10]; double i = -1; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; byte[] a = new byte[10]; Decimal i = 0; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; byte[] a = new byte[10]; Decimal i = -1; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; byte[] a = new byte[10]; def i = 0; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; byte[] a = new byte[10]; def i = -1; a[i] = x; a[i]", (byte)3);
    test("def a = new byte[10]; def i = 0; a[i] = 3; a[i]", (byte)3);
    test("def a = new byte[10]; def i = -1; a[i] = 3; a[i]", (byte)3);
    test("def a = new byte[10]; a[0] = 3; a[0]", (byte)3);
    test("def a = new byte[10]; a[-1] = 3; a[-1]", (byte)3);
    test("def a = new byte[10]; int i = 0; a[i] = 3; a[i]", (byte)3);
    test("def a = new byte[10]; int i = -1; a[i] = 3; a[i]", (byte)3);
    test("def a = new byte[10]; long i = 0; a[i] = 3; a[i]", (byte)3);
    test("def a = new byte[10]; long i = -1; a[i] = 3; a[i]", (byte)3);
    test("def a = new byte[10]; double i = 0; a[i] = 3; a[i]", (byte)3);
    test("def a = new byte[10]; double i = -1; a[i] = 3; a[i]", (byte)3);
    test("def a = new byte[10]; Decimal i = 0; a[i] = 3; a[i]", (byte)3);
    test("def a = new byte[10]; Decimal i = -1; a[i] = 3; a[i]", (byte)3);
    test("def a = new byte[10]; def i = 0; a[i] = 3; a[i]", (byte)3);
    test("def a = new byte[10]; def i = -1; a[i] = 3; a[i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10]; def i = 0; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10]; def i = -1; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10]; a[0] = x; a[0]", (byte)3);
    test("def x = 3.2D; def a = new byte[10]; a[-1] = x; a[-1]", (byte)3);
    test("def x = 3.2D; def a = new byte[10]; int i = 0; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10]; int i = -1; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10]; long i = 0; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10]; long i = -1; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10]; double i = 0; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10]; double i = -1; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10]; Decimal i = 0; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10]; Decimal i = -1; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10]; def i = 0; a[i] = x; a[i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10]; def i = -1; a[i] = x; a[i]", (byte)3);
    test("def a = new byte[10]; a[0]", (byte)0);
    test("byte[] arr = new byte[10]; for (int i = 0; i < 10; i++) { arr[i] = i }; long result = 0; for (int i = 0; i < 10; i++) { result += arr[i] }; result", 45L);
    test("byte[] arr = new byte[10]; 10.each{ arr[it] = it }; long result = 0; for (int i = 0; i < 10; i++) { result += arr[i] }; result", 45L);
    test("def arr = new byte[10]; 10.each{ arr[it] = it }; long result = 0; for (int i = 0; i < 10; i++) { result += arr[i] }; result", 45L);
    test("def arr = new byte[10]; 10.each{ arr[it] = it }; long result = 0; for (def i = 0; i < 10; i++) { result += arr[i] }; result", 45L);
    testError("byte[] a = new byte[10]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "cannot be cast to byte");
    testError("def a = new byte[10]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "cannot be cast to byte");
    testError("def a = new byte[10][4]; byte[] b = a", "cannot convert");
    testError("byte[][] a = new byte[10][4]; byte[] b = a", "cannot convert");
    test("var a = new byte[10]; a[0] = 3; a[0]", (byte)3);
    test("var a = new byte[10]; a[-1] = 3; a[-1]", (byte)3);
    test("var a = new byte[10]; def i = 0; a[i] = 3; a[i]", (byte)3);
    test("var a = new byte[10]; def i = -1; a[i] = 3; a[i]", (byte)3);
    test("var a = new byte[1]; var x = a[0]; x instanceof byte", true);
    test("var a = new byte[1]; a instanceof byte[]", true);
    test("def a = new byte[1]; ((byte[])a)[0]", (byte)0);
    test("def a = new byte[1]; ((byte[])a)[0] instanceof byte", true);
    test("byte[] f() { [1,2,3] }; f() instanceof byte[] and f().sum() == 6", true);
    test("byte[] b; def x = 'abc'; b = x", new byte[]{97,98,99});
    test("byte[] b = 'abc'", new byte[]{97,98,99});
    test("byte[][] b = new byte[10][]; b[0] = 'abc'", new byte[]{97,98,99});
    test("String s = [97,98,99] as byte[]", "abc");
    test("String s; def x = [97,98,99] as byte[]; s = x", "abc");
    test("([1,-2,3] as byte[]).toString()", "[1, 254, 3]");
    test("([[1],[-2],[3]] as byte[][]).toString()", "[[1], [254], [3]]");
  }

  @Test public void nullByteArrays() {
    testError("byte[] a; a[0] = 3; a[0]", "null value for array");
    testError("byte[] a; a[0]", "null parent");
    testError("byte[][] a = new byte[3][]; a[0][1] = 3; a[0][1]", "null value for array");
    testError("byte[][] a = new byte[3][]; a[0][0]", "null parent");
  }

  @Test public void byteArrayMultipleDimensions() {
    test("byte[][] a = new byte[10][4]; a[0][0]", (byte)0);
    test("byte[][] a = new byte[10][4]; def i = 0; a[i][i] = 3; a[i][i]", (byte)3);
    test("byte[][] a = new byte[10][4]; def i = -1; a[i][i] = 3; a[i][i]", (byte)3);
    test("byte[][] a = new byte[10][4]; a[0][0] = 3; a[0][0]", (byte)3);
    test("byte[][] a = new byte[10][4]; a[-1][-1] = 3; a[-1][-1]", (byte)3);
    test("byte[][] a = new byte[10][4]; int i = 0; a[i][i] = 3; a[i][i]", (byte)3);
    test("byte[][] a = new byte[10][4]; int i = -1; a[i][i] = 3; a[i][i]", (byte)3);
    test("byte[][] a = new byte[10][4]; long i = 0; a[i][i] = 3; a[i][i]", (byte)3);
    test("byte[][] a = new byte[10][4]; long i = -1; a[i][i] = 3; a[i][i]", (byte)3);
    test("byte[][] a = new byte[10][4]; double i = 0; a[i][i] = 3; a[i][i]", (byte)3);
    test("byte[][] a = new byte[10][4]; double i = -1; a[i][i] = 3; a[i][i]", (byte)3);
    test("byte[][] a = new byte[10][4]; Decimal i = 0; a[i][i] = 3; a[i][i]", (byte)3);
    test("byte[][] a = new byte[10][4]; Decimal i = -1; a[i][i] = 3; a[i][i]", (byte)3);
    test("byte[][] a = new byte[10][4]; def i = 0; a[i][i] = 3; a[i][i]", (byte)3);
    test("byte[][] a = new byte[10][4]; def i = -1; a[i][i] = 3; a[i][i]", (byte)3);
    test("byte[][] a = new byte[10][]; a[-1] = new byte[3]; def i = -1; a[i][i] = 3; a[9][2]", (byte)3);
    test("def x = 3.2D; byte[][] a = new byte[10][4]; def i = 0; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; byte[][] a = new byte[10][4]; def i = -1; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; byte[][] a = new byte[10][4]; a[0][0] = x; a[0][0]", (byte)3);
    test("def x = 3.2D; byte[][] a = new byte[10][4]; a[-1][-1] = x; a[-1][-1]", (byte)3);
    test("def x = 3.2D; byte[][] a = new byte[10][4]; int i = 0; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; byte[][] a = new byte[10][4]; int i = -1; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; byte[][] a = new byte[10][4]; long i = 0; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; byte[][] a = new byte[10][4]; long i = -1; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; byte[][] a = new byte[10][4]; double i = 0; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; byte[][] a = new byte[10][4]; double i = -1; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; byte[][] a = new byte[10][4]; Decimal i = 0; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; byte[][] a = new byte[10][4]; Decimal i = -1; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; byte[][] a = new byte[10][4]; def i = 0; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; byte[][] a = new byte[10][4]; def i = -1; a[i][i] = x; a[i][i]", (byte)3);
    test("def a = new byte[10][4]; def i = 0; a[i][i] = 3; a[i][i]", (byte)3);
    test("def a = new byte[10][4]; def i = -1; a[i][i] = 3; a[i][i]", (byte)3);
    test("def a = new byte[10][4]; a[0][0] = 3; a[0][0]", (byte)3);
    test("def a = new byte[10][4]; a[-1][-1] = 3; a[-1][-1]", (byte)3);
    test("def a = new byte[10][4]; int i = 0; a[i][i] = 3; a[i][i]", (byte)3);
    test("def a = new byte[10][4]; int i = -1; a[i][i] = 3; a[i][i]", (byte)3);
    test("def a = new byte[10][4]; long i = 0; a[i][i] = 3; a[i][i]", (byte)3);
    test("def a = new byte[10][4]; long i = -1; a[i][i] = 3; a[i][i]", (byte)3);
    test("def a = new byte[10][4]; double i = 0; a[i][i] = 3; a[i][i]", (byte)3);
    test("def a = new byte[10][4]; double i = -1; a[i][i] = 3; a[i][i]", (byte)3);
    test("def a = new byte[10][4]; Decimal i = 0; a[i][i] = 3; a[i][i]", (byte)3);
    test("def a = new byte[10][4]; Decimal i = -1; a[i][i] = 3; a[i][i]", (byte)3);
    test("def a = new byte[10][4]; def i = 0; a[i][i] = 3; a[i][i]", (byte)3);
    test("def a = new byte[10][4]; def i = -1; a[i][i] = 3; a[i][i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10][4]; def i = 0; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10][4]; def i = -1; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10][4]; a[0][0] = x; a[0][0]", (byte)3);
    test("def x = 3.2D; def a = new byte[10][4]; a[-1][-1] = x; a[-1][-1]", (byte)3);
    test("def x = 3.2D; def a = new byte[10][4]; int i = 0; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10][4]; int i = -1; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10][4]; long i = 0; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10][4]; long i = -1; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10][4]; double i = 0; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10][4]; double i = -1; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10][4]; Decimal i = 0; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10][4]; Decimal i = -1; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10][4]; def i = 0; a[i][i] = x; a[i][i]", (byte)3);
    test("def x = 3.2D; def a = new byte[10][4]; def i = -1; a[i][i] = x; a[i][i]", (byte)3);
    testError("byte[][] a = new byte[]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "need a size");
    testError("byte[][] a = new byte[][]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "need a size");
    testError("byte[][] a = new byte[10][4][]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "cannot convert");
    testError("byte[][][] a = new byte[10][][4]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "unexpected token");
    //testError("byte[][] a = new byte[10][]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "cannot cast");
    testError("byte[][] a = new byte[10][]; def i = -1; def x = 'abc'; a[i] = new byte[4]; a[i][0] = x; a[i][0]", "cannot be cast to byte");
    test("var a = new byte[10][1]; a[0][0] = 3; a[0][0]", (byte)3);
    test("var a = new byte[10][1]; a[-1][0] = 3; a[-1][0]", (byte)3);
    test("var a = new byte[10][1]; def i = 0; a[i][0] = 3; a[i][0]", (byte)3);
    test("var a = new byte[10][1]; def i = -1; a[i][0] = 3; a[i][0]", (byte)3);
    test("var a = new byte[1][1]; var x = a[0][0]; x instanceof byte", true);
    test("var a = new byte[1][]; a instanceof byte[][]", true);
    test("def a = new byte[1][1]; ((byte[][])a)[0][0]", (byte)0);
    test("def a = new byte[1][1]; ((byte[][])a)[0] instanceof byte[]", true);
    test("def a = new byte[1][1]; ((byte[][])a)[0][0] instanceof byte", true);
  }

  @Test public void longArrays() {
    test("long[] a = new long[10]; def i = 0; a[i] = 3; a[i]", 3L);
    test("long[] a = new long[10]; def i = -1; a[i] = 3; a[i]", 3L);
    test("long[] a = new long[10]; a[0] = 3; a[0]", 3L);
    test("long[] a = new long[10]; a[-1] = 3; a[-1]", 3L);
    test("long[] a = new long[10]; int i = 0; a[i] = 3; a[i]", 3L);
    test("long[] a = new long[10]; int i = -1; a[i] = 3; a[i]", 3L);
    test("long[] a = new long[10]; long i = 0; a[i] = 3; a[i]", 3L);
    test("long[] a = new long[10]; long i = -1; a[i] = 3; a[i]", 3L);
    test("long[] a = new long[10]; double i = 0; a[i] = 3; a[i]", 3L);
    test("long[] a = new long[10]; double i = -1; a[i] = 3; a[i]", 3L);
    test("long[] a = new long[10]; Decimal i = 0; a[i] = 3; a[i]", 3L);
    test("long[] a = new long[10]; Decimal i = -1; a[i] = 3; a[i]", 3L);
    test("long[] a = new long[10]; def i = 0; a[i] = 3; a[i]", 3L);
    test("long[] a = new long[10]; def i = -1; a[i] = 3; a[i]", 3L);
    testError("long[] a = new long[10]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "cannot be cast");
    test("def a = new long[10]; def i = -1; def x = 'a'; a[i] = x; a[i]", 97L);
    testError("def a = new long[10]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "cannot be cast");
    test("def x = 3.2D; long[] a = new long[10]; def i = 0; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; long[] a = new long[10]; def i = -1; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; long[] a = new long[10]; a[0] = x; a[0]", 3L);
    test("def x = 3.2D; long[] a = new long[10]; a[-1] = x; a[-1]", 3L);
    test("def x = 3.2D; long[] a = new long[10]; int i = 0; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; long[] a = new long[10]; int i = -1; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; long[] a = new long[10]; long i = 0; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; long[] a = new long[10]; long i = -1; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; long[] a = new long[10]; double i = 0; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; long[] a = new long[10]; double i = -1; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; long[] a = new long[10]; Decimal i = 0; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; long[] a = new long[10]; Decimal i = -1; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; long[] a = new long[10]; def i = 0; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; long[] a = new long[10]; def i = -1; a[i] = x; a[i]", 3L);
    test("def a = new long[10]; def i = 0; a[i] = 3; a[i]", 3L);
    test("def a = new long[10]; def i = -1; a[i] = 3; a[i]", 3L);
    test("def a = new long[10]; a[0] = 3; a[0]", 3L);
    test("def a = new long[10]; a[-1] = 3; a[-1]", 3L);
    test("def a = new long[10]; int i = 0; a[i] = 3; a[i]", 3L);
    test("def a = new long[10]; int i = -1; a[i] = 3; a[i]", 3L);
    test("def a = new long[10]; long i = 0; a[i] = 3; a[i]", 3L);
    test("def a = new long[10]; long i = -1; a[i] = 3; a[i]", 3L);
    test("def a = new long[10]; double i = 0; a[i] = 3; a[i]", 3L);
    test("def a = new long[10]; double i = -1; a[i] = 3; a[i]", 3L);
    test("def a = new long[10]; Decimal i = 0; a[i] = 3; a[i]", 3L);
    test("def a = new long[10]; Decimal i = -1; a[i] = 3; a[i]", 3L);
    test("def a = new long[10]; def i = 0; a[i] = 3; a[i]", 3L);
    test("def a = new long[10]; def i = -1; a[i] = 3; a[i]", 3L);
    test("def x = 3.2D; def a = new long[10]; def i = 0; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; def a = new long[10]; def i = -1; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; def a = new long[10]; a[0] = x; a[0]", 3L);
    test("def x = 3.2D; def a = new long[10]; a[-1] = x; a[-1]", 3L);
    test("def x = 3.2D; def a = new long[10]; int i = 0; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; def a = new long[10]; int i = -1; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; def a = new long[10]; long i = 0; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; def a = new long[10]; long i = -1; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; def a = new long[10]; double i = 0; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; def a = new long[10]; double i = -1; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; def a = new long[10]; Decimal i = 0; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; def a = new long[10]; Decimal i = -1; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; def a = new long[10]; def i = 0; a[i] = x; a[i]", 3L);
    test("def x = 3.2D; def a = new long[10]; def i = -1; a[i] = x; a[i]", 3L);
    test("long[] arr = new long[10]; for (int i = 0; i < 10; i++) { arr[i] = i }; long result = 0; for (int i = 0; i < 10; i++) { result += arr[i] }; result", 45L);
    test("long[] arr = new long[10]; 10.each{ arr[it] = it }; long result = 0; for (int i = 0; i < 10; i++) { result += arr[i] }; result", 45L);
    test("def arr = new long[10]; 10.each{ arr[it] = it }; long result = 0; for (int i = 0; i < 10; i++) { result += arr[i] }; result", 45L);
    test("def arr = new long[10]; 10.each{ arr[it] = it }; long result = 0; for (def i = 0; i < 10; i++) { result += arr[i] }; result", 45L);
    test("var a = new long[10]; a[0]", 0L);
    test("var a = new long[10]; a[0] = 3; a[0]", 3L);
    test("var a = new long[10]; a[-1] = 3; a[-1]", 3L);
    test("var a = new long[10]; def i = 0; a[i] = 3; a[i]", 3L);
    test("var a = new long[10]; def i = -1; a[i] = 3; a[i]", 3L);
    test("var a = new long[1];  var x = a[0]; x instanceof long", true);
    test("([1,-2,3] as long[]).toString()", "[1, -2, 3]");
    test("([[1],[-2],[3]] as long[][]).toString()", "[[1], [-2], [3]]");
  }

  @Test public void longArrayMultipleDimensionsErrors() {
    testError("long[][] a = new long[{ -> 7}][-4]; a[0][0]", "cannot convert");
    testError("long[][] a = new long[10][-4]; a[0][0]", "negative");
    testError("long[][] a = new long[]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "need a size");
    testError("long[][] a = new long[][]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "need a size");
    testError("long[][] a = new long[10][4][]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "cannot convert");
    testError("long[][][] a = new long[10][][4]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "unexpected token");
    testError("long[][] a = new long[10][]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "cannot cast");
    testError("long[][] a = new long[10][]; def i = -1; def x = 'abc'; a[i] = new long[4]; a[i][0] = x; a[i][0]", "cannot be cast");
  }

  @Test public void longArrayMultipleDimensions() {
    test("long[][] a = new long[10][4]; a[0][0]", 0L);
    test("long[][] a = new long[10][4]; def i = 0; a[i][i] = 3; a[i][i]", 3L);
    test("long[][] a = new long[10][4]; def i = -1; a[i][i] = 3; a[i][i]", 3L);
    test("long[][] a = new long[10][4]; a[0][0] = 3; a[0][0]", 3L);
    test("long[][] a = new long[10][4]; a[-1][-1] = 3; a[-1][-1]", 3L);
    test("long[][] a = new long[10][4]; int i = 0; a[i][i] = 3; a[i][i]", 3L);
    test("long[][] a = new long[10][4]; int i = -1; a[i][i] = 3; a[i][i]", 3L);
    test("long[][] a = new long[10][4]; long i = 0; a[i][i] = 3; a[i][i]", 3L);
    test("long[][] a = new long[10][4]; long i = -1; a[i][i] = 3; a[i][i]", 3L);
    test("long[][] a = new long[10][4]; double i = 0; a[i][i] = 3; a[i][i]", 3L);
    test("long[][] a = new long[10][4]; double i = -1; a[i][i] = 3; a[i][i]", 3L);
    test("long[][] a = new long[10][4]; Decimal i = 0; a[i][i] = 3; a[i][i]", 3L);
    test("long[][] a = new long[10][4]; Decimal i = -1; a[i][i] = 3; a[i][i]", 3L);
    test("long[][] a = new long[10][4]; def i = 0; a[i][i] = 3; a[i][i]", 3L);
    test("long[][] a = new long[10][4]; def i = -1; a[i][i] = 3; a[i][i]", 3L);
    test("long[][] a = new long[10][]; a[-1] = new long[3]; def i = -1; a[i][i] = 3; a[9][2]", 3L);
    test("def x = 3.2D; long[][] a = new long[10][4]; def i = 0; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; long[][] a = new long[10][4]; def i = -1; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; long[][] a = new long[10][4]; a[0][0] = x; a[0][0]", 3L);
    test("def x = 3.2D; long[][] a = new long[10][4]; a[-1][-1] = x; a[-1][-1]", 3L);
    test("def x = 3.2D; long[][] a = new long[10][4]; int i = 0; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; long[][] a = new long[10][4]; int i = -1; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; long[][] a = new long[10][4]; long i = 0; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; long[][] a = new long[10][4]; long i = -1; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; long[][] a = new long[10][4]; double i = 0; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; long[][] a = new long[10][4]; double i = -1; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; long[][] a = new long[10][4]; Decimal i = 0; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; long[][] a = new long[10][4]; Decimal i = -1; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; long[][] a = new long[10][4]; def i = 0; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; long[][] a = new long[10][4]; def i = -1; a[i][i] = x; a[i][i]", 3L);
    test("def a = new long[10][4]; def i = 0; a[i][i] = 3; a[i][i]", 3L);
    test("def a = new long[10][4]; def i = -1; a[i][i] = 3; a[i][i]", 3L);
    test("def a = new long[10][4]; a[0][0] = 3; a[0][0]", 3L);
    test("def a = new long[10][4]; a[-1][-1] = 3; a[-1][-1]", 3L);
    test("def a = new long[10][4]; int i = 0; a[i][i] = 3; a[i][i]", 3L);
    test("def a = new long[10][4]; int i = -1; a[i][i] = 3; a[i][i]", 3L);
    test("def a = new long[10][4]; long i = 0; a[i][i] = 3; a[i][i]", 3L);
    test("def a = new long[10][4]; long i = -1; a[i][i] = 3; a[i][i]", 3L);
    test("def a = new long[10][4]; double i = 0; a[i][i] = 3; a[i][i]", 3L);
    test("def a = new long[10][4]; double i = -1; a[i][i] = 3; a[i][i]", 3L);
    test("def a = new long[10][4]; Decimal i = 0; a[i][i] = 3; a[i][i]", 3L);
    test("def a = new long[10][4]; Decimal i = -1; a[i][i] = 3; a[i][i]", 3L);
    test("def a = new long[10][4]; def i = 0; a[i][i] = 3; a[i][i]", 3L);
    test("def a = new long[10][4]; def i = -1; a[i][i] = 3; a[i][i]", 3L);
    test("def x = 3.2D; def a = new long[10][4]; def i = 0; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; def a = new long[10][4]; def i = -1; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; def a = new long[10][4]; a[0][0] = x; a[0][0]", 3L);
    test("def x = 3.2D; def a = new long[10][4]; a[-1][-1] = x; a[-1][-1]", 3L);
    test("def x = 3.2D; def a = new long[10][4]; int i = 0; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; def a = new long[10][4]; int i = -1; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; def a = new long[10][4]; long i = 0; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; def a = new long[10][4]; long i = -1; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; def a = new long[10][4]; double i = 0; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; def a = new long[10][4]; double i = -1; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; def a = new long[10][4]; Decimal i = 0; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; def a = new long[10][4]; Decimal i = -1; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; def a = new long[10][4]; def i = 0; a[i][i] = x; a[i][i]", 3L);
    test("def x = 3.2D; def a = new long[10][4]; def i = -1; a[i][i] = x; a[i][i]", 3L);
    test("var a = new long[10][1]; a[0][0] = 3; a[0][0]", 3L);
    test("var a = new long[10][1]; a[-1][0] = 3; a[-1][0]", 3L);
    test("var a = new long[10][1]; def i = 0; a[i][0] = 3; a[i][0]", 3L);
    test("var a = new long[10][1]; def i = -1; a[i][0] = 3; a[i][0]", 3L);
    test("var a = new long[1][1]; var x = a[0][0]; x instanceof long", true);
    test("var a = new long[1][]; a instanceof long[][]", true);
    test("def a = new long[1][1]; ((long[][])a)[0][0]", 0L);
    test("def a = new long[1][1]; ((long[][])a)[0] instanceof long[]", true);
    test("def a = new long[1][1]; ((long[][])a)[0][0] instanceof long", true);
  }

  @Test public void doubleArrays() {
    test("double[] a = new double[10]; def i = 0; a[i] = 3; a[i]", 3D);
    test("double[] a = new double[10]; def i = -1; a[i] = 3; a[i]", 3D);
    test("double[] a = new double[10]; a[0] = 3; a[0]", 3D);
    test("double[] a = new double[10]; a[-1] = 3; a[-1]", 3D);
    test("double[] a = new double[10]; int i = 0; a[i] = 3; a[i]", 3D);
    test("double[] a = new double[10]; int i = -1; a[i] = 3; a[i]", 3D);
    test("double[] a = new double[10]; long i = 0; a[i] = 3; a[i]", 3D);
    test("double[] a = new double[10]; long i = -1; a[i] = 3; a[i]", 3D);
    test("double[] a = new double[10]; double i = 0; a[i] = 3; a[i]", 3D);
    test("double[] a = new double[10]; double i = -1; a[i] = 3; a[i]", 3D);
    test("double[] a = new double[10]; Decimal i = 0; a[i] = 3; a[i]", 3D);
    test("double[] a = new double[10]; Decimal i = -1; a[i] = 3; a[i]", 3D);
    test("double[] a = new double[10]; def i = 0; a[i] = 3; a[i]", 3D);
    test("double[] a = new double[10]; def i = -1; a[i] = 3; a[i]", 3D);
    testError("double[] a = new double[10]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "cannot be cast");
    test("def a = new double[10]; def i = -1; def x = 'a'; a[i] = x; a[i]", 97D);
    testError("def a = new double[10]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "cannot be cast");
    test("def x = 3L; double[] a = new double[10]; def i = 0; a[i] = x; a[i]", 3D);
    test("def x = 3L; double[] a = new double[10]; def i = -1; a[i] = x; a[i]", 3D);
    test("def x = 3L; double[] a = new double[10]; a[0] = x; a[0]", 3D);
    test("def x = 3L; double[] a = new double[10]; a[-1] = x; a[-1]", 3D);
    test("def x = 3L; double[] a = new double[10]; int i = 0; a[i] = x; a[i]", 3D);
    test("def x = 3L; double[] a = new double[10]; int i = -1; a[i] = x; a[i]", 3D);
    test("def x = 3L; double[] a = new double[10]; long i = 0; a[i] = x; a[i]", 3D);
    test("def x = 3L; double[] a = new double[10]; long i = -1; a[i] = x; a[i]", 3D);
    test("def x = 3L; double[] a = new double[10]; double i = 0; a[i] = x; a[i]", 3D);
    test("def x = 3L; double[] a = new double[10]; double i = -1; a[i] = x; a[i]", 3D);
    test("def x = 3L; double[] a = new double[10]; Decimal i = 0; a[i] = x; a[i]", 3D);
    test("def x = 3L; double[] a = new double[10]; Decimal i = -1; a[i] = x; a[i]", 3D);
    test("def x = 3L; double[] a = new double[10]; def i = 0; a[i] = x; a[i]", 3D);
    test("def x = 3L; double[] a = new double[10]; def i = -1; a[i] = x; a[i]", 3D);
    test("def a = new double[10]; def i = 0; a[i] = 3; a[i]", 3D);
    test("def a = new double[10]; def i = -1; a[i] = 3; a[i]", 3D);
    test("def a = new double[10]; a[0] = 3; a[0]", 3D);
    test("def a = new double[10]; a[-1] = 3; a[-1]", 3D);
    test("def a = new double[10]; int i = 0; a[i] = 3; a[i]", 3D);
    test("def a = new double[10]; int i = -1; a[i] = 3; a[i]", 3D);
    test("def a = new double[10]; long i = 0; a[i] = 3; a[i]", 3D);
    test("def a = new double[10]; long i = -1; a[i] = 3; a[i]", 3D);
    test("def a = new double[10]; double i = 0; a[i] = 3; a[i]", 3D);
    test("def a = new double[10]; double i = -1; a[i] = 3; a[i]", 3D);
    test("def a = new double[10]; Decimal i = 0; a[i] = 3; a[i]", 3D);
    test("def a = new double[10]; Decimal i = -1; a[i] = 3; a[i]", 3D);
    test("def a = new double[10]; def i = 0; a[i] = 3; a[i]", 3D);
    test("def a = new double[10]; def i = -1; a[i] = 3; a[i]", 3D);
    test("def x = 3L; def a = new double[10]; def i = 0; a[i] = x; a[i]", 3D);
    test("def x = 3L; def a = new double[10]; def i = -1; a[i] = x; a[i]", 3D);
    test("def x = 3L; def a = new double[10]; a[0] = x; a[0]", 3D);
    test("def x = 3L; def a = new double[10]; a[-1] = x; a[-1]", 3D);
    test("def x = 3L; def a = new double[10]; int i = 0; a[i] = x; a[i]", 3D);
    test("def x = 3L; def a = new double[10]; int i = -1; a[i] = x; a[i]", 3D);
    test("def x = 3L; def a = new double[10]; long i = 0; a[i] = x; a[i]", 3D);
    test("def x = 3L; def a = new double[10]; long i = -1; a[i] = x; a[i]", 3D);
    test("def x = 3L; def a = new double[10]; double i = 0; a[i] = x; a[i]", 3D);
    test("def x = 3L; def a = new double[10]; double i = -1; a[i] = x; a[i]", 3D);
    test("def x = 3L; def a = new double[10]; Decimal i = 0; a[i] = x; a[i]", 3D);
    test("def x = 3L; def a = new double[10]; Decimal i = -1; a[i] = x; a[i]", 3D);
    test("def x = 3L; def a = new double[10]; def i = 0; a[i] = x; a[i]", 3D);
    test("def x = 3L; def a = new double[10]; def i = -1; a[i] = x; a[i]", 3D);
    test("double[] arr = new double[10]; for (int i = 0; i < 10; i++) { arr[i] = i }; double result = 0; for (int i = 0; i < 10; i++) { result += arr[i] }; result", 45.0D);
    test("double[] arr = new double[10]; 10.each{ arr[it] = it }; double result = 0; for (int i = 0; i < 10; i++) { result += arr[i] }; result", 45.0D);
    test("def arr = new double[10]; 10.each{ arr[it] = it }; double result = 0; for (int i = 0; i < 10; i++) { result += arr[i] }; result", 45.0D);
    test("def arr = new double[10]; 10.each{ arr[it] = it }; double result = 0; for (def i = 0; i < 10; i++) { result += arr[i] }; result", 45.0D);
    test("var a = new double[10]; a[0]", 0D);
    test("var a = new double[10]; a[0] = 3; a[0]", 3D);
    test("var a = new double[10]; a[-1] = 3; a[-1]", 3D);
    test("var a = new double[10]; def i = 0; a[i] = 3; a[i]", 3D);
    test("var a = new double[10]; def i = -1; a[i] = 3; a[i]", 3D);
    test("var a = new double[1];  var x = a[0]; x instanceof double", true);
    test("([1,-2,3] as double[]).toString()", "[1.0, -2.0, 3.0]");
    test("([[1],[-2],[3]] as double[][]).toString()", "[[1.0], [-2.0], [3.0]]");
  }

  @Test public void doubleArrayMultipleDimensions() {
    testError("double[][] a = new double[{ -> 7}][-4]; a[0][0]", "cannot convert");
    testError("double[][] a = new double[10][-4]; a[0][0]", "negative");
    testError("def x = -4; double[][] a = new double[10][x]; a[0][0]", "negative");
    test("double[][] a = new double[10][4]; a[0][0]", 0D);
    test("double[][] a = new double[10][4]; def i = 0; a[i][i] = 3; a[i][i]", 3D);
    test("double[][] a = new double[10][4]; def i = -1; a[i][i] = 3; a[i][i]", 3D);
    test("double[][] a = new double[10][4]; a[0][0] = 3; a[0][0]", 3D);
    test("double[][] a = new double[10][4]; a[-1][-1] = 3; a[-1][-1]", 3D);
    test("double[][] a = new double[10][4]; int i = 0; a[i][i] = 3; a[i][i]", 3D);
    test("double[][] a = new double[10][4]; int i = -1; a[i][i] = 3; a[i][i]", 3D);
    test("double[][] a = new double[10][4]; long i = 0; a[i][i] = 3; a[i][i]", 3D);
    test("double[][] a = new double[10][4]; long i = -1; a[i][i] = 3; a[i][i]", 3D);
    test("double[][] a = new double[10][4]; double i = 0; a[i][i] = 3; a[i][i]", 3D);
    test("double[][] a = new double[10][4]; double i = -1; a[i][i] = 3; a[i][i]", 3D);
    test("double[][] a = new double[10][4]; Decimal i = 0; a[i][i] = 3; a[i][i]", 3D);
    test("double[][] a = new double[10][4]; Decimal i = -1; a[i][i] = 3; a[i][i]", 3D);
    test("double[][] a = new double[10][4]; def i = 0; a[i][i] = 3; a[i][i]", 3D);
    test("double[][] a = new double[10][4]; def i = -1; a[i][i] = 3; a[i][i]", 3D);
    test("double[][] a = new double[10][]; a[-1] = new double[3]; def i = -1; a[i][i] = 3; a[9][2]", 3D);
    test("def x = 3.2D; double[][] a = new double[10][4]; def i = 0; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; double[][] a = new double[10][4]; def i = -1; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; double[][] a = new double[10][4]; a[0][0] = x; a[0][0]", 3.2D);
    test("def x = 3.2D; double[][] a = new double[10][4]; a[-1][-1] = x; a[-1][-1]", 3.2D);
    test("def x = 3.2D; double[][] a = new double[10][4]; int i = 0; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; double[][] a = new double[10][4]; int i = -1; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; double[][] a = new double[10][4]; long i = 0; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; double[][] a = new double[10][4]; long i = -1; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; double[][] a = new double[10][4]; double i = 0; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; double[][] a = new double[10][4]; double i = -1; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; double[][] a = new double[10][4]; Decimal i = 0; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; double[][] a = new double[10][4]; Decimal i = -1; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; double[][] a = new double[10][4]; def i = 0; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; double[][] a = new double[10][4]; def i = -1; a[i][i] = x; a[i][i]", 3.2D);
    test("def a = new double[10][4]; def i = 0; a[i][i] = 3; a[i][i]", 3D);
    test("def a = new double[10][4]; def i = -1; a[i][i] = 3; a[i][i]", 3D);
    test("def a = new double[10][4]; a[0][0] = 3; a[0][0]", 3D);
    test("def a = new double[10][4]; a[-1][-1] = 3; a[-1][-1]", 3D);
    test("def a = new double[10][4]; int i = 0; a[i][i] = 3; a[i][i]", 3D);
    test("def a = new double[10][4]; int i = -1; a[i][i] = 3; a[i][i]", 3D);
    test("def a = new double[10][4]; long i = 0; a[i][i] = 3; a[i][i]", 3D);
    test("def a = new double[10][4]; long i = -1; a[i][i] = 3; a[i][i]", 3D);
    test("def a = new double[10][4]; double i = 0; a[i][i] = 3; a[i][i]", 3D);
    test("def a = new double[10][4]; double i = -1; a[i][i] = 3; a[i][i]", 3D);
    test("def a = new double[10][4]; Decimal i = 0; a[i][i] = 3; a[i][i]", 3D);
    test("def a = new double[10][4]; Decimal i = -1; a[i][i] = 3; a[i][i]", 3D);
    test("def a = new double[10][4]; def i = 0; a[i][i] = 3; a[i][i]", 3D);
    test("def a = new double[10][4]; def i = -1; a[i][i] = 3; a[i][i]", 3D);
    test("def x = 3.2D; def a = new double[10][4]; def i = 0; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; def a = new double[10][4]; def i = -1; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; def a = new double[10][4]; a[0][0] = x; a[0][0]", 3.2D);
    test("def x = 3.2D; def a = new double[10][4]; a[-1][-1] = x; a[-1][-1]", 3.2D);
    test("def x = 3.2D; def a = new double[10][4]; int i = 0; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; def a = new double[10][4]; int i = -1; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; def a = new double[10][4]; long i = 0; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; def a = new double[10][4]; long i = -1; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; def a = new double[10][4]; double i = 0; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; def a = new double[10][4]; double i = -1; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; def a = new double[10][4]; Decimal i = 0; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; def a = new double[10][4]; Decimal i = -1; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; def a = new double[10][4]; def i = 0; a[i][i] = x; a[i][i]", 3.2D);
    test("def x = 3.2D; def a = new double[10][4]; def i = -1; a[i][i] = x; a[i][i]", 3.2D);
    testError("double[][] a = new double[]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "need a size");
    testError("double[][] a = new double[][]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "need a size");
    testError("double[][] a = new double[10][4][]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "cannot convert");
    testError("double[][][] a = new double[10][][4]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "unexpected token");
    testError("double[][] a = new double[10][]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "cannot cast");
    testError("double[][] a = new double[10][]; def i = -1; def x = 'abc'; a[i] = new double[4]; a[i][0] = x; a[i][0]", "cannot be cast");
    test("var a = new double[10][1]; a[0][0] = 3; a[0][0]", 3D);
    test("var a = new double[10][1]; a[-1][0] = 3; a[-1][0]", 3D);
    test("var a = new double[10][1]; def i = 0; a[i][0] = 3; a[i][0]", 3D);
    test("var a = new double[10][1]; def i = -1; a[i][0] = 3; a[i][0]", 3D);
    test("var a = new double[1][1]; var x = a[0][0]; x instanceof double", true);
    test("var a = new double[1][]; a instanceof double[][]", true);
    test("def a = new double[1][1]; ((double[][])a)[0][0]", 0D);
    test("def a = new double[1][1]; ((double[][])a)[0] instanceof double[]", true);
    test("def a = new double[1][1]; ((double[][])a)[0][0] instanceof double", true);
  }

  @Test public void decimalArrays() {
    test("Decimal[] a = new Decimal[10]; def i = 0; a[i] = 3.456; a[i]", "#3.456");
    test("Decimal[] a = new Decimal[10]; def i = -1; a[i] = 3.456; a[i]", "#3.456");
    test("Decimal[] a = new Decimal[10]; a[0] = 3.456; a[0]", "#3.456");
    test("Decimal[] a = new Decimal[10]; a[-1] = 3.456; a[-1]", "#3.456");
    test("Decimal[] a = new Decimal[10]; int i = 0; a[i] = 3.456; a[i]", "#3.456");
    test("Decimal[] a = new Decimal[10]; int i = -1; a[i] = 3.456; a[i]", "#3.456");
    test("Decimal[] a = new Decimal[10]; long i = 0; a[i] = 3.456; a[i]", "#3.456");
    test("Decimal[] a = new Decimal[10]; long i = -1; a[i] = 3.456; a[i]", "#3.456");
    test("Decimal[] a = new Decimal[10]; double i = 0; a[i] = 3.456; a[i]", "#3.456");
    test("Decimal[] a = new Decimal[10]; double i = -1; a[i] = 3.456; a[i]", "#3.456");
    test("Decimal[] a = new Decimal[10]; Decimal i = 0; a[i] = 3.456; a[i]", "#3.456");
    test("Decimal[] a = new Decimal[10]; Decimal i = -1; a[i] = 3.456; a[i]", "#3.456");
    test("Decimal[] a = new Decimal[10]; def i = 0; a[i] = 3.456; a[i]", "#3.456");
    test("Decimal[] a = new Decimal[10]; def i = -1; a[i] = 3.456; a[i]", "#3.456");
    testError("Decimal[] a = new Decimal[10]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "cannot be cast");
    test("def a = new Decimal[10]; def i = -1; def x = 'a'; a[i] = x; a[i]", "#97");
    testError("def a = new Decimal[10]; def i = -1; def x = 'abc'; a[i] = x; a[i]", "cannot be cast");
    test("def x = 3L; Decimal[] a = new Decimal[10]; def i = 0; a[i] = x; a[i]", "#3");
    test("def x = 3L; Decimal[] a = new Decimal[10]; def i = -1; a[i] = x; a[i]", "#3");
    test("def x = 3L; Decimal[] a = new Decimal[10]; a[0] = x; a[0]", "#3");
    test("def x = 3L; Decimal[] a = new Decimal[10]; a[-1] = x; a[-1]", "#3");
    test("def x = 3L; Decimal[] a = new Decimal[10]; int i = 0; a[i] = x; a[i]", "#3");
    test("def x = 3L; Decimal[] a = new Decimal[10]; int i = -1; a[i] = x; a[i]", "#3");
    test("def x = 3L; Decimal[] a = new Decimal[10]; long i = 0; a[i] = x; a[i]", "#3");
    test("def x = 3L; Decimal[] a = new Decimal[10]; long i = -1; a[i] = x; a[i]", "#3");
    test("def x = 3L; Decimal[] a = new Decimal[10]; double i = 0; a[i] = x; a[i]", "#3");
    test("def x = 3L; Decimal[] a = new Decimal[10]; double i = -1; a[i] = x; a[i]", "#3");
    test("def x = 3L; Decimal[] a = new Decimal[10]; Decimal i = 0; a[i] = x; a[i]", "#3");
    test("def x = 3L; Decimal[] a = new Decimal[10]; Decimal i = -1; a[i] = x; a[i]", "#3");
    test("def x = 3L; Decimal[] a = new Decimal[10]; def i = 0; a[i] = x; a[i]", "#3");
    test("def x = 3L; Decimal[] a = new Decimal[10]; def i = -1; a[i] = x; a[i]", "#3");
    test("def a = new Decimal[10]; def i = 0; a[i] = 3.456; a[i]", "#3.456");
    test("def a = new Decimal[10]; def i = -1; a[i] = 3.456; a[i]", "#3.456");
    test("def a = new Decimal[10]; a[0] = 3.456; a[0]", "#3.456");
    test("def a = new Decimal[10]; a[-1] = 3.456; a[-1]", "#3.456");
    test("def a = new Decimal[10]; int i = 0; a[i] = 3.456; a[i]", "#3.456");
    test("def a = new Decimal[10]; int i = -1; a[i] = 3.456; a[i]", "#3.456");
    test("def a = new Decimal[10]; long i = 0; a[i] = 3.456; a[i]", "#3.456");
    test("def a = new Decimal[10]; long i = -1; a[i] = 3.456; a[i]", "#3.456");
    test("def a = new Decimal[10]; double i = 0; a[i] = 3.456; a[i]", "#3.456");
    test("def a = new Decimal[10]; double i = -1; a[i] = 3.456; a[i]", "#3.456");
    test("def a = new Decimal[10]; Decimal i = 0; a[i] = 3.456; a[i]", "#3.456");
    test("def a = new Decimal[10]; Decimal i = -1; a[i] = 3.456; a[i]", "#3.456");
    test("def a = new Decimal[10]; def i = 0; a[i] = 3.456; a[i]", "#3.456");
    test("def a = new Decimal[10]; def i = -1; a[i] = 3.456; a[i]", "#3.456");
    test("def x = 3L; def a = new Decimal[10]; def i = 0; a[i] = x; a[i]", "#3");
    test("def x = 3L; def a = new Decimal[10]; def i = -1; a[i] = x; a[i]", "#3");
    test("def x = 3L; def a = new Decimal[10]; a[0] = x; a[0]", "#3");
    test("def x = 3L; def a = new Decimal[10]; a[-1] = x; a[-1]", "#3");
    test("def x = 3L; def a = new Decimal[10]; int i = 0; a[i] = x; a[i]", "#3");
    test("def x = 3L; def a = new Decimal[10]; int i = -1; a[i] = x; a[i]", "#3");
    test("def x = 3L; def a = new Decimal[10]; long i = 0; a[i] = x; a[i]", "#3");
    test("def x = 3L; def a = new Decimal[10]; long i = -1; a[i] = x; a[i]", "#3");
    test("def x = 3L; def a = new Decimal[10]; double i = 0; a[i] = x; a[i]", "#3");
    test("def x = 3L; def a = new Decimal[10]; double i = -1; a[i] = x; a[i]", "#3");
    test("def x = 3L; def a = new Decimal[10]; Decimal i = 0; a[i] = x; a[i]", "#3");
    test("def x = 3L; def a = new Decimal[10]; Decimal i = -1; a[i] = x; a[i]", "#3");
    test("def x = 3L; def a = new Decimal[10]; def i = 0; a[i] = x; a[i]", "#3");
    test("def x = 3L; def a = new Decimal[10]; def i = -1; a[i] = x; a[i]", "#3");
    test("Decimal[] arr = new Decimal[10]; for (int i = 0; i < 10; i++) { arr[i] = i }; Decimal result = 0; for (int i = 0; i < 10; i++) { result += arr[i] }; result", "#45");
    test("Decimal[] arr = new Decimal[10]; 10.each{ arr[it] = it }; Decimal result = 0; for (int i = 0; i < 10; i++) { result += arr[i] }; result", "#45");
    test("def arr = new Decimal[10]; 10.each{ arr[it] = it }; Decimal result = 0; for (int i = 0; i < 10; i++) { result += arr[i] }; result", "#45");
    test("def arr = new Decimal[10]; 10.each{ arr[it] = it }; Decimal result = 0; for (def i = 0; i < 10; i++) { result += arr[i] }; result", "#45");
    test("def a = new Decimal[10]; a[0]", null);
    test("var a = new Decimal[10]; a[0] = 3; a[0]", "#3");
    test("var a = new Decimal[10]; a[-1] = 3; a[-1]", "#3");
    test("var a = new Decimal[10]; def i = 0; a[i] = 3; a[i]", "#3");
    test("var a = new Decimal[10]; def i = -1; a[i] = 3; a[i]", "#3");
    test("var a = new Decimal[1];  a[0] = 3; var x = a[0]; x instanceof Decimal", true);
    test("([1.0,-2.0,3] as Decimal[]).toString()", "[1.0, -2.0, 3]");
    test("([[1],[-2],[3.0]] as Decimal[][]).toString()", "[[1], [-2], [3.0]]");
  }

  @Test public void booleanArrays() {
    test("boolean[] a = new boolean[10]; def i = 0; a[i] = true; a[i]", true);
    test("boolean[] a = new boolean[10]; def i = -1; a[i] = true; a[i]", true);
    test("boolean[] a = new boolean[10]; a[0] = true; a[0]", true);
    test("boolean[] a = new boolean[10]; a[-1] = true; a[-1]", true);
    test("boolean[] a = new boolean[10]; int i = 0; a[i] = true; a[i]", true);
    test("boolean[] a = new boolean[10]; int i = -1; a[i] = true; a[i]", true);
    test("boolean[] a = new boolean[10]; long i = 0; a[i] = true; a[i]", true);
    test("boolean[] a = new boolean[10]; long i = -1; a[i] = true; a[i]", true);
    test("boolean[] a = new boolean[10]; double i = 0; a[i] = true; a[i]", true);
    test("boolean[] a = new boolean[10]; double i = -1; a[i] = true; a[i]", true);
    test("boolean[] a = new boolean[10]; Decimal i = 0; a[i] = true; a[i]", true);
    test("boolean[] a = new boolean[10]; Decimal i = -1; a[i] = true; a[i]", true);
    test("boolean[] a = new boolean[10]; def i = 0; a[i] = true; a[i]", true);
    test("boolean[] a = new boolean[10]; def i = -1; a[i] = true; a[i]", true);
    test("def x = 3.2D; boolean[] a = new boolean[10]; def i = 0; a[i] = x; a[i]", true);
    test("def x = 3.2D; boolean[] a = new boolean[10]; def i = -1; a[i] = x; a[i]", true);
    test("def x = 3.2D; boolean[] a = new boolean[10]; a[0] = x; a[0]", true);
    test("def x = 3.2D; boolean[] a = new boolean[10]; a[-1] = x; a[-1]", true);
    test("def x = 3.2D; boolean[] a = new boolean[10]; int i = 0; a[i] = x; a[i]", true);
    test("def x = 3.2D; boolean[] a = new boolean[10]; int i = -1; a[i] = x; a[i]", true);
    test("def x = 3.2D; boolean[] a = new boolean[10]; long i = 0; a[i] = x; a[i]", true);
    test("def x = 3.2D; boolean[] a = new boolean[10]; long i = -1; a[i] = x; a[i]", true);
    test("def x = 3.2D; boolean[] a = new boolean[10]; double i = 0; a[i] = x; a[i]", true);
    test("def x = 3.2D; boolean[] a = new boolean[10]; double i = -1; a[i] = x; a[i]", true);
    test("def x = 3.2D; boolean[] a = new boolean[10]; Decimal i = 0; a[i] = x; a[i]", true);
    test("def x = 3.2D; boolean[] a = new boolean[10]; Decimal i = -1; a[i] = x; a[i]", true);
    test("def x = 3.2D; boolean[] a = new boolean[10]; def i = 0; a[i] = x; a[i]", true);
    test("def x = 3.2D; boolean[] a = new boolean[10]; def i = -1; a[i] = x; a[i]", true);
    test("def a = new boolean[10]; def i = 0; a[i] = true; a[i]", true);
    test("def a = new boolean[10]; def i = -1; a[i] = true; a[i]", true);
    test("def a = new boolean[10]; a[0] = true; a[0]", true);
    test("def a = new boolean[10]; a[-1] = true; a[-1]", true);
    test("def a = new boolean[10]; int i = 0; a[i] = true; a[i]", true);
    test("def a = new boolean[10]; int i = -1; a[i] = true; a[i]", true);
    test("def a = new boolean[10]; long i = 0; a[i] = true; a[i]", true);
    test("def a = new boolean[10]; long i = -1; a[i] = true; a[i]", true);
    test("def a = new boolean[10]; double i = 0; a[i] = true; a[i]", true);
    test("def a = new boolean[10]; double i = -1; a[i] = true; a[i]", true);
    test("def a = new boolean[10]; Decimal i = 0; a[i] = true; a[i]", true);
    test("def a = new boolean[10]; Decimal i = -1; a[i] = true; a[i]", true);
    test("def a = new boolean[10]; def i = 0; a[i] = true; a[i]", true);
    test("def a = new boolean[10]; def i = -1; a[i] = true; a[i]", true);
    test("def x = 3.2D; def a = new boolean[10]; def i = 0; a[i] = x; a[i]", true);
    test("def x = 3.2D; def a = new boolean[10]; def i = -1; a[i] = x; a[i]", true);
    test("def x = 3.2D; def a = new boolean[10]; a[0] = x; a[0]", true);
    test("def x = 3.2D; def a = new boolean[10]; a[-1] = x; a[-1]", true);
    test("def x = 3.2D; def a = new boolean[10]; int i = 0; a[i] = x; a[i]", true);
    test("def x = 3.2D; def a = new boolean[10]; int i = -1; a[i] = x; a[i]", true);
    test("def x = 3.2D; def a = new boolean[10]; long i = 0; a[i] = x; a[i]", true);
    test("def x = 3.2D; def a = new boolean[10]; long i = -1; a[i] = x; a[i]", true);
    test("def x = 3.2D; def a = new boolean[10]; double i = 0; a[i] = x; a[i]", true);
    test("def x = 3.2D; def a = new boolean[10]; double i = -1; a[i] = x; a[i]", true);
    test("def x = 3.2D; def a = new boolean[10]; Decimal i = 0; a[i] = x; a[i]", true);
    test("def x = 3.2D; def a = new boolean[10]; Decimal i = -1; a[i] = x; a[i]", true);
    test("def x = 3.2D; def a = new boolean[10]; def i = 0; a[i] = x; a[i]", true);
    test("def x = 3.2D; def a = new boolean[10]; def i = -1; a[i] = x; a[i]", true);
    test("boolean[] a = new boolean[10]; def i = 0; a[i] = false; a[i]", false);
    test("boolean[] a = new boolean[10]; def i = -1; a[i] = false; a[i]", false);
    test("boolean[] a = new boolean[10]; a[0] = false; a[0]", false);
    test("boolean[] a = new boolean[10]; a[-1] = false; a[-1]", false);
    test("boolean[] a = new boolean[10]; int i = 0; a[i] = false; a[i]", false);
    test("boolean[] a = new boolean[10]; int i = -1; a[i] = false; a[i]", false);
    test("boolean[] a = new boolean[10]; long i = 0; a[i] = false; a[i]", false);
    test("boolean[] a = new boolean[10]; long i = -1; a[i] = false; a[i]", false);
    test("boolean[] a = new boolean[10]; double i = 0; a[i] = false; a[i]", false);
    test("boolean[] a = new boolean[10]; double i = -1; a[i] = false; a[i]", false);
    test("boolean[] a = new boolean[10]; Decimal i = 0; a[i] = false; a[i]", false);
    test("boolean[] a = new boolean[10]; Decimal i = -1; a[i] = false; a[i]", false);
    test("boolean[] a = new boolean[10]; def i = 0; a[i] = false; a[i]", false);
    test("boolean[] a = new boolean[10]; def i = -1; a[i] = false; a[i]", false);
    test("def x = 0; boolean[] a = new boolean[10]; def i = 0; a[i] = x; a[i]", false);
    test("def x = 0; boolean[] a = new boolean[10]; def i = -1; a[i] = x; a[i]", false);
    test("def x = 0; boolean[] a = new boolean[10]; a[0] = x; a[0]", false);
    test("def x = 0; boolean[] a = new boolean[10]; a[-1] = x; a[-1]", false);
    test("def x = 0; boolean[] a = new boolean[10]; int i = 0; a[i] = x; a[i]", false);
    test("def x = 0; boolean[] a = new boolean[10]; int i = -1; a[i] = x; a[i]", false);
    test("def x = 0; boolean[] a = new boolean[10]; long i = 0; a[i] = x; a[i]", false);
    test("def x = 0; boolean[] a = new boolean[10]; long i = -1; a[i] = x; a[i]", false);
    test("def x = 0; boolean[] a = new boolean[10]; double i = 0; a[i] = x; a[i]", false);
    test("def x = 0; boolean[] a = new boolean[10]; double i = -1; a[i] = x; a[i]", false);
    test("def x = 0; boolean[] a = new boolean[10]; Decimal i = 0; a[i] = x; a[i]", false);
    test("def x = 0; boolean[] a = new boolean[10]; Decimal i = -1; a[i] = x; a[i]", false);
    test("def x = 0; boolean[] a = new boolean[10]; def i = 0; a[i] = x; a[i]", false);
    test("def x = 0; boolean[] a = new boolean[10]; def i = -1; a[i] = x; a[i]", false);
    test("def a = new boolean[10]; def i = 0; a[i] = false; a[i]", false);
    test("def a = new boolean[10]; def i = -1; a[i] = false; a[i]", false);
    test("def a = new boolean[10]; a[0] = false; a[0]", false);
    test("def a = new boolean[10]; a[-1] = false; a[-1]", false);
    test("def a = new boolean[10]; int i = 0; a[i] = false; a[i]", false);
    test("def a = new boolean[10]; int i = -1; a[i] = false; a[i]", false);
    test("def a = new boolean[10]; long i = 0; a[i] = false; a[i]", false);
    test("def a = new boolean[10]; long i = -1; a[i] = false; a[i]", false);
    test("def a = new boolean[10]; double i = 0; a[i] = false; a[i]", false);
    test("def a = new boolean[10]; double i = -1; a[i] = false; a[i]", false);
    test("def a = new boolean[10]; Decimal i = 0; a[i] = false; a[i]", false);
    test("def a = new boolean[10]; Decimal i = -1; a[i] = false; a[i]", false);
    test("def a = new boolean[10]; def i = 0; a[i] = false; a[i]", false);
    test("def a = new boolean[10]; def i = -1; a[i] = false; a[i]", false);
    test("def x = 0; def a = new boolean[10]; def i = 0; a[i] = x; a[i]", false);
    test("def x = 0; def a = new boolean[10]; def i = -1; a[i] = x; a[i]", false);
    test("def x = 0; def a = new boolean[10]; a[0] = x; a[0]", false);
    test("def x = 0; def a = new boolean[10]; a[-1] = x; a[-1]", false);
    test("def x = 0; def a = new boolean[10]; int i = 0; a[i] = x; a[i]", false);
    test("def x = 0; def a = new boolean[10]; int i = -1; a[i] = x; a[i]", false);
    test("def x = 0; def a = new boolean[10]; long i = 0; a[i] = x; a[i]", false);
    test("def x = 0; def a = new boolean[10]; long i = -1; a[i] = x; a[i]", false);
    test("def x = 0; def a = new boolean[10]; double i = 0; a[i] = x; a[i]", false);
    test("def x = 0; def a = new boolean[10]; double i = -1; a[i] = x; a[i]", false);
    test("def x = 0; def a = new boolean[10]; Decimal i = 0; a[i] = x; a[i]", false);
    test("def x = 0; def a = new boolean[10]; Decimal i = -1; a[i] = x; a[i]", false);
    test("def x = 0; def a = new boolean[10]; def i = 0; a[i] = x; a[i]", false);
    test("def x = 0; def a = new boolean[10]; def i = -1; a[i] = x; a[i]", false);
    test("def a = new boolean[10]; a[0]", false);
    test("boolean[] a = new boolean[10]; def i = -1; def x = 'abc'; a[i] = x; a[i]", true);
    test("def a = new boolean[10]; def i = -1; def x = 'abc'; a[i] = x; a[i]", true);
    test("boolean[] a = new boolean[10]; def i = -1; def x = ''; a[i] = x; a[i]", false);
    test("def a = new boolean[10]; def i = -1; def x = ''; a[i] = x; a[i]", false);
    test("var a = new boolean[10]; a[0]", false);
    test("var a = new boolean[10]; a[0] = true; a[0]", true);
    test("var a = new boolean[10]; a[-1] = false; a[-1]", false);
    test("var a = new boolean[10]; def i = 0; a[i] = true; a[i]", true);
    test("var a = new boolean[10]; def i = -1; a[i] = true; a[i]", true);
    test("var a = new boolean[1]; var x = a[0]; x instanceof boolean", true);
    test("var a = new boolean[1]; a instanceof boolean[]", true);
    test("def a = new boolean[1]; ((boolean[])a)[0]", false);
    test("def a = new boolean[1]; ((boolean[])a)[0] instanceof boolean", true);
    test("([true,false] as boolean[]).toString()", "[true, false]");
    test("([[true],[false],[true]] as boolean[][]).toString()", "[[true], [false], [true]]");
  }

  @Test public void stringArrays() {
    test("String[] a = new String[10]; def i = 0; a[i] = 'abc'; a[i]", "abc");
    test("String[] a = new String[10]; def i = -1; a[i] = 'abc'; a[i]", "abc");
    test("String[] a = new String[10]; a[0] = 'abc'; a[0]", "abc");
    test("String[] a = new String[10]; a[-1] = 'abc'; a[-1]", "abc");
    test("String[] a = new String[10]; int i = 0; a[i] = 'abc'; a[i]", "abc");
    test("String[] a = new String[10]; int i = -1; a[i] = 'abc'; a[i]", "abc");
    test("String[] a = new String[10]; long i = 0; a[i] = 'abc'; a[i]", "abc");
    test("String[] a = new String[10]; long i = -1; a[i] = 'abc'; a[i]", "abc");
    test("String[] a = new String[10]; double i = 0; a[i] = 'abc'; a[i]", "abc");
    test("String[] a = new String[10]; double i = -1; a[i] = 'abc'; a[i]", "abc");
    test("String[] a = new String[10]; Decimal i = 0; a[i] = 'abc'; a[i]", "abc");
    test("String[] a = new String[10]; Decimal i = -1; a[i] = 'abc'; a[i]", "abc");
    test("String[] a = new String[10]; def i = 0; a[i] = 'abc'; a[i]", "abc");
    test("String[] a = new String[10]; def i = -1; a[i] = 'abc'; a[i]", "abc");
    test("def x = 'abc'; String[] a = new String[10]; def i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; String[] a = new String[10]; def i = -1; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; String[] a = new String[10]; a[0] = x; a[0]", "abc");
    test("def x = 'abc'; String[] a = new String[10]; a[-1] = x; a[-1]", "abc");
    test("def x = 'abc'; String[] a = new String[10]; int i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; String[] a = new String[10]; int i = -1; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; String[] a = new String[10]; long i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; String[] a = new String[10]; long i = -1; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; String[] a = new String[10]; double i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; String[] a = new String[10]; double i = -1; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; String[] a = new String[10]; Decimal i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; String[] a = new String[10]; Decimal i = -1; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; String[] a = new String[10]; def i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; String[] a = new String[10]; def i = -1; a[i] = x; a[i]", "abc");
    test("Object x = 'abc'; String[] a = new String[10]; def i = 0; a[i] = x; a[i]", "abc");
    test("Object x = 'abc'; String[] a = new String[10]; def i = -1; a[i] = x; a[i]", "abc");
    test("Object x = 'abc'; String[] a = new String[10]; a[0] = x; a[0]", "abc");
    test("Object x = 'abc'; String[] a = new String[10]; a[-1] = x; a[-1]", "abc");
    test("Object x = 'abc'; String[] a = new String[10]; int i = 0; a[i] = x; a[i]", "abc");
    test("Object x = 'abc'; String[] a = new String[10]; int i = -1; a[i] = x; a[i]", "abc");
    test("Object x = 'abc'; String[] a = new String[10]; long i = 0; a[i] = x; a[i]", "abc");
    test("Object x = 'abc'; String[] a = new String[10]; long i = -1; a[i] = x; a[i]", "abc");
    test("Object x = 'abc'; String[] a = new String[10]; double i = 0; a[i] = x; a[i]", "abc");
    test("Object x = 'abc'; String[] a = new String[10]; double i = -1; a[i] = x; a[i]", "abc");
    test("Object x = 'abc'; String[] a = new String[10]; Decimal i = 0; a[i] = x; a[i]", "abc");
    test("Object x = 'abc'; String[] a = new String[10]; Decimal i = -1; a[i] = x; a[i]", "abc");
    test("Object x = 'abc'; String[] a = new String[10]; def i = 0; a[i] = x; a[i]", "abc");
    test("Object x = 'abc'; String[] a = new String[10]; def i = -1; a[i] = x; a[i]", "abc");
    test("def a = new String[10]; def i = 0; a[i] = 'abc'; a[i]", "abc");
    test("def a = new String[10]; def i = -1; a[i] = 'abc'; a[i]", "abc");
    test("def a = new String[10]; a[0] = 'abc'; a[0]", "abc");
    test("def a = new String[10]; a[-1] = 'abc'; a[-1]", "abc");
    test("def a = new String[10]; int i = 0; a[i] = 'abc'; a[i]", "abc");
    test("def a = new String[10]; int i = -1; a[i] = 'abc'; a[i]", "abc");
    test("def a = new String[10]; long i = 0; a[i] = 'abc'; a[i]", "abc");
    test("def a = new String[10]; long i = -1; a[i] = 'abc'; a[i]", "abc");
    test("def a = new String[10]; double i = 0; a[i] = 'abc'; a[i]", "abc");
    test("def a = new String[10]; double i = -1; a[i] = 'abc'; a[i]", "abc");
    test("def a = new String[10]; Decimal i = 0; a[i] = 'abc'; a[i]", "abc");
    test("def a = new String[10]; Decimal i = -1; a[i] = 'abc'; a[i]", "abc");
    test("def a = new String[10]; def i = 0; a[i] = 'abc'; a[i]", "abc");
    test("def a = new String[10]; def i = -1; a[i] = 'abc'; a[i]", "abc");
    test("def x = 'abc'; def a = new String[10]; def i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new String[10]; def i = -1; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new String[10]; a[0] = x; a[0]", "abc");
    test("def x = 'abc'; def a = new String[10]; a[-1] = x; a[-1]", "abc");
    test("def x = 'abc'; def a = new String[10]; int i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new String[10]; int i = -1; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new String[10]; long i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new String[10]; long i = -1; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new String[10]; double i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new String[10]; double i = -1; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new String[10]; Decimal i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new String[10]; Decimal i = -1; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new String[10]; def i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new String[10]; def i = -1; a[i] = x; a[i]", "abc");
    testError("def x = 1; def a = new String[10]; def i = 0; a[i] = x; a[i]", "cannot convert");
    testError("def x = 1; def a = new String[10]; def i = -1; a[i] = x; a[i]", "cannot convert");
    testError("def x = 1; def a = new String[10]; a[0] = x; a[0]", "cannot convert");
    testError("def x = 1; def a = new String[10]; a[-1] = x; a[-1]", "cannot convert");
    testError("def x = 1; def a = new String[10]; int i = 0; a[i] = x; a[i]", "cannot convert");
    testError("def x = 1; def a = new String[10]; int i = -1; a[i] = x; a[i]", "cannot convert");
    testError("def x = 1; def a = new String[10]; long i = 0; a[i] = x; a[i]", "cannot convert");
    testError("def x = 1; def a = new String[10]; long i = -1; a[i] = x; a[i]", "cannot convert");
    testError("def x = 1; def a = new String[10]; double i = 0; a[i] = x; a[i]", "cannot convert");
    testError("def x = 1; def a = new String[10]; double i = -1; a[i] = x; a[i]", "cannot convert");
    testError("def x = 1; def a = new String[10]; Decimal i = 0; a[i] = x; a[i]", "cannot convert");
    testError("def x = 1; def a = new String[10]; Decimal i = -1; a[i] = x; a[i]", "cannot convert");
    testError("def x = 1; def a = new String[10]; def i = 0; a[i] = x; a[i]", "cannot convert");
    testError("def x = 1; def a = new String[10]; def i = -1; a[i] = x; a[i]", "cannot convert");
    test("String[] a = new String[10]; a[0]", null);
    test("def a = new String[10]; a[0]", null);
    test("var a = new String[10]; a[0] = 'abc'; a[0]", "abc");
    test("var a = new String[10]; a[-1] = 'abc'; a[-1]", "abc");
    test("var a = new String[10]; def i = 0; a[i] = 'abc'; a[i]", "abc");
    test("var a = new String[10]; def i = -1; a[i] = 'abc'; a[i]", "abc");
    test("var a = new String[1];  a[0] = 'abc'; var x = a[0]; x instanceof String", true);
    test("(['1','-2','3'] as String[]).toString()", "['1', '-2', '3']");
    test("([['1'],['-2'],['3']] as String[][]).toString()", "[['1'], ['-2'], ['3']]");
  }

  @Test public void arrayError() {
    testError("def[] a = new Object[10]; def i = 0; a[i] = 'abc'; a[i]", "unexpected '['");
    testError("var[] a = new Object[10]; def i = 0; a[i] = 'abc'; a[i]", "unexpected '['");
    testError("def a = new def[10]; def i = 0; a[i] = 'abc'; a[i]", "unexpected '['");
    testError("var a = new var[10]; def i = 0; a[i] = 'abc'; a[i]", "unexpected '['");
    testError("def[] f() { new Object[10] }; def a = f(); def i = 0; a[i] = 'abc'; a[i]", "unexpected '['");
    testError("var[] f() { new Object[10] }; def a = f(); def i = 0; a[i] = 'abc'; a[i]", "unexpected '['");
    testError("def f(def[] x) { new Object[10] }; def a = f(); def i = 0; a[i] = 'abc'; a[i]", "unexpected '['");
    testError("def f(var[] x) { new Object[10] }; def a = f(); def i = 0; a[i] = 'abc'; a[i]", "unexpected '['");
  }

  @Test public void objectArrays() {
    test("Object[] a = new Object[10]; def i = 0; a[i] = 'abc'; a[i]", "abc");
    test("Object[] a = new Object[10]; def i = -1; a[i] = 'abc'; a[i]", "abc");
    test("Object[] a = new Object[10]; a[0] = 'abc'; a[0]", "abc");
    test("Object[] a = new Object[10]; a[-1] = 'abc'; a[-1]", "abc");
    test("Object[] a = new Object[10]; int i = 0; a[i] = 'abc'; a[i]", "abc");
    test("Object[] a = new Object[10]; int i = -1; a[i] = 'abc'; a[i]", "abc");
    test("Object[] a = new Object[10]; long i = 0; a[i] = 'abc'; a[i]", "abc");
    test("Object[] a = new Object[10]; long i = -1; a[i] = 'abc'; a[i]", "abc");
    test("Object[] a = new Object[10]; double i = 0; a[i] = 'abc'; a[i]", "abc");
    test("Object[] a = new Object[10]; double i = -1; a[i] = 'abc'; a[i]", "abc");
    test("Object[] a = new Object[10]; Decimal i = 0; a[i] = 'abc'; a[i]", "abc");
    test("Object[] a = new Object[10]; Decimal i = -1; a[i] = 'abc'; a[i]", "abc");
    test("Object[] a = new Object[10]; def i = 0; a[i] = 'abc'; a[i]", "abc");
    test("Object[] a = new Object[10]; def i = -1; a[i] = 'abc'; a[i]", "abc");
    test("def x = 'abc'; Object[] a = new Object[10]; def i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; Object[] a = new Object[10]; def i = -1; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; Object[] a = new Object[10]; a[0] = x; a[0]", "abc");
    test("def x = 'abc'; Object[] a = new Object[10]; a[-1] = x; a[-1]", "abc");
    test("def x = 'abc'; Object[] a = new Object[10]; int i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; Object[] a = new Object[10]; int i = -1; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; Object[] a = new Object[10]; long i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; Object[] a = new Object[10]; long i = -1; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; Object[] a = new Object[10]; double i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; Object[] a = new Object[10]; double i = -1; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; Object[] a = new Object[10]; Decimal i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; Object[] a = new Object[10]; Decimal i = -1; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; Object[] a = new Object[10]; def i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; Object[] a = new Object[10]; def i = -1; a[i] = x; a[i]", "abc");
    test("def a = new Object[10]; def i = 0; a[i] = 'abc'; a[i]", "abc");
    test("def a = new Object[10]; def i = -1; a[i] = 'abc'; a[i]", "abc");
    test("def a = new Object[10]; a[0] = 'abc'; a[0]", "abc");
    test("def a = new Object[10]; a[-1] = 'abc'; a[-1]", "abc");
    test("def a = new Object[10]; int i = 0; a[i] = 'abc'; a[i]", "abc");
    test("def a = new Object[10]; int i = -1; a[i] = 'abc'; a[i]", "abc");
    test("def a = new Object[10]; long i = 0; a[i] = 'abc'; a[i]", "abc");
    test("def a = new Object[10]; long i = -1; a[i] = 'abc'; a[i]", "abc");
    test("def a = new Object[10]; double i = 0; a[i] = 'abc'; a[i]", "abc");
    test("def a = new Object[10]; double i = -1; a[i] = 'abc'; a[i]", "abc");
    test("def a = new Object[10]; Decimal i = 0; a[i] = 'abc'; a[i]", "abc");
    test("def a = new Object[10]; Decimal i = -1; a[i] = 'abc'; a[i]", "abc");
    test("def a = new Object[10]; def i = 0; a[i] = 'abc'; a[i]", "abc");
    test("def a = new Object[10]; def i = -1; a[i] = 'abc'; a[i]", "abc");
    test("def x = 'abc'; def a = new Object[10]; def i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new Object[10]; def i = -1; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new Object[10]; a[0] = x; a[0]", "abc");
    test("def x = 'abc'; def a = new Object[10]; a[-1] = x; a[-1]", "abc");
    test("def x = 'abc'; def a = new Object[10]; int i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new Object[10]; int i = -1; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new Object[10]; long i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new Object[10]; long i = -1; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new Object[10]; double i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new Object[10]; double i = -1; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new Object[10]; Decimal i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new Object[10]; Decimal i = -1; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new Object[10]; def i = 0; a[i] = x; a[i]", "abc");
    test("def x = 'abc'; def a = new Object[10]; def i = -1; a[i] = x; a[i]", "abc");
    test("Object[] a = new Object[10]; a[0]", null);
    test("Object[] a = new Object[10]; a[0] = 1", 1);
    test("Object[] a = new Object[10]; a[0] = 3; a[0] = a[0] + a[0]", 6);
    test("def a = new Object[10]; a[0]", null);
    test("var a = new Object[10]; a[0] = 'abc'; a[0]", "abc");
    test("var a = new Object[10]; a[-1] = 'abc'; a[-1]", "abc");
    test("var a = new Object[10]; def i = 0; a[i] = 'abc'; a[i]", "abc");
    test("var a = new Object[10]; def i = -1; a[i] = 'abc'; a[i]", "abc");
    test("var a = new Object[1];  a[0] = 'abc'; var x = a[0]; x instanceof Object", true);
    test("var a = new Object[1];  a[0] = 'abc'; var x = a[0]; x instanceof String", true);
    test("var a = new Object[1];  a[0] = 3.0; var x = a[0]; x instanceof Decimal", true);
    test("([1,-2,3] as Object[]).toString()", "[1, -2, 3]");
    test("([[1],[-2],[3]] as Object[][]).toString()", "[[1], [-2], [3]]");
  }

  @Test public void otherArrayTypes() {
    test("List[] x = [[1,2],['a','b','c']]; x instanceof List[] && x[1] instanceof List && x[1] == ['a','b','c']", true);
    test("List[][] x = [[[1,2],['a','b','c']]]; x instanceof List[][] && x[0][1] instanceof List && x[0][1] == ['a','b','c']", true);
    test("def x = [[1,2],['a','b','c']] as List[]; x instanceof List[] && x[1] instanceof List && x[1] == ['a','b','c']", true);
    test("def x = [[[1,2],['a','b','c']]] as List[][]; x instanceof List[][] && x[0][1] instanceof List && x[0][1] == ['a','b','c']", true);
    test("Map[][] x = [[[a:1,b:2],[x:'a',y:'b',z:'c']]]; x instanceof Map[][] && x[0][1] instanceof Map && x[0][1] == [x:'a',y:'b',z:'c']", true);
    test("def x = [[[a:1,b:2],[x:'a',y:'b',z:'c']]] as Map[][]; x instanceof Map[][] && x[0][1] instanceof Map && x[0][1] == [x:'a',y:'b',z:'c']", true);
    test("([[1],[-2],[3]] as List[]).toString()", "[[1], [-2], [3]]");
    test("([[[1]],[[-2]],[[3]]] as List[][]).toString()", "[[[1]], [[-2]], [[3]]]");
  }

  @Test public void arraysAsValues() {
    test("def f(byte[] a) { a[0] + a[1] }; byte[] x = new byte[2]; x[0] = x[1] = 2; f(x)", (byte)4);
    test("def f(int[] a) { a[0] + a[1] }; int[] x = new int[2]; x[0] = x[1] = 2; f(x)", 4);
    test("def f(long[] a) { a[0] + a[1] }; long[] x = new long[2]; x[0] = x[1] = 2; f(x)", 4L);
    test("def f(double[] a) { a[0] + a[1] }; double[] x = new double[2]; x[0] = x[1] = 2; f(x)", 4D);
    test("def f(Decimal[] a) { a[0] + a[1] }; Decimal[] x = new Decimal[2]; x[0] = x[1] = 2; f(x)", "#4");
    test("def f(String[] a) { a[0] + a[1] }; String[] x = new String[2]; x[0] = x[1] = '2'; f(x)", "22");
  }

  @Test public void arrayConversions() {
    test("boolean[] a = [true,false,3]; a instanceof boolean[] && a[0] && !a[1] && a[2]", true);
    test("boolean[] a = [true,false,3,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,1,0,1,0,1]; a instanceof boolean[] && a[0] && !a[1] && a[2] && !a[3] && !a[4] && a[5] && a[6] && !a[7] && a[8] && a[9] && a[10] && !a[11]" +
         " && !a[12] && a[13] && a[14] && !a[15] && a[16] && a[17] && a[18] /*&& a[19] && !a[20] && a[21] && !a[22] && a[23]*/", true);
    test("boolean[][] a = [[1],[0,'']]; a instanceof boolean[][] && !a[1][0] && !a[1][1]", true);
    testError("boolean[][] a = [1,[2],3]", "cannot cast");
    test("boolean[] a = new boolean[10]; a = [1L,2L,3L]", new boolean[]{true, true, true});
    test("boolean[] a = new boolean[10]; a = [1L,2D,3.0]", new boolean[]{true, true, true});
    test("boolean[][] a = new boolean[10][]; a = [[true,false,true]]; a[0]", new boolean[]{true, false, true});
    test("int[] a = [1,2,3]; a instanceof int[] && a.sum() == 6", true);
    test("int[] a = (int[])[1,2,3]; a instanceof int[] && a.sum() == 6", true);
    test("int[] a = [1,2,3] as int[]; a instanceof int[] && a.sum() == 6", true);
    test("def a = [1,2,3] as int[]; a instanceof int[] && a.sum() == 6", true);
    test("var a = [1,2,3] as int[]; a instanceof int[] && a.sum() == 6", true);
    test("int[][] a = [[1],[2,3]]; a instanceof int[][] && a[1].sum() == 5", true);
    test("int[][] a = (int[][])[[1],[2,3]]; a instanceof int[][] && a[1].sum() == 5", true);
    test("int[][] a = [[1],[2,3]] as int[][]; a instanceof int[][] && a[1].sum() == 5", true);
    test("def a = [[1],[2,3]] as int[][]; a instanceof int[][] && a[1].sum() == 5", true);
    test("var a = [[1],[2,3]] as int[][]; a instanceof int[][] && a[1].sum() == 5", true);
    testError("int[][] a = [1,[2],3]", "cannot cast");
    test("int[] a = new int[10]; a = [1L,2L,3L]", new int[]{1, 2, 3});
    test("int[] a = new int[10]; a = [1L,2D,3.0]", new int[]{1, 2, 3});
    test("int[] a = new int[10]; long[] x = [1L,2D,3.0]; a = x", new int[]{1, 2, 3});
    test("int[] a = new int[10]; long[] x = [1L,2D,3.0]; a = (int[])x", new int[]{1, 2, 3});
    test("int[] a = new int[10]; long[] x = [1L,2D,3.0]; a = x as int[]", new int[]{1, 2, 3});
    test("int[] a = new int[10]; long[] x = [1L,2D,3.0]; a = (long[])x", new int[]{1, 2, 3});
    test("int[] a = new int[10]; long[] x = [1L,2D,3.0]; a = x as long[]", new int[]{1, 2, 3});
    test("int[] a = new int[10]; long[] x = [1L,2D,3.0]; def y = x; a = y", new int[]{1, 2, 3});
    test("int[] a = new int[10]; double[] x = [1L,2D,3.0]; a = x", new int[]{1, 2, 3});
    test("int[] a = new int[10]; Decimal[] x = [1L,2D,3.0]; a = x", new int[]{1, 2, 3});
    test("int[] a = new int[10]; String[] x = ['a','b','c']; a = x", new int[]{97, 98, 99});
    test("int[][] a = new int[10][]; a = [[1L,2D,3.0]]; a[0]", new int[]{1, 2, 3});
    test("int[][] a = new int[10][]; a = [[1L,2D,3.0]]; a[0].toString()", "[1, 2, 3]");
    test("byte[] a = [1,2,3]; a instanceof byte[] && a.sum() == 6", true);
    test("byte[] a = (byte[])[1,2,3]; a instanceof byte[] && a.sum() == 6", true);
    test("byte[] a = [1,2,3] as byte[]; a instanceof byte[] && a.sum() == 6", true);
    test("def a = [1,2,3] as byte[]; a instanceof byte[] && a.sum() == 6", true);
    test("var a = [1,2,3] as byte[]; a instanceof byte[] && a.sum() == 6", true);
    test("byte[][] a = [[1],[2,3]]; a instanceof byte[][] && a[1].sum() == 5", true);
    test("byte[][] a = (byte[][])[[1],[2,3]]; a instanceof byte[][] && a[1].sum() == 5", true);
    test("byte[][] a = [[1],[2,3]] as byte[][]; a instanceof byte[][] && a[1].sum() == 5", true);
    test("def a = [[1],[2,3]] as byte[][]; a instanceof byte[][] && a[1].sum() == 5", true);
    test("var a = [[1],[2,3]] as byte[][]; a instanceof byte[][] && a[1].sum() == 5", true);
    testError("byte[][] a = [1,[2],3]", "cannot cast");
    test("byte[] a = new byte[10]; a = [1L,2L,3L]", new byte[]{1, 2, 3});
    test("byte[] a = new byte[10]; a = [1L,2D,3.0]", new byte[]{1, 2, 3});
    test("byte[] a = new byte[10]; long[] x = [1L,2D,3.0]; a = x", new byte[]{1, 2, 3});
    test("byte[] a = new byte[10]; long[] x = [1L,2D,3.0]; a = (byte[])x", new byte[]{1, 2, 3});
    test("byte[] a = new byte[10]; long[] x = [1L,2D,3.0]; a = x as byte[]", new byte[]{1, 2, 3});
    test("byte[] a = new byte[10]; long[] x = [1L,2D,3.0]; a = (long[])x", new byte[]{1, 2, 3});
    test("byte[] a = new byte[10]; long[] x = [1L,2D,3.0]; a = x as long[]", new byte[]{1, 2, 3});
    test("byte[] a = new byte[10]; long[] x = [1L,2D,3.0]; def y = x; a = y", new byte[]{1, 2, 3});
    test("byte[] a = new byte[10]; double[] x = [1L,2D,3.0]; a = x", new byte[]{1, 2, 3});
    test("byte[] a = new byte[10]; Decimal[] x = [1L,2D,3.0]; a = x", new byte[]{1, 2, 3});
    test("byte[] a = new byte[10]; String[] x = ['a','b','c']; a = x", new byte[]{97, 98, 99});
    test("byte[][] a = new byte[10][]; a = [[1L,2D,3.0]]; a[0]", new byte[]{1, 2, 3});
    test("byte[][] a = new byte[10][]; a = [[1L,2D,3.0]]; a[0].toString()", "[1, 2, 3]");
    testError("int[][] a = new int[10][]; a = [[1L,'2D',3.0]]; a[0]", "incompatible types");
    test("long[] a = [1,2,3]; a instanceof long[] && a.sum() == 6", true);
    test("long[][] a = [[1],[2,3]]; a instanceof long[][] && a[1].sum() == 5", true);
    testError("long[][] a = [1,[2],3]", "cannot cast");
    test("long[] a = new long[10]; a = [1L,2L,3L]", new long[]{1, 2, 3});
    test("long[] a = new long[10]; a = (long[])[1L,2L,3L]", new long[]{1, 2, 3});
    test("long[] a = new long[10]; a = [1L,2L,3L] as long[]", new long[]{1, 2, 3});
    test("long[] a = new long[10]; a = [1L,2D,3.0]", new long[]{1, 2, 3});
    test("long[][] a = new long[10][]; a = [[1L,2D,3.0]]; a[0]", new long[]{1, 2, 3});
    test("long[][] a = new long[10][]; a = (long[][])[[1L,2D,3.0]]; a[0]", new long[]{1, 2, 3});
    test("long[][] a = new long[10][]; a = [[1L,2D,3.0]] as long[][]; a[0]", new long[]{1, 2, 3});
    test("long[] a = new long[10]; long[] x = [1L,2D,3.0]; a = x", new long[]{1, 2, 3});
    test("long[] a = new long[10]; double[] x = [1L,2D,3.0]; a = x", new long[]{1, 2, 3});
    test("long[] a = new long[10]; Decimal[] x = [1L,2D,3.0]; a = x", new long[]{1, 2, 3});
    test("long[] a = new long[10]; String[] x = ['a','b','c']; a = x", new long[]{97, 98, 99});
    testError("long[][] a = new long[10][]; a = [[1L,'2D',3.0]]; a[0]", "incompatible types");
    test("double[] a = [1,2,3]; a instanceof double[] && a.sum() == 6", true);
    test("double[][] a = [[1],[2,3]]; a instanceof double[][] && a[1].sum() == 5", true);
    testError("double[][] a = [1,[2],3]", "cannot cast");
    test("double[] a = new double[10]; a = [1L,2L,3L]", new double[]{1, 2, 3});
    test("double[] a = new double[10]; a = (double[])[1L,2L,3L]", new double[]{1, 2, 3});
    test("double[] a = new double[10]; a = [1L,2D,3.0]", new double[]{1, 2, 3});
    test("double[][] a = new double[10][]; a = [[1L,2D,3.0]]; a[0]", new double[]{1, 2, 3});
    testError("double[][] a = new double[10][]; a = [[1L,'2D',3.0]]; a[0]", "incompatible types");
    test("double[] a = new double[10]; double[] x = [1L,2D,3.0]; a = x", new double[]{1, 2, 3});
    test("double[] a = new double[10]; def x = (long[])[1L,2D,3.0]; a = (double[])x", new double[]{1, 2, 3});
    test("double[] a = new double[10]; double[] x = [1L,2D,3.0]; a = x", new double[]{1, 2, 3});
    test("double[] a = new double[10]; Decimal[] x = [1L,2D,3.0]; a = x", new double[]{1, 2, 3});
    test("double[] a = new double[10]; String[] x = ['a','b','c']; a = x", new double[]{97, 98, 99});
    test("double[] a = new double[10]; String[] x = (String[])['a','b','c']; a = x", new double[]{97, 98, 99});
    test("Decimal[] a = [1,2,3]; a instanceof Decimal[] && a.sum() == 6", true);
    test("Decimal[][] a = [[1],[2,3]]; a instanceof Decimal[][] && a[1].sum() == 5", true);
    testError("Decimal[][] a = [1,[2],3]", "cannot cast");
    test("Decimal[] a = new Decimal[10]; a = [1L,2L,3L]", new BigDecimal[]{BigDecimal.valueOf(1), BigDecimal.valueOf(2), BigDecimal.valueOf(3)});
    test("Decimal[] a = new Decimal[10]; a = [1L,2D,3.0]", new BigDecimal[]{BigDecimal.valueOf(1), BigDecimal.valueOf(2.0), BigDecimal.valueOf(3.0)});
    test("Decimal[][] a = new Decimal[10][]; a = [[1L,2D,3.0]]; a[0]", new BigDecimal[]{BigDecimal.valueOf(1), BigDecimal.valueOf(2.0), BigDecimal.valueOf(3.0)});
    testError("Decimal[][] a = new Decimal[10][]; a = [[1L,'2D',3.0]]; a[0]", "incompatible types");
    test("Decimal[] a = new Decimal[10]; Decimal[] x = [1L,2D,3.0]; a = x", new BigDecimal[]{BigDecimal.valueOf(1), BigDecimal.valueOf(2.0), BigDecimal.valueOf(3.0)});
    test("Decimal[] a = new Decimal[10]; Decimal[] x = [1L,2D,3.0]; a = x", new BigDecimal[]{BigDecimal.valueOf(1), BigDecimal.valueOf(2.0), BigDecimal.valueOf(3.0)});
    test("Decimal[] a = new Decimal[10]; Decimal[] x = [1L,2D,3.0]; a = x", new BigDecimal[]{BigDecimal.valueOf(1), BigDecimal.valueOf(2.0), BigDecimal.valueOf(3.0)});
    test("Decimal[] a = new Decimal[10]; String[] x = ['a','b','c']; a = x", new BigDecimal[]{BigDecimal.valueOf(97), BigDecimal.valueOf(98), BigDecimal.valueOf(99)});
    testError("String[][] a = new String[10][]; a = [[1L,2D,3.0]]; a[0]", "cannot convert");
    testError("String[][] a = new String[10][]; int[][] x = [[1L,2D,3.0]]; a = x; a[0]", "cannot convert");
    testError("String[][] a = new String[10][]; def x = [[1L,2D,3.0]]; a = x; a[0]", "cannot convert");
    testError("String[] a = [[1L,2D,3.0]]; a", "cannot convert");
    test("Object[][] a = new Object[10][]; a = [[1L,2D,3.0]]; a[0]", new Object[]{1L,2D,BigDecimal.valueOf(3.0)});
    test("Object[][] a = new Object[10][]; int[][] x = [[1L,2D,3.0]]; a = x; a[0]", new Object[]{1,2,3});
    test("Object[][] a = new Object[10][]; int[][] x = [[1L,2D,3.0]]; a = (Object[][])x; a[0]", new Object[]{1,2,3});
    test("Object[] a = [[1L,2D,3.0]]; a", new Object[]{Utils.listOf(1L,2D,BigDecimal.valueOf(3.0))});
    test("Object[] a = [[1],[1,1],[4]]; int[] x = [2,3]; a[1] = x; int[][] i = a", new int[][]{new int[]{1}, new int[]{2,3}, new int[]{4}});
    test("[1,2,3] as int[]", new int[]{1,2,3});
    test("String[][] a = new String[10][]; int[][] x = [[1L,2D,3.0]]; a = x as String[][]; a[0]", new String[]{"1","2","3"});
    test("String[][] a = new String[10][]; def x = [[1L,2D,3.0]]; a = x as String[][]; a[0]", new String[]{"1","2.0","3.0"});
    test("String[] a = new String[10]; def x = [[1L,2D,3.0]]; a = x as String[]; a", new String[]{"[1, 2.0, 3.0]"});
    test("int[] x = [1,2,3]; x as List", Utils.listOf(1,2,3));
    test("int[][] x = [[1,2],[2],[3]]; def y = x as List; y[0] instanceof int[] && y[0].sum() == 3 && y[1] instanceof int[]", true);
    test("long[] x = [1,2,3]; x as List", Utils.listOf(1L,2L,3L));
    test("double[] x = [1,2,3]; x as List", Utils.listOf(1D,2D,3D));
    test("boolean[] x = [true,false,true]; x as List", Utils.listOf(true,false,true));
    test("([1,2,3] as int[]) == ([1,2,3] as int[])", true);
    test("([1,2,3] as int[]) == [1,2,3]", true);
  }

  @Test public void arrayComparisons() {
    test("new int[0] == []", true);
    test("int[] x = new int[0]; x == []", true);
    test("def x = new int[0]; x == []", true);
    test("([1,2,3] as int[]) == ([1,2,3] as int[])", true);
    test("([1,2,3] as int[]) == [1,2,3]", true);
    test("def x = [1,2,3] as int[]; x == ([1,2,3] as int[])", true);
    test("int[] x = [1,2,3]; x == ([1,2,3] as int[])", true);
    test("def x = [1,2,3] as int[]; x == [1,2,3]", true);
    test("int[] x = [1,2,3]; x == [1,2,3]", true);
    test("new int[0] === []", false);
    test("int[] x = new int[0]; x === []", false);
    test("def x = new int[0]; x === []", false);
    test("([1,2,3] as int[]) === ([1,2,3] as int[])", false);
    test("([1,2,3] as int[]) === [1,2,3]", false);
    test("def x = [1,2,3] as int[]; x === ([1,2,3] as int[])", false);
    test("int[] x = [1,2,3]; x === ([1,2,3] as int[])", false);
    test("def x = [1,2,3] as int[]; x === [1,2,3]", false);
    test("int[] x = [1,2,3]; x === [1,2,3]", false);
    test("new int[0] != []", false);
    test("int[] x = new int[0]; x != []", false);
    test("def x = new int[0]; x != []", false);
    test("([1,2,3] as int[]) != ([1,2,3] as int[])", false);
    test("([1,2,3] as int[]) != [1,2,3]", false);
    test("def x = [1,2,3] as int[]; x != ([1,2,3] as int[])", false);
    test("int[] x = [1,2,3]; x != ([1,2,3] as int[])", false);
    test("def x = [1,2,3] as int[]; x != [1,2,3]", false);
    test("int[] x = [1,2,3]; x != [1,2,3]", false);
    test("([1,2,3] as int[]) == ([1,2,3] as long[])", true);
    test("([1,2,3] as long[]) == [1,2,3]", true);
    test("def x = [1,2,3] as long[]; x == ([1,2,3] as int[])", true);
    test("int[] x = [1,2,3]; x == ([1,2,3] as long[])", true);
    test("def x = [1,2,3] as long[]; x == [1,2,3]", true);
    test("long[] x = [1,2,3]; x == [1,2,3]", true);
    test("long[][] x = [[1],[2],[3]]; x == [1,2,3]", false);
    test("long[][] x = [[1],[2],[3]]; x == [[1],[2],[3]]", true);
    test("long[][] x = [[1],[2],[3]]; x == [[1],[2] as int[],[3]]", true);
    test("String a = 'abc'; a == ['a','b','c']", false);
    test("String[] a = ['abc']; a == ['abc']", true);
    test("String[] a = ['abc']; a == ['abc'] as String[]", true);
    test("def a = ['abc']; a == ['abc'] as String[]", true);
    test("def a = ['abc'] as String[]; a == ['abc']", true);
    test("def a = ['abc',['x',['y']]] as String[]; a == ['abc', ['x',['y']]]", false);
    test("def a = ['abc',['x',['y']]] as String[]; a == ['abc', '''['x', ['y']]''']", true);
    test("([true, false] as boolean[]) == [true, false]", true);
    test("([true, false] as boolean[]) == [true, false]", true);
    test("def x = [true, false] as boolean[]; x == [true, false]", true);
    test("boolean[] x = [true, false]; x == [true, false]", true);
    test("boolean[] x = [true, false]; x == [1,0]", false);
    test("Decimal[] x = [1, 2]; x == [1,2]", true);
    test("Decimal[] x = [1, 2]; x == [1.0,2.0]", true);
    test("double[] x = [1, 2]; x == [1.0,2.0]", true);
    test("double[] x = [1, 2]; x == [1,2]", true);
    test("double[] x = [1, 2]; x == [1,2] as int[]", true);
  }

  @Test public void fieldAssignments() {
    testError("Map m = [a:1]; m*a = 2", "invalid lvalue");
    test("Map m = [:]; m.a = 1", 1);
    test("Map m = [:]; m.a = 1; m.a", 1);
    test("var m = [:]; m.a = 1", 1);
    test("var m = [:]; m.a = 1; m.a", 1);
    test("def m = [:]; m.a = 1", 1);
    test("def m = [:]; m.a = 1; m.a", 1);
    test("Map m; m.a = 1; m.a", 1);
    test("Map m; m.a = 1", 1);

    // def without initialiser is always null. We don't automatically create
    // the value for m itself. Only subfields are automatically created if
    // required when used as lvalues.
    testError("def m; m.a = 1", "null value");

    test("Map m; m.a.b = (byte)1", (byte)1);
    test("Map m; m.a.b = (byte)1; m.a.b", (byte)1);
    test("Map m; m.a.b = 1", 1);
    test("Map m; m.a.b = 1; m.a", Utils.mapOf("b",1));
    test("Map m; m.a.b.c = 1; m.a.b", Utils.mapOf("c",1));
    test("Map m; m.a.b.c = 1", 1);

    test("Map m; m.a[2] = 1", 1);
    test("Map m; m.a[2] = 1; m.a[2]", 1);
    test("Map m; m.a[2] = 1; m.a", Arrays.asList(null, null, 1));
    test("Map m; m.a[3].b[2].c = 1", 1);

    test("var m = [:]; m.a.b.c = 1; m.a.b", Utils.mapOf("c",1));
    test("def m = [:]; m.a.b.c = 1; m.a.b", Utils.mapOf("c",1));
    test("Map m = [:]; m.('a' + 'b').c = 1; m.ab.c", 1);
    test("Map m = [:]; def x = 'ab'; m.(x).c = 1; m.ab.c", 1);
    test("Map m = [:]; def x = 'ab'; m.('a'+'b').c = 1; m.(x).c", 1);

    test("Map m = [:]; m.a += 4", 4);
    test("Map m = [:]; m.a.b += 4", 4);
    test("def m = [:]; m.a.b += 4", 4);

    testError("def x = [:]; x.a['b'] = 1", "non-numeric value for index");
    test("Map m = [:]; m.a[1] = 4; m.a[1]", 4);
    test("Map m = [:]; m.a[1] += 4; m.a[1]", 4);
    test("def m = [:]; m.a[2].b += 4; m.a[2].b", 4);

    test("def m = [:]; m.a[0].c += 4; m.a[0].c", 4);
    test("Map m = [a:1]; m.a++", 1);
    test("Map m = [a:1]; m.a++; m.a", 2);
    test("Map m = [a:1]; ++m.a", 2);
    test("Map m = [a:1]; ++m.a; m.a", 2);
    test("Map m = [:]; m.a++", 0);
    test("Map m = [:]; ++m.a", 1);
    test("Map m = [:]; m.a++; m.a", 1);
    test("Map m = [:]; ++m.a; m.a", 1);
    test("Map m = [:]; m.a.b++", 0);
    test("Map m = [:]; ++m.a.b", 1);
    test("Map m = [:]; m.a.b++; m.a.b", 1);
    test("Map m = [:]; ++m.a.b; m.a.b", 1);
    test("Map m = [:]; m.a.b *= 1", 0);
    test("Map m = [:]; m.a.b *= 1; m.a.b", 0);

    test("def m = []; m[0].a.b = 1", 1);
    test("def m = []; m[0].a.b += 1", 1);
    test("def m = []; m[0].a.b += 2; m[0].a.b ", 2);
    test("def m = []; m[0]++", 0);
    test("def m = []; m[0]++; m[0]", 1);
    test("def m = []; ++m[0]", 1);
    test("def m = []; ++m[0]; m[0]", 1);
    test("def m = []; m[1].a++", 0);
    test("def m = []; m[1].a++; m[1].a", 1);
    test("def m = []; ++m[1].a", 1);
    test("def m = []; ++m[1].a; m[1].a", 1);
    test("def m = []\nm[2][0]=1\nm[0][0]=2", 2);
    test("def m = []; m[2] = 3; m[0] = 1; m[0]+m[2]", 4);
    test("def m = []; m[2][2] = 3; m[0][2] = 1", 1);
    test("def m = []; m[2][2] = 3; m[0][2] = 1; m[2][0]=2; m[2][2]+m[0][2]+m[2][0]", 6);

    testError("def m = [:]; m.a.b() = 1", "invalid lvalue");
    testError("def m = [:]; m.a.['b']", "unexpected token '['");
    testError("def m = [:]; m.a?.?['b']", "unexpected token '?['");
    test("Map m; sleep(0,m).a.b = 1", 1);
    test("Map m; sleep(0,m).(sleep(0,'a')).b = 1", 1);
    test("def x; (x?:[:]).a = 2", 2);
    test("Map x; (x?:[:]).a = 2", 2);
    test("Map x; x.('a' + 'b') = 2; x.ab", 2);
    test("Map x; x.(true ? 'a' : 'b') = 2; x.a", 2);
  }

  @Test public void conditionalAssignment() {
    test("Map x = [a:1]; 2 + (x.a?=3)", 5);
    test("Map x = [a:1]; (x.a?=3) + 2", 5);
    test("def x = [:]; int i; i ?= x.a", null);
    test("def x; int i; i ?= x.a", null);
    test("def x = [a:3]; long y; y ?= x.a", 3L);
    test("Map x; int i; i ?= x.a", null);
    test("Map x = [a:[:]]; byte i = 5; i ?= x.a.b.c; i", (byte)5);
    test("Map x = [a:[:]]; int i = 5; i ?= x.a.b.c; i", 5);
    test("Map x = [a:[:]]; int i = 5; i ?= x.a.b[0].c; i", 5);
    test("Map x = [a:[]]; int i = 5; i ?= x.a[2].b[0].c; i", 5);
    test("Map x = [a:[]]; int i = 5; i ?= x.a[2]?.b?[0].c; i", 5);
    test("Map m = [a:[]]; m.a ?= m.a", Utils.listOf());
    test("Map m = [a:[]]; m.a ?= m.b", null);
    test("Map m = [a:3]; m.a ?= m.b; m.a", 3);
    test("Map m = [a:[]]; def x; m.a ?= x", null);
    test("Map m; def x; m.a.b.c ?= x.a", null);
    test("Map m; def x; m.a.b.c ?= x.a; m.a", null);
    test("Map m; def x; m.a.b.c ?= x.a; m.a?.b", null);
    test("Map m; def x = [a:3]; m.a.b.c ?= x.a; m.a?.b", Utils.mapOf("c",3));
    test("Map m; def x = [a:3]; m.a.b ?= 3", 3);
    test("def x; x ?= 2", 2);
    test("def x; x ?= 2L", 2L);
    test("def x; x ?= 2.0D", 2.0D);
    test("def x; x ?= 2.0", "#2.0");
    test("def x = [:]; x.a[1].b ?= 2", 2);
    test("def x = [:]; x.a[1].b ?= 2L", 2L);
    test("def x = [:]; x.a[1].b ?= 2.0D", 2.0D);
    test("def x = [:]; x.a[1].b ?= 2.0", "#2.0");
    test("int x; x ?= 2", 2);
    test("long x; x ?= 2L", 2L);
    test("double x; x ?= 2.0D", 2.0D);
    test("Decimal x; x ?= 2.0", "#2.0");
    test("def y; int x = 1; x ?= y", null);
    test("def y; long x = 1; x ?= y", null);
    test("def y; double x = 1; x ?= y", null);
    test("def y; Decimal x = 1; x ?= y", null);
    test("def y; int x = 1; x ?= y; x", 1);
    test("def y; long x = 1; x ?= y; x", 1L);
    test("def y; double x = 1; x ?= y; x", 1D);
    test("def y; Decimal x = 1; x ?= y; x", "#1");
    test("def y; String x = '1'; x ?= y", null);
    test("def y; String x = '1'; x ?= y; x", "1");

    test("Map m; def x = [a:3]; 1 + (m.a.b ?= 2) + (m.a.c ?= 3)", 6);
    testError("Map m; def x = [a:3]; 1 + (m.a.b ?= m.xxx) + (m.a.c ?= 3)", "null operand");
    test("def x = [:]; def y; 1 + (x.a.b ?= 2) + (x.a.c ?= 3)", 6);
    test("def x = [a:3]; def y; y ?= x.z", null);
    test("def x = [a:3]; def y; y ?= x.a", 3);
    test("def x = [a:3]; def y; (y ?= x.a) + (y ?= x.a)", 6);
    testError("def x = [a:3]; def y; (y ?= x.a) + (y ?= x.xxx)", "null operand");
    testError("def x = [a:3]; def y; (y ?= x.xxx) + (y ?= x.xxx)", "null operand");
    test("def x = [a:3]; def y; (y ?= x.a) + (x.b.b[2].c ?= 3)", 6);
    testError("def x = [a:3]; def y; (y ?= x.x) + (x.a.b[2].c ?= x.x)", "null operand");
    test("Map m; def x = [a:3]; (m.a.b.c ?= x.a) + (m.a.b ?= 3)", 6);

    test("def x = [a:3]; def y; x.b += (y ?= x.a)", 3);
    testError("def x = [a:3]; def y; x.b += (y ?= x.xxx)", "null operand");

    test("def x; 1 + (x ?= 2)", 3);
    test("def x; 1 + (x ?= 2L)", 3L);
    test("def x; 1 + (x ?= 2.0D)", 3D);
    test("def x; 1 + (x ?= 2.0)", "#3.0");

    test("def x; def y; (x ?= 1) + (y ?= 2)", 3);
    test("def x; def y; def z = 1; (x ?= z) + (y ?= z)", 2);
    test("Map m; Map x; (m.a ?= 1) + (x.a ?= 2)", 3);
    test("Map m; Map x; m.a.b.c = 1; m.a.(x.b ?= 'b').c += 2", 3);
    test("Map m; Map x; m.a.b.c = 1; m.a.(x.b ?= 'b').c += (x.c ?= 2)", 3);
    test("Map m; Map x; m.a.b.c = 1; m.a.(x.b ?= 'b').c += (x.c ?= 2); m.a.b.c", 3);
    test("Map m; def x; m.a.b.c = 1; m.a.(x ?= 'b').c += 2", 3);
    test("Map m; def x; m.a.b.c = 1; m.a.(x ?= 'b').c += (x ?= 2)", 3);
    test("Map m; def x; m.a.b.c = 1; m.a.(x ?= 'b').c += (x ?= 2); m.a.b.c", 3);
    test("def m = [:]; Map x; (m.a ?= 1) + (x.a ?= 2)", 3);
    test("def m = [:]; Map x; m.a.b.c = 1; m.a.(x.b ?= 'b').c += 2", 3);
    test("def m = [:]; Map x; m.a.b.c = 1; m.a.(x.b ?= 'b').c += (x.c ?= 2)", 3);
    test("def m = [:]; Map x; m.a.b.c = 1; m.a.(x.b ?= 'b').c += (x.c ?= 2); m.a.b.c", 3);
    test("def m = [:]; def x; m.a.b.c = 1; m.a.(x ?= 'b').c += 2", 3);
    test("def m = [:]; def x; m.a.b.c = 1; m.a.(x ?= 'b').c += (x ?= 2)", 3);
    test("def m = [:]; def x; m.a.b.c = 1; m.a.(x ?= 'b').c += (x ?= 2); m.a.b.c", 3);
    test("def m = [:]; def x; m.a.b.c = 1; m.a.(x ?= (x ?= 'b')).c += 2", 3);
    test("def m = [:]; def x; m.a.b.c = 1; m.a.(x ?= (x ?= true ? true ? 'b' : 'z' : 'zz')).c += (x ?= 2)", 3);
    test("def x; def y; y ?= (y ?= x.a); y", null);
    test("def x; def y; y ?= (y ?= x.size()); y", null);
    test("def x; def y; y ?= (y ?= x.a) ?: 4; y", 4);
    test("def x; def y; y ?= (y ?= x.a) ?: (y ?= x.b) ?: 4; y", 4);
    test("def x; def y; y ?= (y ?= x.size()) ?: 4; y", 4);
    test("def x; def y; y ?= (y ?= 3) + ((y ?= x.size()) ?: 4); y", 7);
    testError("String x; x.a = 'abc'", "invalid object type");
    testError("String x; x.a += 'abc'", "invalid object type");
    testError("String x; x['a'] += 'abc'", "invalid object type");
    testError("String x; x[0] += 'abc'", "cannot assign to element of string");
  }

  @Test public void nullValues() {
    test("String s; s", "");
    test("String s = null", null);
    test("Map x; x", Utils.mapOf());
    test("Map x = null; x", null);
    test("List x; x", Utils.listOf());
    test("List x = null; x", null);
    testError("int i = null", "cannot convert null");
    testError("1.0 + null", "null operand");
    testError("def x; int i = x", "cannot convert null");
    test("String x = null; x = null", null);
    test("List x = null; x = null", null);
    test("Map x = null; x = null", null);
    test("def f(String x){x}; f(null)", null);
    test("def f(List x){x}; f(null)", null);
    test("def f(Map x){x}; f(null)", null);
  }

  @Test public void stringIndexing() {
    test("'abc'[0]", "a");
    testError("''[0]", "index out of bounds");
    testError("''[-1]", "index out of bounds");
    test("def x = 'abcdef'; def i = 3; x[(byte)i]", "d");
    test("def x = 'abcdef'; def i = 3; x[i]", "d");
    test("def x = 'abcdef'; def i = -1; x[i]", "f");
    test("def x = 'abcdef'; def i = -6; x[i]", "a");
    testError("def x = 'abcdef'; def i = -7; x[i]", "index out of bounds");
    test("def x = 'abcdef'; def i = 3; x?[i]", "d");
    test("String x = 'abcdef'; def i = 3; x[i]", "d");
    test("String x = 'abcdef'; def i = -1; x[i]", "f");
    test("String x = 'abcdef'; def i = -6; x[i]", "a");
    testError("String x = 'abcdef'; def i = -7; x[i]", "index out of bounds");
    test("String x = 'abcdef'; def i = 3; x?[i]", "d");
    test("var x = 'abcdef'; def i = 3; x[i]", "d");
    test("var x = 'abcdef'; def i = 3; x?[i]", "d");
    test("def x; x?[0]", null);
    testError("String s = 'abc'; s[1] = s[2]", "cannot assign to element of string");
    testError("String s = 'abc'; s.a", "invalid object type");
    testError("def s = 'abc'; s.a", "field access not supported");
    testError("def s = 'abc'; s.a()", "no such method");
  }

  @Test public void ifStatement() {
    test("if (true) true", true);
    test("if (true) true else false", true);
    test("if (false) true", null);
    test("if (false) true else false", false);
    testError("if (true) int i = 2", "unexpected token 'int'");
    test("byte x; if (x) { x += 1 } else { x += 2 }", (byte)2);
    test("int x; if (x) { x += 1 } else { x += 2 }", 2);
    test("int x; if (x) { x += 1 }", null);
    test("int x; if (x) { x += 1; x+= 2\n}", null);
    test("int x; if (x) { x += 1 } else { x += 2;\n}", 2);
    test("int x; if (x) { x += 1 } else { x += 2\n}", 2);
    test("int x; if (x)\n{\nx += 1\nx+=7\n}\n else \n{\n x += 2;\n x+=3 }\n", 5);
    test("long x = 2; if (x * 2 == 4) ++x", 3L);
    test("long x = 2; if (x * 2 == 4) ++x else if (!x) { x-- }", 3L);
    test("def x = 2; if (x * 2 < 5) ++x else { --x }", 3);
    test("def x = 2; if (x * 2 < -5) ++x else { --x }", 1);
    test("def x = 2; if (x == 2) { def x = 5; x++ }; x", 2);
    test("def x = 2; if (x == 2) { def x = 5; x++; if (true) { def x = 1; x-- } }; x", 2);
    testError("if (true) { if(true){1} if(true){1} }", "expecting end of statement");
    test("if (true) { if(true){1}; if(true){1} }", 1);
    testError("int f() { if (true) { println } }; f()", "implicit return of null");
    test("if (true) {}", null);
  }

  @Test public void ifUnless() {
    test("true if true", true);
    test("true unless true", null);
    test("def x = 3; x = 4 unless x == 3; x", 3);
    test("def x = 3; x = 4 unless x != 3; x", 4);
    test("def x = 3; x = 4 if x != 3; x", 3);
    test("def x = 3; x = 4 and return x/2 if x == 3; x", 2);
    testError("def x = 3; x = 4 and return x/2 if x == 3 unless true; x", "unexpected token 'unless'");
    testError("unless true", "unexpected token 'unless'");
    testError("if true", "unexpected token 'true'");
    test("def x; x ?= x if true", null);
    test("def x; x ?= 1 if true", 1);
    test("int x; for (int i=0; i < 10; i++) { continue if i > 5; x += i }; x", 15);
    test("int x; for (int i=0; i < 10; i++) { break unless i < 5; x += i }; x", 10);
    test("def it = 'abc'; return if /x/r; s/b/x/g;", "axc");
    test("return if true; 1", null);
    test("return if false; 1", 1);
    test("return unless true; 1", 1);
    test("return unless false; 1", null);
    test("return 7 if true; 1", 7);
    test("return 7 if false; 1", 1);
    test("return 7 unless true; 1", 1);
    test("return 7 unless false; 1", 7);
    test("return and true if true; 1", null);
    test("return and true if false; 1", 1);
    test("return and true unless true; 1", 1);
    test("return and true unless false; 1", null);
    test("true and return if true; 1", null);
    test("false or return if false; 1", 1);
    test("true and return unless true; 1", 1);
    test("false or return unless false; 1", null);
  }

  @Test public void booleanNonBooleanComparisons() {
    test("true != 1", true);
    test("true == 1", false);
    test("(byte)1 != false", true);
    test ("(byte)1 == false", false);
    test("1 != false", true);
    test ("1 == false", false);
    testError("(byte)1 < true", "cannot be compared");
    testError("1 < true", "cannot be compared");
    testError("1L < true", "cannot be compared");
    testError("1D < true", "cannot be compared");
    testError("1.0 < true", "cannot be compared");
    test("true != 1L", true);
    test("true == 1L", false);
    test("1L != false", true);
    test ("1L == false", false);
    test("true != 1D", true);
    test("true == 1D", false);
    test("1D != false", true);
    test ("1D == false", false);
    test("true != 1.0", true);
    test("true == 1.0", false);
    test("1.0 != false", true);
    test ("1.0 == false", false);
    test("boolean x = true; int y = 1; x != y", true);
    test("boolean x = true; int y = 1; x == y", false);
    test("int x = 1; boolean y = false; x != y", true);
    test ("int x = 1; boolean y = false; x == y", false);
    test("def x = true; def y = 1; x != y", true);
    test("def x = true; def y = 1; x == y", false);
    test("def x = 1; def y = false; x != y", true);
    test ("def x = 1; def y = false; x == y", false);
    test("boolean x = true; long y = 1; x != y", true);
    test("boolean x = true; long y = 1; x == y", false);
    test("long x = 1; boolean y = false; x != y", true);
    test ("long x = 1; boolean y = false; x == y", false);
    test("def x = true; def y = 1L; x != y", true);
    test("def x = true; def y = 1L; x == y", false);
    test("def x = 1L; def y = false; x != y", true);
    test ("def x = 1L; def y = false; x == y", false);

    test("1 == 1.0", true);
    test("1 == 1L", true);
    test("1 == 1D", true);
    test("1L == 1D", true);
    test("1L == 1.0", true);
    test("1D == 1.0", true);
    test("1 != 1.0", false);
    test("1 != 1L", false);
    test("1 != 1D", false);
    test("1L != 1D", false);
    test("1L != 1.0", false);
    test("1D != 1.0", false);
    test("def x = 1; def y = 1.0; x == y", true);
    test("def x = 1; def y = 1L; x == y", true);
    test("def x = 1; def y = 1D; x == y", true);
    test("def x = 1L; def y = 1D; x == y", true);
    test("def x = 1L; def y = 1.0; x == y", true);
    test("def x = 1D; def y = 1.0; x == y", true);
    test("def x = 1; def y = 1.0; x != y", false);
    test("def x = 1; def y = 1L; x != y", false);
    test("def x = 1; def y = 1D; x != y", false);
    test("def x = 1L; def y = 1D; x != y", false);
    test("def x = 1L; def y = 1.0; x != y", false);
    test("def x = 1D; def y = 1.0; x != y", false);

    test("boolean x = true; double y = 1; x != y", true);
    test("boolean x = true; double y = 1; x == y", false);
    test("double x = 1; boolean y = false; x != y", true);
    test ("double x = 1; boolean y = false; x == y", false);
    test("def x = true; def y = 1D; x != y", true);
    test("def x = true; def y = 1D; x == y", false);
    test("def x = 1D; def y = false; x != y", true);
    test ("def x = 1D; def y = false; x == y", false);

    test("boolean x = true; Decimal y = 1; x != y", true);
    test("boolean x = true; Decimal y = 1; x == y", false);
    test("Decimal x = 1; boolean y = false; x != y", true);
    test ("Decimal x = 1; boolean y = false; x == y", false);
    test("def x = true; def y = 1.0; x != y", true);
    test("def x = true; def y = 1.0; x == y", false);
    test("def x = 1.0; def y = false; x != y", true);
    test ("def x = 1.0; def y = false; x == y", false);

    test("boolean x = true; String y = '1'; x != y", true);
    test("boolean x = true; String y = '1'; x == y", false);
    test("String x = '1'; boolean y = false; x != y", true);
    test ("String x = '1'; boolean y = false; x == y", false);
    test("def x = true; def y = '1'; x != y", true);
    test("def x = true; def y = '1'; x == y", false);
    test("def x = '1'; def y = false; x != y", true);
    test ("def x = '1'; def y = false; x == y", false);

    test("int x = 1; String y = '1'; x != y", true);
    test("int x = 1; String y = '1'; x == y", false);
    test("String x = '1'; int y = 1; x != y", true);
    test ("String x = '1'; int y = 1; x == y", false);
    test("def x = 1; def y = '1'; x != y", true);
    test("def x = 1; def y = '1'; x == y", false);
    test("def x = '1'; def y = 1; x != y", true);
    test ("def x = '1'; def y = 1; x == y", false);

    test("[1,2,3] == [1,2,3]", true);
    test("[1,2,3] != [1,2,3]", false);
    test("[a:1,b:[1,2,3],c:[x:1]] == [a:1,b:[1,2,3],c:[x:1]]", true);
    test("[a:1,b:[1,2,3],c:[x:1]] != [a:1,b:[1,2,3],c:[x:1]]", false);
    test("[1,2,3] == 1", false);
    test("[a:1,b:[1,2,3],c:[x:1]] == 1", false);
    test("[1,2,3] != 1", true);
    test("[a:1,b:[1,2,3],c:[x:1]] != 1", true);
    test("def x = [1,2,3]; def y= [1,2,3]; x == y", true);
    test("def x = [1,2,3]; def y = [1,2,3]; x != y", false);
    test("def x = [a:1,b:[1,2,3],c:[x:1]]; def y = [a:1,b:[1,2,3],c:[x:1]]; x == y", true);
    test("def x = [a:1,b:[1,2,3],c:[x:1]]; def y = [a:1,b:[1,2,3],c:[x:1]]; x != y", false);
    test("def x = [1,2,3]; def y = 1; x == y", false);
    test("def x = [a:1,b:[1,2,3],c:[x:1]]; def y = 1; x == y", false);
    test("def x = [1,2,3]; def y = 1; x != y", true);
    test("def x = [a:1,b:[1,2,3],c:[x:1]]; def y = 1; x != y", true);
    test("[] == []", true);
    test("[] != []", false);
    test("[] == [:]", false);
    test("[] != [:]", true);
    test("def x = []; def y = []; x == y", true);
    test("def x = []; def y = []; x != y", false);
    test("def x = []; def y = [:]; x == y", false);
    test("def x = []; def y = [:]; x != y", true);
  }

  @Test public void tripleEqualsNotEquals() {
    test("true !== (byte)1", true);
    test("true === (byte)1", false);
    test("true !== 1", true);
    test("true === 1", false);
    test("1 !== false", true);
    test ("1 === false", false);
    test("true !== 1L", true);
    test("true === 1L", false);
    test("1L !== false", true);
    test ("1L === false", false);
    test("true !== 1D", true);
    test("true === 1D", false);
    test("1D !== false", true);
    test ("1D === false", false);
    test("true !== 1.0", true);
    test("true === 1.0", false);
    test("1.0 !== false", true);
    test ("1.0 === false", false);
    test("boolean x = true; int y = 1; x !== y", true);
    test("boolean x = true; int y = 1; x === y", false);
    test("int x = 1; boolean y = false; x !== y", true);
    test ("int x = 1; boolean y = false; x === y", false);
    test("def x = true; def y = 1; x !== y", true);
    test("def x = true; def y = 1; x === y", false);
    test("def x = 1; def y = false; x !== y", true);
    test ("def x = 1; def y = false; x === y", false);
    test("boolean x = true; long y = 1; x !== y", true);
    test("boolean x = true; long y = 1; x === y", false);
    test("long x = 1; boolean y = false; x !== y", true);
    test ("long x = 1; boolean y = false; x === y", false);
    test("def x = true; def y = 1L; x !== y", true);
    test("def x = true; def y = 1L; x === y", false);
    test("def x = 1L; def y = false; x !== y", true);
    test ("def x = 1L; def y = false; x === y", false);

    test("1 === 1", true);
    test("(byte)1 === 1", true);
    test("(byte)1 === (byte)1", true);
    test("(byte)1 === (byte)0", false);
    test("(byte)1 === 1L", true);
    test("1 === 1L", true);
    test("1 === 1D", true);
    test("(byte)1 === 1D", true);
    test("1 === 1.0", true);
    test("1L === 1D", true);
    test("1L === 1.0", true);
    test("1D === 1.0", true);
    test("1 !== 1L", false);
    test("1 !== 1D", false);
    test("(byte)1 !== 1.0", false);
    test("1 !== 1.0", false);
    test("1L !== 1D", false);
    test("1L !== 1.0", false);
    test("1D !== 1.0", false);
    test("def x = 1; def y = 1.0; x === y", true);
    test("def x = 1; def y = 1L; x === y", true);
    test("def x = 1; def y = 1D; x === y", true);
    test("def x = 1L; def y = 1D; x === y", true);
    test("def x = 1L; def y = 1.0; x === y", true);
    test("def x = 1D; def y = 1.0; x === y", true);
    test("def x = (byte)1; def y = 1.0; x !== y", false);
    test("def x = 1; def y = 1.0; x !== y", false);
    test("def x = 1; def y = 1L; x !== y", false);
    test("def x = 1; def y = 1D; x !== y", false);
    test("def x = 1L; def y = 1D; x !== y", false);
    test("def x = 1L; def y = 1.0; x !== y", false);
    test("def x = 1D; def y = 1.0; x !== y", false);

    test("boolean x = true; double y = 1; x !== y", true);
    test("boolean x = true; double y = 1; x === y", false);
    test("double x = 1; boolean y = false; x !== y", true);
    test ("double x = 1; boolean y = false; x === y", false);
    test("def x = true; def y = 1D; x !== y", true);
    test("def x = true; def y = 1D; x === y", false);
    test("def x = 1D; def y = false; x !== y", true);
    test ("def x = 1D; def y = false; x === y", false);

    test("boolean x = true; Decimal y = 1; x !== y", true);
    test("boolean x = true; Decimal y = 1; x === y", false);
    test("Decimal x = 1; boolean y = false; x !== y", true);
    test ("Decimal x = 1; boolean y = false; x === y", false);
    test("def x = true; def y = 1.0; x !== y", true);
    test("def x = true; def y = 1.0; x === y", false);
    test("def x = 1.0; def y = false; x !== y", true);
    test ("def x = 1.0; def y = false; x === y", false);

    test("boolean x = true; String y = '1'; x !== y", true);
    test("boolean x = true; String y = '1'; x === y", false);
    test("String x = '1'; boolean y = false; x !== y", true);
    test ("String x = '1'; boolean y = false; x === y", false);
    test("def x = true; def y = '1'; x !== y", true);
    test("def x = true; def y = '1'; x === y", false);
    test("def x = '1'; def y = false; x !== y", true);
    test ("def x = '1'; def y = false; x === y", false);

    test("byte x = 1; String y = '1'; x !== y", true);
    test("int x = 1; String y = '1'; x !== y", true);
    test("int x = 1; String y = '1'; x === y", false);
    test("String x = '1'; int y = 1; x !== y", true);
    test ("String x = '1'; int y = 1; x === y", false);
    test("def x = 1; def y = '1'; x !== y", true);
    test("def x = 1; def y = '1'; x === y", false);
    test("def x = '1'; def y = 1; x !== y", true);
    test ("def x = '1'; def y = 1; x === y", false);

    // Can only run these tests if not wrapping in sleep(0,x) since that turns constants
    // into non-constants (because we don't know what will happen to return results)
    {
      useAsyncDecorator = false;
      test("[1,2,3] === [1,2,3]", true);
      test("[1,2,3] !== [1,2,3]", false);
      test("[a:1,b:[1,2,3],c:[x:1]] === [a:1,b:[1,2,3],c:[x:1]]", true);
      test("[a:1,b:[1,2,3],c:[x:1]] !== [a:1,b:[1,2,3],c:[x:1]]", false);
      test("[] === []", true);
      test("[] !== []", false);
      test("[] === [:]", false);
      test("[] !== [:]", true);
      useAsyncDecorator = true;
    }

    test("[1,2,3] === 1", false);
    test("[a:1,b:[1,2,3],c:[x:1]] === 1", false);
    test("[1,2,3] !== 1", true);
    test("[a:1,b:[1,2,3],c:[x:1]] !== 1", true);
    test("def x = [1,2,3]; def y= [1,2,3]; x === y", false);
    test("def x = [1,2,3]; def y= x; x === y", true);
    test("def x = [1,2,3]; def y = [1,2,3]; x !== y", true);
    test("def x = [a:1,b:[1,2,3],c:[x:1]]; def y = [a:1,b:[1,2,3],c:[x:1]]; x === y", false);
    test("def x = [a:1,b:[1,2,3],c:[x:1]]; def y = x; x === y", true);
    test("def x = [a:1,b:[1,2,3],c:[x:1]]; def y = x; x !== y", false);
    test("def x = [a:1,b:[1,2,3],c:[x:1]]; def y = [a:1,b:[1,2,3],c:[x:1]]; x !== y", true);
    test("def x = [1,2,3]; def y = 1; x === y", false);
    test("def x = [a:1,b:[1,2,3],c:[x:1]]; def y = 1; x === y", false);
    test("def x = [1,2,3]; def y = 1; x !== y", true);
    test("def x = [a:1,b:[1,2,3],c:[x:1]]; def y = 1; x !== y", true);
    test("def x = []; def y = []; x === y", false);
    test("def x = []; def y = []; x !== y", true);
    test("def x = []; def y = [:]; x === y", false);
    test("def x = []; def y = [:]; x !== y", true);
  }

  @Test public void errorLineNumber() {
    testError("def a = true\ndef b = 1\n a <=> b", "@ line 3");
  }

  @Test public void constBooleanComparisons() {
    test("1 == true", false);
    test("1 == false", false);
    test("0 == false", false);
    test("0 == true", false);
    test("null == null", true);
    test("null == true", false);
    test("true == null", false);
    test("null == false", false);
    test("false == null", false);
    test("false == true", false);
    test("false == false", true);
    test("true == false", false);
    test("true == true", true);

    test("null != null", false);
    test("null != true", true);
    test("true != null", true);
    test("null != false", true);
    test("false != null", true);
    test("false != true", true);
    test("false != false", false);
    test("true != false", true);
    test("true != true", false);

    test("null < null", false);
    test("null < true", true);
    test("true < null", false);
    test("null < false", true);
    test("false < null", false);
    test("false < true", true);
    test("false < false", false);
    test("true < false", false);
    test("true < true", false);

    test("null <= null", true);
    test("null <= true", true);
    test("true <= null", false);
    test("null <= false", true);
    test("false <= null", false);
    test("false <= true", true);
    test("false <= false", true);
    test("true <= false", false);
    test("true <= true", true);

    test("null > null", false);
    test("null > true", false);
    test("true > null", true);
    test("null > false", false);
    test("false > null", true);
    test("false > true", false);
    test("false > false", false);
    test("true > false", true);
    test("true > true", false);

    test("null >= null", true);
    test("null >= true", false);
    test("true >= null", true);
    test("null >= false", false);
    test("false >= null", true);
    test("false >= true", false);
    test("false >= false", true);
    test("true >= false", true);
    test("true >= true", true);
  }

  BiConsumer<String,String> comparisonTests = (smaller, bigger) -> {
    String init = "byte b2 = (byte)2; int i3=3; long l5=5L; double d7=7.0D; Decimal dec13=13.0; String sabc = 'abc';" +
                  "def db2 = (byte)2; def di3=3; def dl5=5L; def dd7=7.0D; def ddec13=13.0; def dsabc = 'abc';";
    BiConsumer<String,Object> _test = (code,expected) -> test(init + code, expected);

    _test.accept("null == " + bigger, false);
    _test.accept(bigger + " == null", false);
    _test.accept("null == " + smaller, false);
    _test.accept(smaller + " == null", false);
    _test.accept(smaller + " == " + bigger, false);
    _test.accept(smaller + " == " + smaller, true);
    _test.accept(bigger + " == " + smaller, false);
    _test.accept(bigger + " == " + bigger, true);

    _test.accept("null != " + bigger, true);
    _test.accept(bigger + " != null", true);
    _test.accept("null != " + smaller, true);
    _test.accept(smaller + " != null", true);
    _test.accept(smaller + " != " + bigger, true);
    _test.accept(smaller + " != " + smaller, false);
    _test.accept(bigger + " != " + smaller, true);
    _test.accept(bigger + " != " + bigger, false);

    _test.accept("null < " + bigger, true);
    _test.accept(bigger + " < null", false);
    _test.accept("null < " + smaller, true);
    _test.accept(smaller + " < null", false);
    _test.accept(smaller + " < " + bigger, true);
    _test.accept(smaller + " < " + smaller, false);
    _test.accept(bigger + " < " + smaller, false);
    _test.accept(bigger + " < " + bigger, false);

    _test.accept("null <= " + bigger, true);
    _test.accept(bigger + " <= null", false);
    _test.accept("null <= " + smaller, true);
    _test.accept(smaller + " <= null", false);
    _test.accept(smaller + " <= " + bigger, true);
    _test.accept(smaller + " <= " + smaller, true);
    _test.accept(bigger + " <= " + smaller, false);
    _test.accept(bigger + " <= " + bigger, true);

    _test.accept("null > " + bigger, false);
    _test.accept(bigger + " > null", true);
    _test.accept("null > " + smaller, false);
    _test.accept(smaller + " > null", true);
    _test.accept(smaller + " > " + bigger, false);
    _test.accept(smaller + " > " + smaller, false);
    _test.accept(bigger + " > " + smaller, true);
    _test.accept(bigger + " > " + bigger, false);

    _test.accept("null >= " + bigger, false);
    _test.accept(bigger + " >= null", true);
    _test.accept("null >= " + smaller, false);
    _test.accept(smaller + " >= null", true);
    _test.accept(smaller + " >= " + bigger, false);
    _test.accept(smaller + " >= " + smaller, true);
    _test.accept(bigger + " >= " + smaller, true);
    _test.accept(bigger + " >= " + bigger, true);

    _test.accept(bigger + "<=>" + smaller, 1);
    _test.accept(smaller + "<=>" + bigger, -1);
    _test.accept(smaller + "<=>" + smaller, 0);
    _test.accept(bigger + "<=>" + bigger, 0);
  };

  @Test public void constComparisons() {
    comparisonTests.accept("(byte)3", "(byte)7");
    comparisonTests.accept("(byte)3", "7");
    comparisonTests.accept("-3", "(byte)7");
    comparisonTests.accept("-3", "7");
    comparisonTests.accept("-3L", "7L");
    comparisonTests.accept("-3.0D", "7.0D");
    comparisonTests.accept("(byte)3", "7.0D");
    comparisonTests.accept("-3.0D", "(byte)7");
    comparisonTests.accept("-3.0", "7.0");

    comparisonTests.accept("(byte)3", "7L");
    comparisonTests.accept("-3", "7L");
    comparisonTests.accept("-3L", "(byte)7");
    comparisonTests.accept("-3L", "7");
    comparisonTests.accept("(byte)3", "7D");
    comparisonTests.accept("-3", "7D");
    comparisonTests.accept("-3D", "(byte)7");
    comparisonTests.accept("-3D", "7");
    comparisonTests.accept("-3L", "7D");
    comparisonTests.accept("-3D", "7L");

    comparisonTests.accept("(byte)3", "7.0");
    comparisonTests.accept("-3", "7.0");
    comparisonTests.accept("-3.0", "(byte)7");
    comparisonTests.accept("-3.0", "7");
    comparisonTests.accept("-3L", "7.0");
    comparisonTests.accept("-3.0", "7L");
    comparisonTests.accept("-3.0D", "7.0");
    comparisonTests.accept("-3.0", "7.0D");

    comparisonTests.accept("'axcde'", "'azcde'");
    comparisonTests.accept("'axcde'", "'axcdef'");

    comparisonTests.accept("4*2", "-3*-7");
  }


  @Test public void expressionComparisons() {
    //String init = "byte b2 = 2; int i3=3; long l5=5L; double d7=7.0D; Decimal dec13=13.0; String sabc = 'abc';" +
    //              "def db2 = (byte)2; def di3=3; def dl5=5L; def dd7=7.0D; def ddec13=13.0; def dsabc = 'abc';";
    comparisonTests.accept("l5", "-b2");
    comparisonTests.accept("-i3", "l5");
    comparisonTests.accept("-i3 * d7", "dec13");
    comparisonTests.accept("-i3 * l5", "dec13");
    comparisonTests.accept("l5", "-db2 * 5");
    comparisonTests.accept("-di3 * 5", "l5");
    comparisonTests.accept("-di3 * (byte)5", "l5");
    comparisonTests.accept("-di3 * 5", "l5 * ddec13");
    comparisonTests.accept("-di3 * (byte)5", "l5 * ddec13");

    comparisonTests.accept("sabc", "sabc + 'z'");
    comparisonTests.accept("sabc", "dsabc + 'z'");
    comparisonTests.accept("sabc * 2", "sabc * 3");
    comparisonTests.accept("dsabc * 2", "dsabc * 3");

    test("def x = 2L; 2 * x == 4", true);
    test("long x = 2L; 2 * x == 4", true);
  }

  @Test public void compareOperator() {
    test("(byte)1 <=> null", 1);
    test("1 <=> null", 1);
    test("null <=> null", 0);
    test("null <=> (byte)1", -1);
    test("null <=> 1", -1);
    test("'' <=> null", 1);
    test("null <=> ''", -1);
    test("(byte)0 <=> null", 1);
    test("0 <=> null", 1);
    test("null <=> (byte)0", -1);
    test("null <=> 0", -1);
    test("1L <=> null", 1);
    test("null <=> 1L", -1);
    test("1D <=> null", 1);
    test("null <=> 1D", -1);
    test("1.0 <=> null", 1);
    test("null <=> 1.0", -1);

    test("def x = (byte)1; def y = null; x <=> y", 1);
    test("def x = 1; def y = null; x <=> y", 1);
    test("def x = null; def y = null; x <=> y", 0);
    test("def x = null; def y = (byte)1; x <=> y", -1);
    test("def x = null; def y = 1; x <=> y", -1);
    test("def x = ''; def y = null; x <=> y", 1);
    test("def x = null; def y = ''; x <=> y", -1);
    test("def x = (byte)0; def y = null; x <=> y", 1);
    test("def x = 0; def y = null; x <=> y", 1);
    test("def x = null; def y = 0; x <=> y", -1);
    test("def x = 1L; def y = null; x <=> y", 1);
    test("def x = null; def y = 1L; x <=> y", -1);
    test("def x = 1D; def y = null; x <=> y", 1);
    test("def x = null; def y = 1D; x <=> y", -1);
    test("def x = 1.0; def y = null; x <=> y", 1);
    test("def x = null; def y = 1.0; x <=> y", -1);

    test("(byte)1 <=> 2", -1);
    test("1 <=> (byte)2", -1);
    test("(byte)1 <=> (byte)2", -1);
    test("1 <=> 2", -1);
    test("def x = 1; x <=> 2", -1);
    test("def x = 'abc'; 'bcd' <=> x", 1);
    test("[1,2,3] <=> [2,3,4]", -1);
    test("[1,2,3] <=> [1,2,3]", 0);
    test("[3,2,3] <=> [2,3,4]", 1);
    test("[1,2,3,4] <=> [2,3,4]", -1);
    test("[1,2,3,4] <=> [1,2,3]", 1);
    test("[1] <=> []", 1);
    test("[] <=> []", 0);
    test("[] <=> [1]", -1);
    test("[1,[2,3]] <=> [1,[3,4]]", -1);
    test("[1,[2,3]] <=> [1,[1,3,4]]", 1);
    test("[1,[2,3]] <=> [1,[2,3]]", 0);
    test("[1,[null,3]] <=> [1,[2,3]]", -1);
    test("[1,[null,3]] <=> [1,[null,3]]", 0);
    test("[1,null] <=> [1,[null,3]]", -1);
    test("[1] <=> null", 1);
    test("null <=> [1]", -1);
    testError("[1] <=> ['a']", "cannot compare");
    testError("[a:1] <=> [:]", "cannot compare");
    testError("[1,2,3] <=> 'xxx'", "cannot compare");
    testError("[1,2,3] <=> 'xxx'", "cannot compare");
    test("def x = [1,2,3]; x <=> [2,3,4]", -1);
    test("def x = [1,2,3]; x <=> [1,2,3]", 0);
    test("def x = [3,2,3]; x <=> [2,3,4]", 1);
    test("def x = [1,2,3,4]; x <=> [2,3,4]", -1);
    test("def x = [1,2,3,4]; x <=> [1,2,3]", 1);
    test("def x = [1]; x <=> []", 1);
    test("def x = []; x <=> []", 0);
    test("def x = []; x <=> [1]", -1);
    test("def x = [1,[2,3]]; x <=> [1,[3,4]]", -1);
    test("def x = [1,[2,3]]; x <=> [1,[1,3,4]]", 1);
    test("def x = [1,[2,3]]; x <=> [1,[2,3]]", 0);
    test("def x = [1,[2,3]]; x <=> [1,[2L,3]]", 0);
    test("def x = [1]; x <=> null", 1);
    testError("def x = [1]; x <=> ['a']", "cannot compare");
    testError("def x = [a:1]; x <=> [:]", "cannot compare");
    testError("def x = [1,2,3]; x <=> 'xxx'", "cannot compare");
    testError("def x = [1,2,3]; x <=> 'xxx'", "cannot compare");
  }

  @Test public void instanceOfTests() {
    test("true instanceof boolean", true);
    test("1 instanceof boolean", false);
    test("def x = true; x instanceof boolean", true);
    test("def x = true; (x && x || x) instanceof boolean", true);
    test("String x; x instanceof boolean", false);
    test("String x; x instanceof boolean || x instanceof String", true);
    test("def x = 'abc'; x instanceof boolean || x instanceof String", true);

    test("(byte)1 instanceof Map", false);
    test("(byte)1 instanceof List", false);
    test("(byte)1 instanceof boolean", false);
    test("(byte)1 instanceof String", false);
    test("(byte)1 instanceof byte", true);
    test("(byte)1 instanceof int", false);
    test("(byte)1 instanceof long", false);
    test("(byte)1 instanceof double", false);
    test("(byte)1 instanceof Decimal", false);
    test("1 instanceof Map", false);
    test("1 instanceof List", false);
    test("1 instanceof boolean", false);
    test("1 instanceof String", false);
    test("1 instanceof int", true);
    test("1 instanceof byte", false);
    test("1 instanceof long", false);
    test("1 instanceof double", false);
    test("1 instanceof Decimal", false);
    test("1L instanceof Map", false);
    test("1L instanceof List", false);
    test("1L instanceof boolean", false);
    test("1L instanceof String", false);
    test("1L instanceof byte", false);
    test("1L instanceof int", false);
    test("1L instanceof long", true);
    test("1L instanceof double", false);
    test("1L instanceof Decimal", false);

    test("1D instanceof Map", false);
    test("1D instanceof List", false);
    test("1D instanceof boolean", false);
    test("1D instanceof String", false);
    test("1D instanceof byte", false);
    test("1D instanceof int", false);
    test("1D instanceof long", false);
    test("1D instanceof double", true);
    test("1D instanceof Decimal", false);

    test("1.0 instanceof Map", false);
    test("1.0 instanceof List", false);
    test("1.0 instanceof boolean", false);
    test("1.0 instanceof String", false);
    test("1.0 instanceof byte", false);
    test("1.0 instanceof int", false);
    test("1.0 instanceof long", false);
    test("1.0 instanceof double", false);
    test("1.0 instanceof Decimal", true);

    test("[] instanceof Map", false);
    test("[] instanceof List", true);
    test("[] instanceof boolean", false);
    test("[] instanceof String", false);
    test("[] instanceof byte", false);
    test("[] instanceof int", false);
    test("[] instanceof long", false);
    test("[] instanceof double", false);
    test("[] instanceof Decimal", false);

    test("[:] instanceof Map", true);
    test("[:] instanceof List", false);
    test("[:] instanceof boolean", false);
    test("[:] instanceof String", false);
    test("[:] instanceof byte", false);
    test("[:] instanceof int", false);
    test("[:] instanceof long", false);
    test("[:] instanceof double", false);
    test("[:] instanceof Decimal", false);

    test("def x = (byte)1; x instanceof Map", false);
    test("def x = (byte)1; x instanceof List", false);
    test("def x = (byte)1; x instanceof boolean", false);
    test("def x = (byte)1; x instanceof String", false);
    test("def x = (byte)1; x instanceof byte", true);
    test("def x = (byte)1; x instanceof int", false);
    test("def x = (byte)1; x instanceof long", false);
    test("def x = (byte)1; x instanceof double", false);
    test("def x = (byte)1; x instanceof Decimal", false);
    test("def x = 1 ; x instanceof Map", false);
    test("def x = 1 ; x instanceof List", false);
    test("def x = 1 ; x instanceof boolean", false);
    test("def x = 1 ; x instanceof String", false);
    test("def x = 1 ; x instanceof byte", false);
    test("def x = 1 ; x instanceof int", true);
    test("def x = 1 ; x instanceof long", false);
    test("def x = 1 ; x instanceof double", false);
    test("def x = 1 ; x instanceof Decimal", false);
    test("def x = 1L ; x instanceof Map", false);
    test("def x = 1L ; x instanceof List", false);
    test("def x = 1L ; x instanceof boolean", false);
    test("def x = 1L ; x instanceof String", false);
    test("def x = 1L ; x instanceof byte", false);
    test("def x = 1L ; x instanceof int", false);
    test("def x = 1L ; x instanceof long", true);
    test("def x = 1L ; x instanceof double", false);
    test("def x = 1L ; x instanceof Decimal", false);

    test("def x = 1D ; x instanceof Map", false);
    test("def x = 1D ; x instanceof List", false);
    test("def x = 1D ; x instanceof boolean", false);
    test("def x = 1D ; x instanceof String", false);
    test("def x = 1D ; x instanceof byte", false);
    test("def x = 1D ; x instanceof int", false);
    test("def x = 1D ; x instanceof long", false);
    test("def x = 1D ; x instanceof double", true);
    test("def x = 1D ; x instanceof Decimal", false);

    test("def x = 1.0 ; x instanceof Map", false);
    test("def x = 1.0 ; x instanceof List", false);
    test("def x = 1.0 ; x instanceof boolean", false);
    test("def x = 1.0 ; x instanceof String", false);
    test("def x = 1.0 ; x instanceof byte", false);
    test("def x = 1.0 ; x instanceof int", false);
    test("def x = 1.0 ; x instanceof long", false);
    test("def x = 1.0 ; x instanceof double", false);
    test("def x = 1.0 ; x instanceof Decimal", true);

    test("def x = [] ; x instanceof Map", false);
    test("def x = [] ; x instanceof List", true);
    test("def x = [] ; x instanceof boolean", false);
    test("def x = [] ; x instanceof String", false);
    test("def x = [] ; x instanceof byte", false);
    test("def x = [] ; x instanceof int", false);
    test("def x = [] ; x instanceof long", false);
    test("def x = [] ; x instanceof double", false);
    test("def x = [] ; x instanceof Decimal", false);

    test("def x = [:] ; x instanceof Map", true);
    test("def x = [:] ; x instanceof List", false);
    test("def x = [:] ; x instanceof boolean", false);
    test("def x = [:] ; x instanceof String", false);
    test("def x = [:] ; x instanceof byte", false);
    test("def x = [:] ; x instanceof int", false);
    test("def x = [:] ; x instanceof long", false);
    test("def x = [:] ; x instanceof double", false);
    test("def x = [:] ; x instanceof Decimal", false);


    test("true !instanceof boolean", false);
    test("1 !instanceof boolean", true);
    test("def x = true; x !instanceof boolean", false);
    test("def x = true; (x && x || x) !instanceof boolean", false);
    test("String x; x !instanceof boolean", true);
    test("String x; x !instanceof boolean && x !instanceof String", false);
    test("def x = 'abc'; x !instanceof boolean && x !instanceof String", false);

    test("(byte)1 !instanceof Map", true);
    test("(byte)1 !instanceof List", true);
    test("(byte)1 !instanceof boolean", true);
    test("(byte)1 !instanceof String", true);
    test("(byte)1 !instanceof byte", false);
    test("(byte)1 !instanceof int", true);
    test("(byte)1 !instanceof long", true);
    test("(byte)1 !instanceof double", true);
    test("(byte)1 !instanceof Decimal", true);
    test("1 !instanceof Map", true);
    test("1 !instanceof List", true);
    test("1 !instanceof boolean", true);
    test("1 !instanceof String", true);
    test("1 !instanceof byte", true);
    test("1 !instanceof int", false);
    test("1 !instanceof long", true);
    test("1 !instanceof double", true);
    test("1 !instanceof Decimal", true);
    test("1L !instanceof Map", true);
    test("1L !instanceof List", true);
    test("1L !instanceof boolean", true);
    test("1L !instanceof String", true);
    test("1L !instanceof int", true);
    test("1L !instanceof long", false);
    test("1L !instanceof double", true);
    test("1L !instanceof Decimal", true);

    test("1D !instanceof Map", true);
    test("1D !instanceof List", true);
    test("1D !instanceof boolean", true);
    test("1D !instanceof String", true);
    test("1D !instanceof int", true);
    test("1D !instanceof long", true);
    test("1D !instanceof double", false);
    test("1D !instanceof Decimal", true);

    test("1.0 !instanceof Map", true);
    test("1.0 !instanceof List", true);
    test("1.0 !instanceof boolean", true);
    test("1.0 !instanceof String", true);
    test("1.0 !instanceof int", true);
    test("1.0 !instanceof long", true);
    test("1.0 !instanceof double", true);
    test("1.0 !instanceof Decimal", false);

    test("[] !instanceof Map", true);
    test("[] !instanceof List", false);
    test("[] !instanceof boolean", true);
    test("[] !instanceof String", true);
    test("[] !instanceof int", true);
    test("[] !instanceof long", true);
    test("[] !instanceof double", true);
    test("[] !instanceof Decimal", true);

    test("[:] !instanceof Map", false);
    test("[:] !instanceof List", true);
    test("[:] !instanceof boolean", true);
    test("[:] !instanceof String", true);
    test("[:] !instanceof int", true);
    test("[:] !instanceof long", true);
    test("[:] !instanceof double", true);
    test("[:] !instanceof Decimal", true);

    test("def x = 1 ; x !instanceof Map", true);
    test("def x = 1 ; x !instanceof List", true);
    test("def x = 1 ; x !instanceof boolean", true);
    test("def x = 1 ; x !instanceof String", true);
    test("def x = 1 ; x !instanceof int", false);
    test("def x = 1 ; x !instanceof long", true);
    test("def x = 1 ; x !instanceof double", true);
    test("def x = 1 ; x !instanceof Decimal", true);
    test("def x = 1L ; x !instanceof Map", true);
    test("def x = 1L ; x !instanceof List", true);
    test("def x = 1L ; x !instanceof boolean", true);
    test("def x = 1L ; x !instanceof String", true);
    test("def x = 1L ; x !instanceof int", true);
    test("def x = 1L ; x !instanceof long", false);
    test("def x = 1L ; x !instanceof double", true);
    test("def x = 1L ; x !instanceof Decimal", true);

    test("def x = 1D ; x !instanceof Map", true);
    test("def x = 1D ; x !instanceof List", true);
    test("def x = 1D ; x !instanceof boolean", true);
    test("def x = 1D ; x !instanceof String", true);
    test("def x = 1D ; x !instanceof int", true);
    test("def x = 1D ; x !instanceof long", true);
    test("def x = 1D ; x !instanceof double", false);
    test("def x = 1D ; x !instanceof Decimal", true);

    test("def x = 1.0 ; x !instanceof Map", true);
    test("def x = 1.0 ; x !instanceof List", true);
    test("def x = 1.0 ; x !instanceof boolean", true);
    test("def x = 1.0 ; x !instanceof String", true);
    test("def x = 1.0 ; x !instanceof int", true);
    test("def x = 1.0 ; x !instanceof long", true);
    test("def x = 1.0 ; x !instanceof double", true);
    test("def x = 1.0 ; x !instanceof Decimal", false);

    test("def x = [] ; x !instanceof Map", true);
    test("def x = [] ; x !instanceof List", false);
    test("def x = [] ; x !instanceof boolean", true);
    test("def x = [] ; x !instanceof String", true);
    test("def x = [] ; x !instanceof int", true);
    test("def x = [] ; x !instanceof long", true);
    test("def x = [] ; x !instanceof double", true);
    test("def x = [] ; x !instanceof Decimal", true);

    test("def x = [:] ; x !instanceof Map", false);
    test("def x = [:] ; x !instanceof List", true);
    test("def x = [:] ; x !instanceof boolean", true);
    test("def x = [:] ; x !instanceof String", true);
    test("def x = [:] ; x !instanceof int", true);
    test("def x = [:] ; x !instanceof long", true);
    test("def x = [:] ; x !instanceof double", true);
    test("def x = [:] ; x !instanceof Decimal", true);

    testError("def x = 'int'; x instanceof x", "unexpected token 'x'");
    testError("def x = 'int'; x !instanceof x", "unexpected token 'x'");

    test("def x = [a:[1,2]]; x.a instanceof List", true);
    test("def x = [a:[1,2]]; x.a !instanceof Map", true);
    test("def x = [a:[1,2]]; x.a[0] instanceof int", true);
    test("def x = [a:[1,2]]; x.a[0] !instanceof Map", true);

    test("null instanceof Map", false);
    test("null instanceof List", false);
    test("null instanceof boolean", false);
    test("null instanceof String", false);
    test("null instanceof int", false);
    test("null instanceof long", false);
    test("null instanceof double", false);
    test("null instanceof Decimal", false);
    test("null !instanceof Map", true);
    test("null !instanceof List", true);
    test("null !instanceof boolean", true);
    test("null !instanceof String", true);
    test("null !instanceof byte", true);
    test("null !instanceof int", true);
    test("null !instanceof long", true);
    test("null !instanceof double", true);
    test("null !instanceof Decimal", true);

    test("def x = null; x instanceof Map", false);
    test("def x = null; x instanceof List", false);
    test("def x = null; x instanceof boolean", false);
    test("def x = null; x instanceof String", false);
    test("def x = null; x instanceof int", false);
    test("def x = null; x instanceof long", false);
    test("def x = null; x instanceof double", false);
    test("def x = null; x instanceof Decimal", false);
    test("def x = null; x !instanceof Map", true);
    test("def x = null; x !instanceof List", true);
    test("def x = null; x !instanceof boolean", true);
    test("def x = null; x !instanceof String", true);
    test("def x = null; x !instanceof byte", true);
    test("def x = null; x !instanceof int", true);
    test("def x = null; x !instanceof long", true);
    test("def x = null; x !instanceof double", true);
    test("def x = null; x !instanceof Decimal", true);
  }

  @Test public void typeCasts() {
    test("(byte)1L", (byte)1);
    test("(byte)1", (byte)1);
    test("(int)(byte)1L", 1);
    test("(int)1L", 1);
    test("(int)1L instanceof int", true);
    testError("(String)1", "cannot convert");
    testError("def x = 1; (String)x", "cannot convert");
    test("(String)null", null);
    test("(Map)null", null);
    test("(List)null", null);
    test("(Decimal)null", null);
    test("def x = null; (Map)x", null);
    test("def x = null; (List)x", null);
    test("def x = null; (Decimal)x", null);
    testError("(int)null", "cannot convert null");
    testError("(long)null", "cannot convert null");
    testError("(double)null", "cannot convert null");
    testError("def x; (int)x", "cannot convert null");
    testError("def x; (long)x", "cannot convert null");
    testError("def x; (double)x", "cannot convert null");

    test("(int)'a'", 97);
    test("(byte)'a'", (byte)97);
    test("def x = 'a'; (int)x", 97);
    test("def x = 'a'; (byte)x", (byte)97);
    testError("(byte)'abc'", "string with multiple chars cannot be cast");
    testError("(int)'abc'", "string with multiple chars cannot be cast");
    testError("def x = 'abc'; (byte)x", "string with multiple chars cannot be cast");
    testError("def x = 'abc'; (int)x", "string with multiple chars cannot be cast");
    testError("(byte)''", "empty string cannot be cast");
    testError("(int)''", "empty string cannot be cast");
    testError("String s; (byte)s", "empty string cannot be cast");
    testError("String s; (int)s", "empty string cannot be cast");
    testError("def x = ''; (byte)x", "empty string cannot be cast");
    testError("def x = ''; (int)x", "empty string cannot be cast");

    testError("(Map)1", "cannot convert from int to map");
    testError("(List)1", "cannot convert from int to list");
    testError("int x = 1; (Map)x", "cannot convert from");
    testError("int x = 1; (List)x", "cannot convert from");
    testError("def x = 1; (Map)x", "cannot be cast");
    testError("def x = 1; (List)x", "cannot be cast");
    testError("def x = { it }; (Map)x", "cannot be cast");
    testError("def x = { it }; (List)x", "cannot be cast");
    testError("def x(){ 1 }; (Map)x", "cannot convert from");
    testError("def x(){ 1 }; (List)x", "cannot convert from");
    testError("def x = { it }; (byte)x", "cannot be cast");
    testError("def x = { it }; (int)x", "cannot be cast");
    testError("def x = { it }; (long)x", "cannot be cast");
    testError("def x = { it }; (double)x", "cannot be cast");
    testError("def x = { it }; (Decimal)x", "cannot be cast");
    testError("def x = { it }; (String)x", "cannot convert");
    test("def x = { it }; ('' + x) =~ /Function@\\d+/", true);
    testError("def x(){ 1 }; (int)x", "cannot convert from");
    testError("def x(){ 1 }; (long)x", "cannot convert from");
    testError("def x(){ 1 }; (double)x", "cannot convert from");
    testError("def x(){ 1 }; (Decimal)x", "cannot convert from");

    testError("def x(){ 1 }; (String)x", "cannot convert from");

    test("(byte)1", (byte)1);
    test("(int)1", 1);
    test("byte x = 1; (byte)x", (byte)1);
    test("int x = 1; (int)x", 1);
    test("(long)1", 1L);
    test("int x = 1; (long)x", 1L);
    test("(double)1", 1D);
    test("int x = 1; (double)x", 1D);
    test("(Decimal)1", "#1");
    test("int x = 1; (Decimal)x", "#1");

    test("(byte)1L", (byte)1);
    test("(int)1L", 1);
    test("long x = 1L; (int)x", 1);
    test("(long)1L", 1L);
    test("long x = 1L; (long)x", 1L);
    test("(double)1L", 1D);
    test("long x = 1L; (double)x", 1D);
    test("(Decimal)1L", "#1");
    test("long x = 1L; (Decimal)x", "#1");

    test("(byte)1D", (byte)1);
    test("(int)1D", 1);
    test("double x = 1D; (int)x", 1);
    test("(long)1D", 1L);
    test("double x = 1D; (long)x", 1L);
    test("(double)1D", 1D);
    test("double x = 1D; (double)x", 1D);
    test("(Decimal)1D", "#1.0");
    test("double x = 1D; (Decimal)x", "#1.0");

    test("(byte)1.0", (byte)1);
    test("(int)1.0", 1);
    test("Decimal x = 1.0; (int)x", 1);
    test("(long)1.0", 1L);
    test("Decimal x = 1.0; (long)x", 1L);
    test("(double)1.0", 1D);
    test("Decimal x = 1.0; (double)x", 1D);
    test("(Decimal)1.0", "#1.0");
    test("Decimal x = 1.0; (Decimal)x", "#1.0");
  }

  @Test public void asType() {
    testError("true as byte", "cannot coerce");
    testError("true as int", "cannot coerce");
    testError("(int)true", "cannot convert");
    test("(byte)1 as int", 1);
    test("(byte)1 as long", 1L);
    test("(byte)1 as double", 1D);
    test("(byte)1 as Decimal", "#1");
    test("1 as byte", (byte)1);
    test("1L as byte", (byte)1);
    test("1L as int", 1);
    test("(1L as int) instanceof int", true);
    test("1 as String", "1");
    test("def x = 1; x as String", "1");
    testError("null as byte", "null value");
    testError("null as int", "null value");
    testError("null as long", "null value");
    testError("null as double", "null value");
    testError("null as Decimal", "null value");
    test("null as String", null);
    test("null as Map", null);
    test("null as List", null);
    testError("def x = null; x as byte", "null value");
    testError("def x = null; x as int", "null value");
    testError("def x = null; x as long", "null value");
    testError("def x = null; x as double", "null value");
    testError("def x = null; x as Decimal", "null value");
    test("def x = null; x as String", null);
    test("def x = null; x as Map", null);
    test("def x = null; x as List", null);
    testError("def x; x as byte", "null value");
    testError("def x; x as int", "null value");
    testError("def x; x as long", "null value");
    testError("def x; x as double", "null value");
    testError("def x; x as Decimal", "null value");

    testError("1 as Map", "cannot coerce");
    testError("1 as List", "cannot coerce");
    testError("int x = 1; x as Map", "cannot coerce");
    testError("int x = 1; x as List", "cannot coerce");
    testError("def x = 1; x as Map", "cannot coerce");
    testError("def x = 1; x as List", "cannot coerce");
    testError("def x = { it }; x as Map", "cannot coerce");
    testError("def x = { it }; x as List", "cannot coerce");
    testError("def x(){ 1 }; x as Map", "cannot coerce");
    testError("def x(){ 1 }; x as List", "cannot coerce");
    testError("def x = { it }; x as int", "cannot coerce");
    testError("def x = { it }; x as long", "cannot coerce");
    testError("def x = { it }; x as double", "cannot coerce");
    testError("def x = { it }; x as Decimal", "cannot coerce");
    test("def x = { it }; (x as String) =~ /Function@(\\d+)/", true);
    testError("def x(){ 1 }; x as int", "cannot coerce");
    testError("def x(){ 1 }; x as long", "cannot coerce");
    testError("def x(){ 1 }; x as double", "cannot coerce");
    testError("def x(){ 1 }; x as Decimal", "cannot coerce");

    test("def x(){ 1 }; (x as String) =~ /Function@(\\d+)/", true);

    test("1 as int", 1);
    test("int x = 1; x as int", 1);
    test("1 as long", 1L);
    test("int x = 1; x as long", 1L);
    test("1 as double", 1D);
    test("int x = 1; x as double", 1D);
    test("1 as Decimal", "#1");
    test("int x = 1; x as Decimal", "#1");

    test("1L as byte", (byte)1);
    test("1L as int", 1);
    test("long x = 1L; x as int", 1);
    test("1L as long", 1L);
    test("long x = 1L; x as long", 1L);
    test("1L as double", 1D);
    test("long x = 1L; x as double", 1D);
    test("1L as Decimal", "#1");
    test("long x = 1L; x as Decimal", "#1");

    test("1D as byte", (byte)1);
    test("1D as int", 1);
    test("double x = 1D; x as int", 1);
    test("1D as long", 1L);
    test("double x = 1D; x as long", 1L);
    test("1D as double", 1D);
    test("double x = 1D; x as double", 1D);
    test("1D as Decimal", "#1.0");
    test("double x = 1D; x as Decimal", "#1.0");

    test("1.0 as byte", (byte)1);
    test("1.0 as int", 1);
    test("Decimal x = 1.0; x as int", 1);
    test("1.0 as long", 1L);
    test("Decimal x = 1.0; x as long", 1L);
    test("1.0 as double", 1D);
    test("Decimal x = 1.0; x as double", 1D);
    test("1.0 as Decimal", "#1.0");
    test("Decimal x = 1.0; x as Decimal", "#1.0");

    test("def x = 1; x as byte", (byte)1);
    test("def x = 1; x as int", 1);
    test("def x = 1; x as long", 1L);
    test("def x = 1; x as double", 1D);
    test("def x = 1; x as Decimal", "#1");

    test("def x = 1L; x as byte", (byte)1);
    test("def x = 1L; x as int", 1);
    test("def x = 1L; x as long", 1L);
    test("def x = 1L; x as double", 1D);
    test("def x = 1L; x as Decimal", "#1");

    test("def x = 1D; x as byte", (byte)1);
    test("def x = 1D; x as int", 1);
    test("def x = 1D; x as long", 1L);
    test("def x = 1D; x as double", 1D);
    test("def x = 1D; x as Decimal", "#1.0");

    test("def x = 1.0; x as byte", (byte)1);
    test("def x = 1.0; x as int", 1);
    test("def x = 1.0; x as long", 1L);
    test("def x = 1.0; x as double", 1D);
    test("def x = 1.0; x as Decimal", "#1.0");

    test("(byte)1 as String", "1");
    test("1 as String", "1");
    test("1.0 as String", "1.0");
    test("1D as String", "1.0");
    test("1L as String", "1");
    test("[] as String", "[]");
    test("[1,2,3] as String", "[1, 2, 3]");
    test("[:] as String", "[:]");
    test("[a:1,b:2] as String", "[a:1, b:2]");
    test("def x = 1; x as String", "1");
    test("def x = 1.0; x as String", "1.0");
    test("def x = 1D; x as String", "1.0");
    test("def x = 1L; x as String", "1");
    test("def x = []; x as String", "[]");
    test("def x = [1,2,3]; x as String", "[1, 2, 3]");
    test("def x = [:]; x as String", "[:]");
    test("def x = [a:1,b:2]; x as String", "[a:1, b:2]");
    test("def x = 1; x as String as byte", (byte)1);
    test("def x = 1; x as String as int", 1);
    test("def x = 1; (x as String as int) + 2", 3);
    testError("def x = 1; x as String as int + 2", "unexpected token '+'");
    testError("def x = 1.0; x as String as int", "not a valid int");
    test("def x = 1.0; x as String as double", 1.0D);
    test("def x = 1.0; x as String as Decimal", "#1.0");
    test("def x = 1D; x as String as double", 1.0D);
    test("def x = 1L; x as String as long", 1L);
    test("def x = 1L; x as String as byte", (byte)1);

    test("[:] as List", Utils.listOf());
    test("[a:1] as List", Utils.listOf(Utils.listOf("a",1)));
    test("[a:1,b:2] as List", Utils.listOf(Utils.listOf("a",1), Utils.listOf("b",2)));
    test("[a:1,b:2] as List as Map", Utils.mapOf("a",1,"b",2));
    test("[1,2,3].map{it*it}.map{[it.toString(),it]} as Map", Utils.mapOf("1",1,"4",4,"9",9));
    testError("'abc' as Map", "cannot coerce");
    test("'abc' as List", Utils.listOf("a","b","c"));
    test("'' as List", Utils.listOf());
    test("('abc' as List).join()", "abc");
    testError("'123456789123456789123456789' as long", "not a valid long");
    testError("'89.123.123' as double", "not a valid double");
    test("(123 as String).length()", 3);
    test("(123 as String) + 'abc'", "123abc");

    test("'' as byte[]", new byte[0]);
    test("([] as byte[]) as String", "");
    test("'abc' as byte[]", new byte[]{97,98,99});
    test("def x = 'abc'; x as byte[]", new byte[]{97,98,99});
    test("([97,98,99] as byte[]) as String", "abc");
    test("byte[] x = [97,98,99]; x as String", "abc");
    test("def x = [97,98,99] as byte[]; x as String", "abc");
  }

  @Test public void inOperator() {
    test("'b' in 'abc'", true);
    test("'x' in 'abc'", false);
    test("'b' !in 'abc'", false);
    test("'x' !in 'abc'", true);
    test("def x = 'b'; def y = 'abc'; x in y", true);
    test("def x = 'x'; def y = 'abc'; x in y", false);
    test("def x = 'b'; def y = 'abc'; x !in y", false);
    test("def x = 'x'; def y = 'abc'; x !in y", true);
    testError("1 in 'abc'", "expecting string for left-hand side");
    testError("'1' in 1", "int is not a valid type for right-hand side of 'in'");
    testError("'1' !in 1", "int is not a valid type for right-hand side of '!in'");
    testError("def x = 1; def y = 'abc'; x in y", "expecting string for left-hand side");
    testError("def x = '1'; def y = 1; x in y", "expecting String/List/Map for right-hand side");
    testError("def x = '1'; def y = 1; x !in y", "expecting String/List/Map for right-hand side");
    testError("null in 'abc'", "expecting string for left-hand side");
    test("2 in [1,2,3]", true);
    test("2 !in [1,2,3]", false);
    test("(byte)1 in []", false);
    test("1 in []", false);
    test("(byte)1 !in []", true);
    test("1 !in []", true);
    test("[] in [[]]", true);
    test("2 in [1,2L,3,2L,4]", true);
    test("(byte)2 in [1,2,3,2,4]", true);
    test("2 in [1,(byte)2,3,(byte)2,4]", true);
    test("2 in [1,2,3,2,4]", true);
    test("def f = { it*it}; f in ['a',f]", true);
    test("[a:1,b:[1,2,3]] in [1,2,[a:1,b:[1,2,3]],3]", true);
    test("[] !in [[]]", false);
    test("2 !in [1,2,3,2,4]", false);
    test("def f = { it*it}; f !in ['a',f]", false);
    test("[a:1,b:[1,2,3]] !in [1,2,[a:1,b:[1,2,3]],3]", false);
    test("def x = 2 ; def y = [1,2,3]; x in y", true);
    test("def x = 2 ; def y = [1,2,3]; x !in y", false);
    test("def x = 1 ; def y = []; x in y", false);
    test("def x = 1 ; def y = []; x !in y", true);
    test("def x = [] ; def y = [[]]; x in y", true);
    test("def x = 2 ; def y = [1,2,3,2,4]; x in y", true);
    test("def f = { it*it}; f ; def y = ['a',f]; f in y", true);
    test("def x = [a:1,b:[1,2,3]] ; def y = [1,2,[a:1,b:[1,2,3]],3]; x in y", true);
    test("def x = [] ; def y = [[]]; x !in y", false);
    test("def x = 2 ; def y = [1,2,3,2,4]; x !in y", false);
    test("def f = { it*it}; f ; def y = ['a',f]; f !in y", false);
    test("def x = [a:1,b:[1,2,3]] ; def y = [1,2,[a:1,b:[1,2,3]],3]; x !in y", false);
    test("'a' in [a:1]", true);
    test("def x = 'a'; def y = [a:1]; x in y", true);
    test("'a' !in [a:1]", false);
    test("def x = 'a'; def y = [a:1]; x !in y", false);
    test("'a' in [:]", false);
    test("'a' !in [:]", true);
    test("'b' in [a:1]", false);
    test("'b' !in [a:1]", true);
    test("'b' in [a:1,b:[1,2,3]]", true);
    test("'b' !in [a:1,b:[1,2,3]]", false);
    test("[] in [:]", false);
    test("def x = 'a'; def y = [:]; x in y", false);
    test("def x = 'a' ; def y = [:]; x !in y", true);
    test("def x = 'b' ; def y = [a:1]; x in y", false);
    test("def x = 'b' ; def y = [a:1]; x !in y", true);
    test("def x = 'b' ; def y = [a:1,b:[1,2,3]]; x in y", true);
    test("def x = 'b' ; def y = [a:1,b:[1,2,3]]; x !in y", false);
    test("def x = [] ; def y = [:]; x in y", false);
    test("'a' in [a:1,b:2].map{ a,b -> a }", true);
    test("'a' !in [a:1,b:2].map{ a,b -> a }", false);
    test("def x = 'a'; x in [a:1,b:2].map{ a,b -> a }", true);
    test("def x = 'a'; x !in [a:1,b:2].map{ a,b -> a }", false);
  }

  @Test public void whileLoops() {
    test("int i = 0; while (i < 10) i++; i", 10);
    test("int i = 0; int sum = 0; while (i < 10) sum += i++; sum", 45);
    test("int i = 0; int sum = 0; while (i < 10) { sum += i; i++ }; sum", 45);
    test("int i = 0; int sum = 0; while (i < 10) { int j = 0; while (j < i) { sum++; j++ }; i++ }; sum", 45);
    test("int i = 0; int sum = 0; while (i < 10) i++", null);
    testError("while (false) i++;", "unknown variable 'i'");
    test("byte i = 1; while (false) i++; i", (byte)1);
    test("int i = 1; while (false) i++; i", 1);
    test("int i = 1; while (false) ;", null);
    test("byte i = 1; while (++i < 10); i", (byte)10);
    test("int i = 1; while (++i < 10); i", 10);
    test("int i = 1; while() { break if i > 4; i++ }; i", 5);
    testError("LABEL: int i = 1", "labels can only be applied to for, while, and do/until");
  }

  @Test public void doUntilLoops() {
    test("int i = 0; do { i++ } until (i == 10); i", 10);
    testError("int i = 0; do i++ until (i == 10); i", "unexpected token 'i'");
    test("int i = 0; int sum = 0; do { sum += i++} until (i == 10); sum", 45);
    test("int i = 0; int sum = 0; do\n{\nsum += i++\n}\nuntil\n(\ni ==\n 10\n)\nsum", 45);
    test("int i = 0; int sum = 0; do { sum += i; i++ } until (i == 10); sum", 45);
    test("int i = 0; int sum = 0; do { int j = 0; while (j < i) { sum++; j++ }; i++ } until (i == 10); sum", 45);
    testError("do { i++ } until (true);", "unknown variable 'i'");
    test("byte i = 1; do { i++ } until (true); i", (byte)2);
    test("int i = 1; do { i++ } until (true); i", 2);
    test("int i = 1; do {} until (true)", null);
    test("int i = 1; LABEL: do { break LABEL if i > 4; i++ } until (false); i", 5);
    test("int i = 1; LABEL:\ndo { break LABEL if i > 4; i++ } until (false); i", 5);
    testError("int i = 1; LABEL:\ndo { break LABEL2 if i > 4; i++ } until (false); i",  "could not find enclosing loop with label LABEL2");
  }

  @Test public void forLoops() {
    test("int sum = 0; for (int i = 0; i < 10; i++) sum += i; sum", 45);
    testError("int sum = 0; for (int i = 0; i < 10; i++) sum += i; i", "unknown variable");
    test("int sum = 0; for (int i = 0,j=10; i < 10; i++,j--) sum += i + j; sum", 100);
    test("int sum = 0; int i,j; for (sum = 20, i = 0,j=10; i < 10; i++,j--) sum += i + j; sum", 120);
    test("int sum = 0; int i,j; for (sum = 20, i = 0,j=10; i < 10; i++,j--) { sum += i + j; def i = 3; i++ }; sum", 120);
    test("int sum = 0; for (int i = 0; ;) { break if i > 5; i++; sum += i }; sum", 21);
    test("int sum = 0; for (int i = 0; true;) { break if i > 5; i++; sum += i }; sum", 21);
    test("int sum = 0; for (int i = 0; true; true) { break if i > 5; i++; sum += i }; sum", 21);
    test("int sum = 0; int i = 0; for (;;) { break if i > 5; i++; sum += i }; sum", 21);
    test("def f() { for (int i = 0; i < 10; ) i++ }; f()", null);
    test("def f() { for (int i = 0; i < 10; ) { i++ if i >= 0 } }; f()", null);
    test("String f() { if (false) { return '' } else for (int i = 0; i < 10; ) { i++ if i >= 0 } }; f()", null);
    test("Decimal f() { if (false) { return 7 } else for (int i = 0; i < 10; ) { i++ if i >= 0 } }; f()", null);
    test("class X{}; X f() { if (false) { return new X() } else for (int i = 0; i < 10; ) { i++ if i >= 0 } }; f()", null);
    test("int[] f() { if (false) { return new int[0] } else for (int i = 0; i < 10; ) { i++ if i >= 0 } }; f()", null);
    test("int[][] f() { if (false) { return new int[0][] } else for (int i = 0; i < 10; ) { i++ if i >= 0 } }; f()", null);
    test("long[] f() { if (false) { return new long[0] } else for (int i = 0; i < 10; ) { i++ if i >= 0 } }; f()", null);
    testError("int f() { if (false) { return 7 } else for (int i = 0; i < 10; ) { i++ if i >= 0 } }; f()", "implicit return of null incompatible with function return type");
    testError("long f() { if (false) { return 7 } else for (int i = 0; i < 10; ) { i++ if i >= 0 } }; f()", "implicit return of null incompatible with function return type");
    testError("double f() { if (false) { return 7 } else for (int i = 0; i < 10; ) { i++ if i >= 0 } }; f()", "implicit return of null incompatible with function return type");
    testError("boolean f() { if (false) { return 7 } else for (int i = 0; i < 10; ) { i++ if i >= 0 } }; f()", "implicit return of null incompatible with function return type");
  }

  @Test public void breakContinue() {
    testError("break", "break must be within");
    testError("continue", "continue must be within");
    testError("if (true) { break }", "break must be within");
    testError("if (true) { continue }", "continue must be within");
    test("int sum = 0; double i = 0; while (i++ < 10) { if (i > 5) continue; sum += i }; sum", 15);
    test("def sum = 0; def i = 0.0D; while (i++ < 10) { if (i > 5) continue; sum += i }; sum", 15.0D);
    test("int sum = 0; double i = 0; while (i++ < 10) { if (i > 5) continue; sum = sum * 1 + i }; sum", 15);
    test("def sum = 0; def i = 0.0D; while (i++ < 10) { if (i > 5) continue; sum = sum * 1 + i }; sum", 15.0D);
    test("int sum = 0; double i = 0; while (i++ < 10) { if (i > 5 && i < 7) continue; sum += i }; sum", 49);
    test("int sum = 0; double i = 0; while (i++ < 10) { if (i > 5 && i < 7) { if (true) continue } ; sum += i }; sum", 49);
    test("int sum = 0; double i = 0; while (i++ < 10) { if (i > 5) break; sum += i }; sum", 15);
    test("int sum = 0; double i = 0; while (i++ < 10) { if (i > 5) { if (true) break}; sum += i }; sum", 15);
    test("int sum = 0; double i = 0; do { if (i > 5) continue; sum += i } until (i++ == 10); sum", 15);
    test("def sum = 0; def i = 0.0D; do { if (i > 5) continue; sum += i } until (i++ == 10); sum", 15.0D);
    test("int sum = 0; double i = 0; do { if (i > 5) continue; sum = sum * 1 + i } until (i++ == 10); sum", 15);
    test("def sum = 0; def i = 0.0D; do { if (i > 5) continue; sum = sum * 1 + i } until (i++ == 10); sum", 15.0D);
    test("int sum = 0; double i = 0; do { if (i > 5 && i < 7) continue; sum += i } until (i++ == 10); sum", 49);
    test("int sum = 0; double i = 0; do { if (i > 5 && i < 7) { if (true) continue } ; sum += i } until (i++ == 10); sum", 49);
    test("int sum = 0; double i = 0; do { if (i > 5) break; sum += i } until (i++ == 10); sum", 15);
    test("int sum = 0; double i = 0; do { if (i > 5) { if (true) break}; sum += i } until (i++ == 10); sum", 15);
    test("int sum = 0; for (double i = 0; i < 10; i++) { if (i > 5) continue; sum += i }; sum", 15);
    test("int sum = 0; for (double i = 0; i < 10; i++) { if (i > 5 && i < 7) continue; sum += i }; sum", 39);
    test("int sum = 0; for (double i = 0; i < 10; i++) { if (i > 5) break; sum += i }; sum", 15);
    test("int sum = 0; for (int i = 0; i < 4; i++) { for (int j = 0; j < 4; j++) { sum += i * j } }; sum", 36);
    test("int sum = 0; for (int i = 0; i < 4; i++) { for (int j = 0; j < 4; j++) { if (j == 3) break; sum += i * j } }; sum", 18);
    test("int sum = 0; for (int i = 0; i < 4; i++) { for (int j = 0; j < 4; j++) { if (j == 3) continue; sum += i * j } }; sum", 18);
    test("int x; for (int i = 0; i < 10; i++) { i < 5 and continue or x += i }; x", 35);
    test("int x; for (int i = 0; i < 10; i++) { i > 5 and break or x += i }; x", 15);
    test("int sum = 0; double i = 0; while (i++ < 10) { i > 5 and continue; sum += i }; sum", 15);
    test("int sum = 0; double i = 0; while (i++ < 10) { i > 5 and sleep(0,continue); sum += i }; sum", 15);
    test("def f(x){x}; int sum = 0; double i = 0; while (i++ < 10) { i > 5 and f(continue); sum += i }; sum", 15);
    test("def s=[1]; while (s.size())\n{\nfalse and continue\n(0 + (2*3) - 10 < s.size()) and s.remove(0) and continue\n}\ns", Utils.listOf());
    test("int i = 0; int sum = 0; while (i < 10) { int j = 0; LABEL: while (j < i) { sum++; j++; continue LABEL }; i++ }; sum", 45);
    test("if (true) { LABEL: while(false){}; 17 }", 17);
    testError("def x = 0; if (true) { LABEL: x++; while(false){}; 17 }", "label applied to statement that is not for/while");
    test("int i = 0; int sum = 0; while (i < 10) { XXX: while(false){}; int j = 0; LABEL: while (j < i) { sum++; j++; continue LABEL }; i++ }; sum", 45);
    test("int i = 0; int sum = 0; OUTER: while (i < 10) { int j = 0; LABEL: while (j < i) { sum++; j++; i++; continue OUTER }; i++ }; sum", 9);
    test("int i = 0; int sum = 0; OUTER:\n while (i < 15) { int j = 0; LABEL:\n while (j < i) { break OUTER if i >= 10; sum++; j++; continue LABEL; j++; i++ }; sum++; i++ }; sum", 55);
    testError("int i = 0; int sum = 0; OUTER:\n while (i < 15) { int j = 0; LABEL:\n while (j < i) { break OUTER if i >= 10; sum++; j++; continue LABEL; j++; i++ }; sum++; continue LABEL; i++ }; sum", "could not find enclosing loop");
    testError("int i = 0; int sum = 0; OUTER: while (i < 15) { int j = 0; LABEL: while (j < i) { break XXX if i >= 10; sum++; j++; continue LABEL }; i++ }; sum", "could not find enclosing loop");
    test("int i = 0; int sum = 0; do{ XXX: do{}until(true); int j = 0; LABEL: do{ sum++; j++; continue LABEL } until (j >= i); i++ } until (i >= 10); sum", 46);
    test("int i = 0; int sum = 0; OUTER: do{ int j = 0; LABEL: do{ sum++; j++; i++; continue OUTER } until (j >= i); i++ } until (i >= 10); sum", 10);
    test("int i = 0; int sum = 0; OUTER:\n do{ int j = 0; LABEL:\n do{ break OUTER if i >= 10; sum++; j++; continue LABEL; j++; i++ } until (j >= i); sum++; i++ } until (i >=15); sum", 56);
    testError("int i = 0; int sum = 0; OUTER:\n do{ int j = 0; LABEL:\n do{ break OUTER if i >= 10; sum++; j++; continue LABEL; j++; i++ } until (j >= i); sum++; continue LABEL; i++ } until (i >= 15); sum", "could not find enclosing loop");
    testError("int i = 0; int sum = 0; OUTER: do{ int j = 0; LABEL: do{ break XXX if i >= 10; sum++; j++; continue LABEL } until (j >= i); i++ } until (i >= 15); sum", "could not find enclosing loop");
    test("int sum = 0; LABEL: for (int i=0; i < 10; i++) { sum += i }; sum", 45);
    test("int sum = 0; for (int i=0; i < 10; ) { LABEL: for (int j = 0; j < i; ) { sum++; j++; continue LABEL }; i++ }; sum", 45);
    test("int sum = 0; OUTER: for (int i = 0; i < 10; ) { LABEL: for (int j = 0; j < i; j++) { sum++; i++; continue OUTER }; i++ }; sum", 9);
    test("int sum = 0; OUTER:\n for (int i = 0; i < 15; ) { LABEL:\n for (int j = 0; j < i; ) { break OUTER if i >= 10; sum++; j++; continue LABEL; j++; i++ }; sum++; i++ }; sum", 55);
    testError("int sum = 0; OUTER: for (int i = 0; i < 10; ) { LABEL: for (int j = 0; j < i; j++) { sum++; i++; continue XXX }; i++ }; sum", "could not find enclosing loop");
    testError("int sum = 0; OUTER:\n for (int i = 0; i < 15; ) { LABEL:\n for (int j = 0; j < i; ) { break OUTER if i >= 10; sum++; j++; continue LABEL; j++; i++ }; sum++; continue LABEL; i++ }; sum",  "could not find enclosing loop");
    testError("LABEL: println 'xxx'", "labels can only be applied to for, while, and do/until");
    testError("LABEL\n: while (false) {}; 1", "unexpected token ':'");
  }

  @Test public void simpleFunctions() {
    testError("def f; f()", "null value for function");
    test("def f() {return}; f()", null);
    test("int f(byte x) { x * x }; f(2)", 4);
    test("int f(int x) { x * x }; f(2)", 4);
    test("def f(def x) { x * x }; f(2)", 4);
    test("def f(x) { x * x }; f(2)", 4);
    test("byte f(x) { if (x == 1) 1 else x * f(x - 1) }; f(3)", (byte)6);
    test("int f(x) { if (x == 1) 1 else x * f(x - 1) }; f(3)", 6);
    test("def f(x) { if (x == 1) 1 else x * f(x - 1) }; f(3) + f(4)", 30);
    testError("def f(int x) { def x = 1; x++ }", "clashes with previously declared variable");

    test("byte f(x) { { def x = 3; return x } }; f(1)", (byte)3);
    test("byte f(x) { { def x = 3; x } }; f(1)", (byte)3);
    test("byte f() { 3L }; f()", (byte)3);
    test("byte f() { 3.0 }; f()", (byte)3);
    test("byte f() { 3.0D }; f()", (byte)3);
    test("int f(x) { { def x = 3; return x } }; f(1)", 3);
    test("int f(x) { { def x = 3; x } }; f(1)", 3);
    test("int f() { 3L }; f()", 3);
    test("int f() { 3.0 }; f()", 3);
    test("int f() { 3.0D }; f()", 3);
    test("long f() { 3 }; f()", 3L);
    test("long f() { 3.0 }; f()", 3L);
    test("long f() { 3.0D }; f()", 3L);
    test("double f() { 3 }; f()", 3D);
    test("Decimal f() { 3 }; f()", "#3");

    test("def f(x,y) { x + y }; f(1,2)", 3);
    test("def f(x,y) { x + y }; f(1L,2D)", 3D);
    test("def f(x,y) { x + y }; f(1L,2.0)", "#3.0");
    test("byte f(x,y) { x + y }; f(1L,2.0)", (byte)3);
    test("int f(x,y) { x + y }; f(1L,2.0)", 3);
    test("int f(long x, double y, Decimal z) { ++x + ++y + ++z }; f(1,2,3)", 9);

    test("def f(x) { x + x }; f('abc')", "abcabc");
    test("def f(x) { x * 2 }; f('abc')", "abcabc");
    test("String f(String x, int y) { x * y }; f('abc', 2)", "abcabc");

    test("def f(x) { def g(x) { x * x }; g(x) }; f(3)", 9);
    test("def f(x) { def g(x) { x * x }; g(x) }; def g(x) { f(x) }; g(3)", 9);
    test("def f(x) { def g(x) { def f(x) {x+x}; f(x) }; g(x) * g(x) }; f(3)", 36);
    testError("def f(String x) { x + x }; f(1)", "cannot convert");
    test("def f(def x) { '' + x + x }; f(1)", "11");
    testError("def f(String x) { x }; f([1,2,3])", "cannot convert");
    test("def f(def x) { '' + x }; f([1,2,3])", "[1, 2, 3]");
    testError("def f(String x) { x }; f([a:1,b:2])", "cannot convert");
    test("def f(def x) { '' + x }; f([a:1,b:2])", "[a:1, b:2]");

    testError("null()", "null value for function");
    testError("3()", "cannot be called");
    testError("'abc'()", "cannot be called");
    testError("1D()", "cannot be called");
    testError("(3.0 + 2.0)()", "cannot be called");
    testError("def f(){1}; def g(){2}; f=g; f()", "cannot assign to function");
    testError("def f(){1}; def g(){2}; f ?= g; f()", "cannot assign to function");
    testError("def f(){1}; def g(){2}; f += g; f()", "non-numeric operand");

    test("def f(x) { if (x == 1) 1 else x + f(x-1) }; f(4)", 10);
    test("def f() { int i = 1; return {++i}}; def x=f(); def y=f(); [x()+x()+x(),y()]", Utils.listOf(9,2));
    test("String f(x) { x.toString() }; f(1)", "1");
    test("List f(x) { [x] }; f(1)", Utils.listOf(1));
    test("Map f(x) { [x:x] }; f(1)", Utils.mapOf("x",1));

    test("def f(int x) { x }; f(1L)", 1);
    test("def f(byte x) { x }; f(1L)", (byte)1);
  }

  @Test public void functionsAsValues() {
    test("def f(x) { x + x }; def g = f; g(2)", 4);
    test("def f(x) { x + x }; def g = f; g('abc')", "abcabc");
    testError("def f(x) { x + x }; def g = f; g()", "missing mandatory arguments");
    test("def f() { def g() { 3 } }; def h = f(); h()", 3);
    test("def f() { def g(){ def h(x){x*x} } }; f()()(3)", 9);
    test("def f() { def g(){ def h(x){x*x} }; [a:g] }; f().a()(3)", 9);
    test("def x = [:]; int f(x){x*x}; x.a = f; (x.a)(2)", 4);
    test("def x = [:]; int f(x){x*x}; x.a = f; x.a(2)", 4);
    testError("def f(int x) { x*x }; def g = f; g('abc')", "cannot be cast");
    testError("def f(String x) { x + x }; def g = f; g(1)", "cannot convert");
    test("def x = [1,2,3]; def f = x.map; f{it+it}", Utils.listOf(2,4,6));
    test("def x = [1,2,3]; def f = x.map; x = [4,5]; f{it+it}", Utils.listOf(2,4,6));
    test("def f(x){x*x}; def m = [g:f, '1':f, true:f, false:f, null:f]; m.g(2) + m.1(3) + m.true(4) + m.false(5) + m.null(6)", 4+9+16+25+36);
    test("def f(x){x*x}; def m = [g:f, if:f, true:f, false:f, null:f]; m.g(2) + m.if(3) + m.true(4) + m.false(5) + m.null(6)", 4+9+16+25+36);
  }

  @Test public void functionsForwardReference() {
    test("def x = f(2); def f(z){3*z}; x", 6);
    test("def y=3; def x=f(2); def f(z){y*z}; x", 6);
    test("{ def y=3; def x=f(2); def f(z){y*z}; x }", 6);
    test("def f(x) { 2 * g(x) }; def g(x) { x * x }; f(3)", 18);
    test("def y = 3; def f(x) { 2 * g(x) }; def z = f(3); def g(x) { x * y }; z", 18);
    test("def f(x) { if (x==1) x else 2 * g(x) }; def g(x) { x + f(x-1) }; f(3)", 18);
    test("def f(x) { g(x) }; def g(x) { x }; f(3)", 3);
    testError("def x = f(2); def y = 3; def f(z){y*z}; x", "closes over variable y not yet declared");
    testError("{ def x = f(2); def y = 3; def f(z){y*z}; x }", "closes over variable y not yet declared");
    testError("def f(x) { g(x) }; def y = 2; def g(x) { x + y}; f(3)", "closes over variable y not yet declared");
    testError("def f(x){def h=g; h(x)}; def g(x){x*x}; f(2)", "closes over variable g that has not yet been initialised");
  }

  @Test public void functionsWithOptionalArgs() {
    test("def f(byte x = 5) { x * x }; f()", (byte)25);
    test("def f(byte x = 5) { x * x }; f(3)", (byte)9);
    test("def f(byte x = 5) { x * x }; def g = f; g()", (byte)25);
    test("def f(byte x = 5) { x * x }; def g = f; g(3)", (byte)9);
    test("def f(byte x = 5) { x * x }; var g = f; g()", (byte)25);
    test("def f(byte x = 5) { x * x }; var g = f; g(3)", (byte)9);
    test("byte f(byte x = 5) { x * x }; f()", (byte)25);
    test("byte f(byte x = 5) { x * x }; f(3)", (byte)9);
    test("byte f(byte x = 5) { x * x }; var g = f; g()", (byte)25);
    test("byte f(byte x = 5) { x * x }; var g = f; g(3)", (byte)9);
    test("def f(int x = 5) { x * x }; f()", 25);
    test("def f(int x = 5) { x * x }; f(3)", 9);
    test("def f(int x = 5) { x * x }; def g = f; g()", 25);
    test("def f(int x = 5) { x * x }; def g = f; g(3)", 9);
    test("def f(int x = 5) { x * x }; var g = f; g()", 25);
    test("def f(int x = 5) { x * x }; var g = f; g(3)", 9);
    test("int f(int x = 5) { x * x }; f()", 25);
    test("int f(int x = 5) { x * x }; f(3)", 9);
    test("int f(int x = 5) { x * x }; var g = f; g()", 25);
    test("int f(int x = 5) { x * x }; var g = f; g(3)", 9);
    testError("def f(int x = 5) { x * x }; def g = f; g(1,2)", "too many arguments");
    testError("Decimal f(long x,int y=5,def z){x+y+z}; f(1)", "missing mandatory arguments");
    test("Decimal f(long x,int y=5,def z){x+y+z}; def g=f; g(1,2,3)", "#6");
    testError("Decimal f(long x,int y=5,def z){x+y+z}; def g=f; g(1)", "missing mandatory arguments");
    test("String f(x='abc') { x + x }; f()", "abcabc");
    test("String f(x=\"a${'b'+'c'}\") { x + x }; f()", "abcabc");
    test("String f(x=\"a${'b'+'c'}\") { x + x }; f('x')", "xx");
    test("int f(x = f(1)) { if (x == 1) 4 else x + f(x-1) }; f()", 13);
    test("int f(x = f(1)) { if (x == 1) 4 else x + f(x-1) }; f(2)", 6);
    test("def f(byte x,byte y=x+1) { x + y }; f(2)", (byte)5);
    test("def f(byte x,byte y=++x+1) { x + y }; f(2)", (byte)7);
    test("def f(byte x,byte y=++x+1, byte z=x+1) { x + y + z }; f(2)", (byte)11);
    test("def f(int x,int y=x+1) { x + y }; f(2)", 5);
    test("def f(int x,int y=++x+1) { x + y }; f(2)", 7);
    test("def f(int x,int y=++x+1, int z=x+1) { x + y + z }; f(2)", 11);
    test("def f(x,y=x+1) { x + y }; f(2)", 5);
    testError("def f(x,y=z+1,z=2) { x + y }; f(2)", "reference to unknown variable");
    test("def f(int x = f(1)) { if (x == 1) 9 else x }; f(3)", 3);
    test("def f(int x = f(1)) { if (x == 1) 9 else x }; f()", 9);
    test("def g(x){def y=g; f(x)}; def f(x,a=g){x == 1 ? 1 : x+a(x-1)}; f(2)", 3);
    test("def g(x){f(x)}; def f(x,a=g){x == 1 ? 1 : x+a(x-1)}; f(2)", 3);
    test("def f(x,a=f){x == 1 ? 1 : x+a(x-1)}; f(2)", 3);
    testError("def g(x){f(x)}; var h=g; def f(x,a=h){x == 1 ? 1 : x+a(x-1)}; f(2)", "closes over variable h that has not yet been initialised");
    test("def f(String x, int y=1, var z='abc') { x + y + z }; f('z')", "z1abc");
  }

  @Test public void passingArgsAsList() {
    test("def x = f([]); def f(){3}; x", 3);
    test("def f(){3}; f([])", 3);
    test("def f = { -> 3}; f([])", 3);
    test("def f = { -> 3}; def a = []; f(a)", 3);
    test("def f = {3}; f([])", 3);
    test("def f(){3}; def g = f; g([])", 3);
    testError("def f(){3}; f([4])", "too many arguments");
    testError("def f(){3}; def g = f; g([4])", "too many arguments");
    testError("def f(int x){x}; f([3])", "cannot convert");
    testError("def f = { int x -> x}; f([3])", "cannot be cast");
    testError("def f(int x){x}; def g = f; g([3])", "cannot be cast");
    testError("def f(int x){x}; def a = [3]; f(a)", "cannot be cast");
    testError("def f(int x, int y=0){x+y}; def a = [3]; f(a)", "cannot be cast");
    test("def f(int x,int y){x+y}; def a = [3,2]; f(a)", 5);
    test("def f(int x,int y){x+y}; def a = [3,2]; def g = f; g(a)", 5);
    testError("def f(List x, int y) { x + y }; f([1,2])", "cannot be cast to List");
    testError("def f = { List x, int y -> x + y }; f([1,2])", "cannot be cast to List");
    testError("def f = { List x, int y -> x + y }; def a = [1,2]; f(a)", "cannot be cast to List");
    testError("def f(List x, int y) { x + y }; def a = [1,2]; f(a)", "cannot be cast to List");
    testError("def f(List x, int y) { x + y }; def a = [1,2]; def g = f; g(a)", "cannot be cast to List");
    testError("def f(List x, int y) { x + y }; f([1,2])", "cannot be cast to List");
    testError("def f(int x, int y, int z) { x + y }; f(1,2)", "missing mandatory argument");
    testError("def f(int x, int y, int z) { x + y }; f([1,2])", "missing mandatory argument");
    testError("def f(List x, int y) { x + y }; def a = [[1,2]]; def g = f; g(a)", "missing mandatory arguments");
    test("def f(List x, byte y) { x + y }; f([[1,2],3])", Utils.listOf(1,2,(byte)3));
    test("def f(List x, int y) { x + y }; f([[1,2],3])", Utils.listOf(1,2,3));
    test("def f = { List x, int y -> x + y }; f([[1,2],3])", Utils.listOf(1,2,3));
    test("def f = { List x, int y -> x + y }; def a = [[1,2],3]; f(a)", Utils.listOf(1,2,3));
    test("def f(List x, int y) { x + y }; def a = [[1,2],3]; f(a)", Utils.listOf(1,2,3));
    test("def f(List x, int y) { x + y }; def a = [[1,2],3]; def g = f; g(a)", Utils.listOf(1,2,3));
    test("def f(List x, int y = 4) { x + y }; f([[1,2],3])", Utils.listOf(Utils.listOf(1,2),3,4));
    test("def f = {List x, int y = 4 -> x + y }; f([[1,2],3])", Utils.listOf(Utils.listOf(1,2),3,4));
    test("def f = {List x, int y = 4 -> x + y }; def a = [[1,2],3]; f(a)", Utils.listOf(Utils.listOf(1,2),3,4));
    test("def f(List x, int y = 4) { x + y }; def a = [[1,2],3]; f(a)", Utils.listOf(Utils.listOf(1,2),3,4));
    test("def f(List x, int y = 4) { x + y }; def a = [[1,2],3]; def g = f; g(a)", Utils.listOf(Utils.listOf(1,2),3,4));
    test("def f(int x, int y) { x + y }; f([1,2])", 3);
    test("def f(int x, int y) { x + y }; def g = f; g([1,2])", 3);
    testError("def f = {int x, int y = 4 -> x + y }; f([1,2])", "cannot be cast to int");
    test("def f = {int x, int y -> x + y }; f([1,2])", 3);
    test("def f = {int x, int y -> x + y }; def g = f; g([1,2])", 3);
    testError("def f = {int x, int y = 4 -> x + y }; def a = [1,2]; f(a)", "cannot be cast to int");
    test("def f = {int x = 3, int y = 4 -> x + y }; def a = [1,2]; f(a)", 3);
    test("def f = {int x = 3, int y = 4 -> x + y }; def a = [1,2]; def g = f; g(a)", 3);
    testError("def f(int x, int y = 4) { x + y }; def a = [1,2]; f(a)", "cannot be cast to int");
    test("def f(int x = 3, int y = 4) { x + y }; def a = [1,2]; f(a)", 3);
    test("def f(int x = 3, int y = 4) { x + y }; def a = [1,2]; def g = f; g(a)", 3);
    test("def f(int x = 3, int y = 4) { x + y }; def a = [1D,2D]; def g = f; g(a)", 3);
    test("def f(int x = 3, int y = 4) { x + y }; def a = [1.0,2L]; def g = f; g(a)", 3);
    test("def f(byte x = 3, byte y = 4) { x + y }; def a = [1.0,2L]; def g = f; g(a)", (byte)3);

    test("def f(long t, def x) { sleep(t,x) }; f([1,2])", 2);
    testError("def f(long t, def x) { sleep(t,x) }; f(['123',2])", "cannot be cast to number");
    test("def f(long t, def x) { sleep(t,x) }; def a = [1,2]; f(a)", 2);
    testError("def f(long t, def x) { sleep(t,x) }; def a = ['123',2]; f(a)", "cannot be cast to number");
    test("def f(long t, def x) { sleep(t,x) }; [[1,2],[3,4]].map{ a,b -> f([a,b]) }", Utils.listOf(2,4));
    test("def f(long t, def x) { sleep(t,x) }; [a:2,b:4].map{ a,b -> f([b,a]) }", Utils.listOf("a","b"));
    test("def f(long t, def x) { sleep(t,x) }; def x = [[1,2],[3,4]]; x.map{ a,b -> f([a,b]) }", Utils.listOf(2,4));
    testError("def f(long t, def x) { sleep(t,x) }; def x = [a:2,b:4]; x.map([{ a,b -> f([b,a]) }])", "cannot be cast");
    testError("def f(long t, def x) { sleep(t,x) }; def g = [[1,2],[3,4]].map; g([{ a,b -> f([a,b]) }])", "cannot be cast");
    testError("def f(long t, def x) { sleep(t,x) }; def g = [a:2,b:4].map; g([{ a,b -> f([b,a]) }])", "cannot be cast");
    test("def a = [1,2,3]; def f(x,y=7,z) { x + y + z }; f(1,2,3) + f(a)", 12);
    test("def a = [1,2,3]; def f(x,y=7,z=8) { x + y + z }; f(a)", Utils.listOf(1,2,3,7,8));
    test("def f(String x, int y) { x + y }; def a = ['x',2]; f(a)", "x2");
    test("def f = {String x, int y -> x + y }; def a = ['x',2]; f(a)", "x2");
    testError("def f = {String x, int y -> x + y }; def a = [2,'x']; f(a)", "cannot convert object of type int to string");
    test("def f(x,y,z) { x + y + z }; f(1,2,3) + f([1,2,3])", 12);
    test("def f = { x,y,z -> x + y + z }; f(1,2,3) + f([1,2,3])", 12);
    test("def f = { x,y,z -> x + y + z }; def a = [1,2,3]; f(1,2,3) + f(a)", 12);
    test("def f = { x,y,z=3 -> x + y + z }; def a = [1,2]; f(1,2,3) + f(a)", 12);
    test("def f(x, y) { x + y }; f([1,2])", 3);
    test("def f(x, y=3) { x + y }; f([1,2])", Utils.listOf(1,2,3));
    test("def f(x, y) { x + y }; def a = [1,2]; f(a)", 3);
    test("def f(x, y=3) { x + y }; def a = [1,2]; f(a)", Utils.listOf(1,2,3));
    test("def f(x, y=3) { x + y }; f(1,2)", 3);
    test("def f(List x, y=3) { x + y }; f([1,2])", Utils.listOf(1,2,3));
    testError("def f(List x, y=4, z) { x + y + z }; f([1, 2, 3])", "int cannot be cast to List");
  }

  @Test public void passingNamedArgs() {
    testError("def f(x, y=[a:3]) { x + y }; f(x:1,x:2,y:2)", "parameter 'x' occurs multiple times");
    testError("def f(x, y=[a:3]) { x + y }; f(x:1,yy:2)", "no such parameter: yy");
    testError("def f(int x, y=[a:3]) { x + y }; f(x:'123',y:2)", "cannot be cast to int");
    testError("def f(x, y=[a:3]) { x + y }; f(x:1,(''+'y'):2)", "invalid parameter name");
    test("def f(x, y=[a:3]) { x + y }; f(x:1,y:2)", 3);
    testError("def f(x, y) { x + y }; f([x:1,y:2])", "missing mandatory argument: y");
    test("def f(x, y=[a:3]) { x + y }; f([x:1,y:2])", Utils.mapOf("x",1,"y",2,"a",3));
    test("def f(x,y) { x*y }; f(x:2,y:3)", 6);
    test("def f(byte x, byte y) { x*y }; f(x:2,y:3)", (byte)6);
    test("def f(int x, int y) { x*y }; f(x:2,y:3)", 6);
    test("def f(int x, int y=3) { x*y }; f(x:2)", 6);
    test("def f(Map x, int y=3) { x.y = y; x }; f([x:2])", Utils.mapOf("x",2,"y",3));
    testError("def f(Map x, int y=3) { x.y = y; x }; f(x:2)", "cannot convert argument of type int to parameter type of Map");
    test("def f(def x, int y=3) { x.y = y; x }; f([x:2])", Utils.mapOf("x",2,"y",3));
    testError("def f(def x, int y=3) { x.y = y; x }; f(x:2)", "invalid object type");
    test("def f(Map x, int y=3) { x.y = y; x }; f([x:2,y:4])", Utils.mapOf("x",2,"y",3));
    test("def f(def x, int y=3) { x.y = y; x }; f([x:2,y:4])", Utils.mapOf("x",2,"y",3));
    test("def f(int x) { x*3 }; f(x:2)", 6);
    test("def f(int x=2) { x*3 }; f(x:2)", 6);
    test("def f(x,y) { x + y }; f(x:2,y:3)", 5);
    test("def f(x,y=[a:1]) { x + y }; f([x:2,y:3])", Utils.mapOf("x",2,"y",3,"a",1));
    test("def f(x,y=[a:1]) { x + y }; f(x:2,y:3)", 5);
    testError("def f(x,y,z) {x + y + z}; f(x:2,y:3)", "missing mandatory argument: z");
    testError("def f(x,y,z) {x + y + z}; f(y:3)", "missing mandatory arguments");
    testError("def f(x,y,z) {x + y + z}; f(x:[1],y:3,z:4,a:1)", "no such parameter: a");
    testError("def f(x,y,z) {x + y + z}; f(x:[1],b:2,y:3,z:4,a:1)", "no such parameters: b, a");
    testError("def f = { x,y -> x*y }; def a = [x:2,y:3]; f(a)", "missing mandatory arguments");
    test("def f = { x,y=[a:1] -> x + y }; def a = [x:2,y:3]; f(a)", Utils.mapOf("x",2,"y",3,"a",1));
    test("def f = { x,y=[a:1] -> x + y }; f(x:2,y:3)", 5);
    testError("def f = { x,y,z -> x + y + z}; def a = [x:2,y:3]; f(a)", "missing mandatory arguments");
    testError("def f = { x,y,z -> x + y + z}; def a = [y:3]; f(a)", "missing mandatory arguments");
    testError("sleep(x:1,y:2)", "no such parameters");
    testError("sleep([x:1,y:2])", "cannot convert argument of type map");
    testError("def a = [x:{it*it}]; [1,2,3].map(a)", "cannot be cast to function");
    testError("def f(a, b, c) { c(a+b) }; f(a:2,b:3) { it*it }", "missing mandatory argument: c");
    test("def f(a = '',b = 2) {a+b}; f('',null)", "null");
    test("def f(a = '',b = 2) {a+b}; f(a:'',b:null)", "null");
  }

  @Test public void simpleClosures() {
    test("{;}()", null);
    test("def f = { -> 10 }; f()", 10);
    test("var f = { -> 10 }; var g = {20}; f = g; f()", 20);
    testError("def f = { -> 10 }; f(3)", "too many arguments");
    test("byte i = 1; { byte i = 2; i++; }; i", (byte)1);
    test("byte i = 1; { int i = 2; i++; }; i", (byte)1);
    test("int i = 1; { int i = 2; i++; }; i", 1);
    test("def f = { x -> x * x }; f(2)", 4);
    test("def f = { int x -> x * x }; f(2)", 4);
    test("def f = { int x=3 -> x * x }; f(2)", 4);
    test("def f = { int x=3 -> x * x }; f()", 9);
    test("{ x -> x * x }(2)", 4);
    test("def f = { x -> { x -> x * x }(x) }; f(2)", 4);
    test("def f = { int x=3, long y=9 -> x * y }; f()", 27L);
    test("def f = { int x=3, long y=9 -> x * y }; f(2,3)", 6L);
    test("var f = { int x=3, long y=9 -> x * y * 1.0 }; f(2,3)", "#6.0");
    testError("var f = { x -> x*x }; f = 3", "cannot convert from int to function");
    test("def f = { x -> def g(x) { x*x }; g(x) }; f(3)", 9);
    test("def f = { def g(x) { x*x } }; f()(3)", 9);
    test("def f = { def g = { 3 } }; f()()", 3);
    test("def f = { -> 3 }; f()", 3);
    test("def f = { it -> it * it }; f(3)", 9);
    test("def f = { it * it }; f(3)", 9);
    testError("def f = { -> it * it }; f(3)", "unknown variable 'it'");
    test("def f = { { it * it }(it) }; f(3)", 9);
    test("def f = { it = 2 -> { it * it }(it) }; f(3)", 9);
    test("def f = { it = 2 -> { it * it }(it) }; f()", 4);
    testError("def f = { it = f(it) -> { it * it }(it) }; f()", "variable initialisation cannot refer to itself");
    testError("def f = { x, y=1, z -> x + y + z }; f(0)", "missing mandatory arguments");
    testError("def f = { x, y=1, z -> x + y + z }; f(1,2,3,4)", "too many arguments");
    test("def f = { var z='abc' -> z }; f('z')", "z");
    testError("def f = { x, y=1, z='abc' -> x + y + z }; f(1)", "non-numeric operand");
    test("def f = { x, y=1, z='abc' -> x + y + z }; f('z')", "z1abc");
    test("def f = { x, var y=1, var z='abc' -> x + y + z }; f('z')", "z1abc");
    test("def f = { String x, int y=1, var z='abc' -> x + y + z }; f('z')", "z1abc");
    testError("def f = { String x, int y=1, var z='abc' -> x + y + z }; f(123)", "cannot convert");
    test("def f = { String x, int y=1, var z='abc' -> x + y + z }; f('123')", "1231abc");
    test("def f = { for(var i=0;i<10;i++); }; f()", null);
    test("def f; f = { it = 2 -> { it * it }(it) }; f()", 4);
    test("List trees = [[1,2],[3,4]]; def f = { x,y -> \ndef h = trees[x][y]\ntrees[x][y] + h}; f(1,0)", 6);
  }

  @Test public void closedOverVars() {
    test("int x = 1; def f() { x.size() }; f()", 1);
    test("byte x = 1; def f() { x-- }; x = 2", (byte)2);
    test("byte x = 1; def f() { x-- }; x++", (byte)1);
    test("byte x = 1; def f() { x-- }; ++x", (byte)2);
    test("byte x = 1; def f() { x++ }; f(); x", (byte)2);
    test("byte x = 1; def f() { x++ }; f() + x", (byte)3);
    test("byte x = 1; def f() { def g() { x++ }; g() }; f(); x", (byte)2);
    test("byte x = 1; def f = { x++ }; f(); x", (byte)2);
    test("byte x = 1; def f = { x++ }; f() + x", (byte)3);
    test("byte x = 1; def f = { def g() { x++ }; g() }; f(); x", (byte)2);
    test("int x = 1; def f() { x-- }; x = 2", 2);
    test("int x = 1; def f() { x-- }; x++", 1);
    test("int x = 1; def f() { x-- }; ++x", 2);
    test("int x = 1; def f() { x++ }; f(); x", 2);
    test("int x = 1; def f() { x++ }; f() + x", 3);
    test("int x = 1; def f() { def g() { x++ }; g() }; f(); x", 2);
    test("int x = 1; def f = { x++ }; f(); x", 2);
    test("int x = 1; def f = { x++ }; f() + x", 3);
    test("int x = 1; def f = { def g() { x++ }; g() }; f(); x", 2);
    test("def F; def G; def f(x) { if (x==1) x else 2 * G(x) }; def g(x) { x + F(x-1) }; F=f; G=g; F(3)", 18);
    test("String x = '1'; def f = { def g() { x + x }; g() }; f(); x", "1");
    test("String x = '1'; def f = { def g() { x + x }; g() }; f()", "11");
    test("long x = 1; def f = { def g() { x + x }; g() }; f()", 2L);
    test("double x = 1; def f = { def g() { x + x }; g() }; f()", 2D);
    test("Decimal x = 1; def f = { def g() { x + x }; g() }; f()", "#2");
    test("def x = { it=2 -> it + it }; def f = { def g() { x() + x() }; g() }; f()", 8);
    test("def x(y=2) { y+y }; def f = { def g() { x() + x() }; g() }; f()", 8);
    test("def x = { y=2 -> y+y }; def f = { def g() { x() + x() }; g() }; f()", 8);
    test("def x = { y=2 -> y+y }; def f = { def g = { x() + x() }; g() }; f()", 8);
    test("def x = { y=2 -> y+y }; def f = { def g = { def a(x){x+x}; a(x()) + a(x()) }; g() }; f()", 16);
    test("def f(x) { def g() { x+x }; g() }; f(3)", 6);
    test("def f(x,y=x) { def g() { x+y }; g() }; f(3)", 6);
    test("def f(x,y=++x) { def g() { x+y }; g() }; f(3)", 8);
    test("def f(x,y={++x}) { def g() { y()+x }; g() }; f(3)", 8);
    test("def f(x,y=++x+2,z={++x + ++y}) { def g() { x++ + y++ + z() }; g() }; f(3)", 24);
    test("def f(x,y={++x}()) { def g() { y+x }; g() }; f(3)", 8);
    test("def f(x) { def g(x) { f(x) + f(x) }; if (x == 1) 1 else g(x-1) }; f(3)", 4);
    test("def f(x=1) { def g={x+x}; x++; g() }; f()", 4);
    test("def f(x=1,y=2) { def g(x) { f(x) + f(x) + y }; if (x == 1) 1 else g(x-1) }; f(3)", 10);
    test("def f(x=1,y=2) { def g(x) { f(x,y) + f(x,y) + y }; if (x == 1) 1 else g(x-1) }; f(3)", 10);
    test("def f(x=1,y=f(1,1)+1) { def g(x) { f(x,y) + f(x,y) + y }; if (x == 1) 1 else g(x-1) }; f(3)", 10);
    test("def f() { int x = 1; [{ it + x++}, {it - x++}]}; def x = f(); x[0](5) + x[0](5) + x[1](0) + x[1](0)", 6);
    test("def f(x=1,g=f,y=x) { if (x == 1) 1 else x + g(x-1) + y }; f(2)", 5);
    test("def f(x=1,g=f,y=x) { if (x == 1) 1 else x + g(x-1) + y }; f(4)", 19);
    test("def x=16; def f = { it = x -> it }; f()", 16);
    test("def f; f = { it = f(2) -> { it * it }(it) }; f()", 16);
    test("def x=1; def f(a){g(a)}; def g(a){x+a}; f(2)", 3);
    test("def x=1; def f(y){def ff() {g(y)}; ff()}; def g(a){x+a}; f(2)", 3);
    test("def x=1; def f(x){def ff() {g(x)}; ff()}; def g(a){x+a}; f(2)", 3);
    test("def x=1; def f(a){x+g(a)}; def g(a){x+a}; f(2)", 4);
    test("def x=1; def y=2; def f(a){g(a)}; def g(a){x+y+a}; f(2)", 5);
    test("def x=1; def y=2; def f(a){x;y;g(a)}; def g(a){x+y+a}; f(2)", 5);
    test("def x=1; def f = { g(it) }; def g(a){x+a}; f(2)", 3);
    test("def x=1; def f = {x+g(it)}; def g(a){x+a}; f(2)", 4);
    test("def x=1; def y=2; def f = {g(it)}; def g(a){x+y+a}; f(2)", 5);
    test("def x=1; def y=2; def f = {x;y;g(it)}; def g(a){x+y+a}; f(2)", 5);
    test("def g(x){x}; def f() { def a = g; a(3) }; f()", 3);
    test("def g(x){x}; def f(x){def a = g; x == 1 ? 1 : x+a(x-1)}; f(2)", 3);
    test("def g(x){x}; def f(x,a=g){x == 1 ? 1 : x+a(x-1)}; f(2)", 3);
    test("def i=3; def g(x){f(x)}; def f(x){x+i}; g(2)", 5);
    test("def i=3; def g(x){f(x)}; def f(x,y=i){x+y}; g(2)", 5);
    test("def h; def g(x){f(x)}; h=g; def f(x,a=h){x == 1 ? 1 : x+a(x-1)}; g(2)", 3);
    testError("def g(x){f(x)}; var h=g; def f(x,a=h){x == 1 ? 1 : x+a(x-1)}; g(2)", "closes over variable h");
    testError("def f() { def a = g; a() }; def g(){4}; f()", "closes over variable g that has not yet been initialised");
    testError("def f() { def a = g; def b=y; a()+b() }; def y(){2}; def g(){4}; f()", "closes over variables g,y that have not yet been initialised");
    test("def x = 'x'; def f() { x += 'abc' }; f(); x", "xabc");
    test("def x = 'x'; def f() { x = x + 'abc' }; f(); x", "xabc");
    test("def x = 'x'; def f() { x *= 3 }; f(); x", "xxx");
    test("def x = 'x'; def f() { x = x * 3 }; f(); x", "xxx");
    test("def x = /x/; def f() { x += 'abc' }; f(); x", "xabc");
    test("def x = /x/; def f() { x = x + 'abc' }; f(); x", "xabc");
    test("def x = /x/; def f() { x *= 3 }; f(); x", "xxx");
    test("def x = /x/; def f() { x = x * 3 }; f(); x", "xxx");
    test("def it = 'x'; def x = /x/; def f() { x += 'abc' }; f(); x", "xabc");
    test("def it = 'x'; def x = /x/; def f() { x = x + 'abc' }; f(); x", "xabc");
    test("def it = 'x'; def x = /x/; def f() { x *= 3 }; f(); x", "xxx");
    test("def it = 'x'; def x = /x/; def f() { x = x * 3 }; f(); x", "xxx");
    test("def f(x) { def g() { sleep(0,x)+sleep(0,x) }; g() }; f(3)", 6);
    test("def f(x,y=sleep(0,{++x})) { def g() { y()+x }; g() }; f(3)", 8);
    test("def f(x,y={8}) { def g() { y() }; g() }; f(3)", 8);
    test("def f(x,y=++x) { def g() { sleep(0,y)+x }; g() }; f(3)", 8);
    test("def f(x,y=++x) { def g() { sleep(0,y)+sleep(0,x) }; g() }; f(3)", 8);
    test("def i = 0; def f(x){ x == 1 ? ++i * x : ++i * f(x-1) }; f(3) + i", 9);
    test("def i = 1; def f(x){x+i}; def g(x){f(x)}; g(2)", 3);
    test("def i = 1; def f(x){x+i}; def g(i){f(i)}; g(2)", 3);
  }

  @Test public void closurePassingSyntax() {
    test("def f(n,x){ for(int i=0;i<n;i++) x(i) }; int sum=0; f(10,{sum+=it}); sum", 45);
    test("def f(n,x){ for(int i=0;i<n;i++) x(i) }; int sum=0; f(10){sum+=it}; sum", 45);
    test("def f(x){ x() }; int sum=0; f{sum=30}; sum", 30);
    test("def f(x,y){ x(); y() }; int sum=0; f{sum+=20}{sum+=30}; sum", 50);
    testError("def f(x,y){ x(); y() }; int sum=0; f{sum+=20}{sum+=30}{sum+=40}; sum", "too many arguments");
    test("def f = { n,x -> for(int i=0;i<n;i++) x(i) }; int sum=0; f(10,{sum+=it}); sum", 45);
    test("def f = { n,x -> for(int i=0;i<n;i++) x(i) }; int sum=0; f(10){sum+=it}; sum", 45);
    test("def f = { it() }; int sum=0; f{sum=30}; sum", 30);
    test("def f = { x,y -> x(); y() }; int sum=0; f{sum+=20}{sum+=30}; sum", 50);
    testError("def f = { x,y -> x(); y() }; int sum=0; f{sum+=20}{sum+=30}{sum+=40}; sum", "too many arguments");
    test("def f(n,x){ for(int i=0;i<n;i++) x(i) }; int sum=0; def g=f; g(10,{sum+=it}); sum", 45);
    test("def f(n,x){ for(int i=0;i<n;i++) x(i) }; int sum=0; def g=f; g(10){sum+=it}; sum", 45);
    test("def f(x){ x() }; int sum=0; def g=f; g{sum=30}; sum", 30);
    test("def f(x,y){ x(); y() }; int sum=0; def g=f; g{sum+=20}{sum+=30}; sum", 50);
    testError("def f(x,y){ x(); y() }; int sum=0; def g=f; g{sum+=20}{sum+=30}{sum+=40}; sum", "too many arguments");
    test("def f(x){x()}; f{return {it*it}}(2)", 4);
  }


  @Test public void stringAddRepeat() {
    test("'a' + 'b'", "ab");
    test("'' + ''", "");
    test("'' + null", "null");
    test("def x = 'a'; def y = 'b'; x+y", "ab");
    test("var x = 'a'; var y = 'b'; x+y", "ab");
    test("def x = 'a'; def y = 'b'; x += y", "ab");
    test("var x = 'a'; var y = 'b'; x += y", "ab");
    test("def x = 'a'; def y = 'b'; x += y; x", "ab");
    test("var x = 'a'; var y = 'b'; x += y; x", "ab");
    test("var x = 'x'; x += 'y'", "xy");
    test("var x = 'x'; x += 'y'; x", "xy");
    test("String x = 'x'; x += 'y'", "xy");
    test("String x = 'x'; x += 'y'; x", "xy");
    test("String x = 'x'; x += (byte)1", "x1");
    test("String x = 'x'; x += 1", "x1");
    test("String x = 'x'; x += 1; x", "x1");
    testError("String x = 'xx'; x++", "operator '++' cannot be applied to type string");
    testError("def x = 'xx'; x++", "non-numeric operand");
    testError("String x = 'xx'; ++x", "operator '++' cannot be applied to type string");
    testError("def x = 'xx'; ++x", "non-numeric operand");
    testError("String x = 'xx'; x--", "operator '--' cannot be applied to type string");
    testError("def x = 'xx'; x--", "non-numeric operand");
    testError("String x = 'xx'; --x", "operator '--' cannot be applied to type string");
    testError("def x = 'xx'; --x", "non-numeric operand");

    test("'a' * (byte)1", "a");
    test("'a' * 1", "a");
    test("'a' * 0", "");
    test("'' * 0", "");
    test("'' * 1", "");
    test("'' * 2", "");
    test("'a' * (byte)2", "aa");
    test("'a' * 2", "aa");
    test("'ab' * 2", "abab");
    test("def x = 'a'; x * 1", "a");
    test("def x = 'a'; x * 1.5", "a");
    test("def x = 'a'; x * 1L", "a");
    test("def x = 'a'; x * 1.234D", "a");
    test("def x = 'a'; x * 0", "");
    test("def x = ''; x * 0", "");
    test("var x = ''; x * 1", "");
    test("def x = ''; x * 2", "");
    test("def x = ''; x * 2.678", "");
    test("def x = 'a'; def y = 2.678; x * y", "aa");
    test("def x = 'a'; def y = 2; x * y", "aa");
    test("def x = 'ab'; def y = 2; x * y", "abab");
    test("def x = 'a'; x *= 1", "a");
    test("def x = 'a'; x *= 1; x", "a");
    test("def x = 'a'; x *= 0", "");
    test("def x = 'a'; x *= 0; x", "");
    test("def x = ''; x *= 0", "");
    test("def x = ''; x *= 0; x", "");
    test("var x = ''; x *= 1", "");
    test("var x = ''; x *= 1; x", "");
    test("def x = ''; x *= 2", "");
    test("def x = ''; x *= 2; x", "");
    test("def x = 'a'; def y = 2; x *= y", "aa");
    test("def x = 'a'; def y = 2; x *= y; x", "aa");
    test("def x = 'ab'; def y = 2; x *= y", "abab");
    test("def x = 'ab'; def y = 2; x *= y; x", "abab");
    testError("'ab' * -1", "repeat count must be >= 0");
    testError("'ab' * -1.234", "repeat count must be >= 0");
  }

  @Test public void listAdd() {
    test("[]+[]", Utils.listOf());
    test("def x = []; x + x", Utils.listOf());
    test("[] + (byte)1", Utils.listOf((byte)1));
    test("[] + 1", Utils.listOf(1));
    test("[] + [a:1]", Utils.listOf(Utils.mapOf("a",1)));
    test("[1] + 2", Utils.listOf(1,2));
    test("[1] + [2]", Utils.listOf(1,2));
    test("[1,2] + [3,4]", Utils.listOf(1,2,3,4));
    test("def x = [1,2]; x + [3,4]", Utils.listOf(1,2,3,4));
    test("def x = [1,2]; x + [[3,4]]", Utils.listOf(1,2,Utils.listOf(3,4)));
    test("def x = ['a','b']; x + [[3,4]]", Utils.listOf("a","b",Utils.listOf(3,4)));
    test("def x = [1,2]; def y = [3,4]; x + y", Utils.listOf(1,2,3,4));
    test("['a','b'] + 'c'", Utils.listOf("a","b","c"));
    test("['a','b'] + 1", Utils.listOf("a","b",1));
    test("def x = ['a','b']; def y = 'c'; x + y", Utils.listOf("a","b","c"));
    test("var x = ['a','b']; x += 'c'", Utils.listOf("a","b","c"));
    test("def x = ['a','b']; x += 'c'", Utils.listOf("a","b","c"));
    test("var x = ['a','b']; x += ['c','d']", Utils.listOf("a","b","c","d"));
    test("def x = ['a','b']; x += ['c','d']", Utils.listOf("a","b","c","d"));
    test("var x = ['a','b']; x += x", Utils.listOf("a","b","a","b"));
    test("def x = ['a','b']; x += x", Utils.listOf("a","b","a","b"));
    test("var x = ['a','b']; def y = 'c'; x += y", Utils.listOf("a","b","c"));
    test("var x = ['a','b']; var y = 'c'; x += y", Utils.listOf("a","b","c"));
    test("var x = ['a','b']; def y = 'c'; x += y; x", Utils.listOf("a","b","c"));
    test("def x = ['a','b']; def y = 'c'; x += y", Utils.listOf("a","b","c"));
    test("def x = ['a','b']; var y = 'c'; x += y", Utils.listOf("a","b","c"));
    test("var x = ['a','b']; def y = ['c','d']; x += y", Utils.listOf("a","b","c","d"));
    test("var x = ['a','b']; var y = ['c','d']; x += y", Utils.listOf("a","b","c","d"));
    test("def x = ['a','b']; var y = ['c','d']; x += y", Utils.listOf("a","b","c","d"));
    test("var x = ['a','b']; x += x", Utils.listOf("a","b","a","b"));
    test("def x = ['a','b']; x += x", Utils.listOf("a","b","a","b"));
    test("var x = ['a','b']; x += x; x", Utils.listOf("a","b","a","b"));
    test("def x = ['a','b']; x += x; x", Utils.listOf("a","b","a","b"));
    test("var x = ['a','b']; x += 1; x", Utils.listOf("a","b",1));
    test("def x = ['a','b']; x += 1; x", Utils.listOf("a","b",1));
    test("'abc'.map{it} + 'd'", Utils.listOf("a","b","c","d"));
    testError("var x = ['a','b']; x -= 1; x", "non-numeric operand");
    testError("def x = ['a','b']; x -= 1; x", "non-numeric operand");
    testError("var x = ['a','b']; x++", "unary operator '++' cannot be applied to type list");
    testError("def x = ['a','b']; x++", "non-numeric operand");
    testError("var x = ['a','b']; ++x", "operator '++' cannot be applied to type list");
    testError("def x = ['a','b']; ++x", "non-numeric operand");
    testError("var x = ['a','b']; x--", "operator '--' cannot be applied to type list");
    testError("def x = ['a','b']; x--", "non-numeric operand");
    testError("var x = ['a','b']; --x", "operator '--' cannot be applied to type list");
    testError("def x = ['a','b']; --x", "non-numeric operand");
  }

  @Test public void listAddSingle() {
    test("[] << 1", Utils.listOf(1));
    testError("[] <<= 1", "invalid lvalue");
    test("def x = []; x << (byte)1", Utils.listOf((byte)1));
    test("def x = []; x << 1", Utils.listOf(1));
    test("def x = []; x << 1; x", Utils.listOf());
    test("List x = []; x << 1; x", Utils.listOf());
    test("def x = []; x <<= 1; x", Utils.listOf(1));
    test("List x = []; x <<= 1; x", Utils.listOf(1));
    test("List x = []; x <<= 1 << 2; x", Utils.listOf(4));
    test("List x = []; x <<= [1] << 2; x", Utils.listOf(Utils.listOf(1,2)));
    test("List x = ['a','b']; x <<= [1] << 2", Utils.listOf("a","b",Utils.listOf(1,2)));
    test("List x = ['a','b']; x <<= [1] << 2; x", Utils.listOf("a","b",Utils.listOf(1,2)));
    test("def x = ['a','b']; def y = [1] << 2; x <<= y", Utils.listOf("a","b",Utils.listOf(1,2)));
    test("def x = ['a','b']; def y = [1] << 2; x <<= y; x", Utils.listOf("a","b",Utils.listOf(1,2)));
    test("[1,2] << [a:1]", Utils.listOf(1,2,Utils.mapOf("a",1)));
    test("[1,2].flatMap{ [it,it] } << [a:1]", Utils.listOf(1,1,2,2,Utils.mapOf("a",1)));
  }


  @Test public void mapAdd() {
    test("[:] + [:]", Utils.mapOf());
    test("def x = [:]; x + x", Utils.mapOf());
    test("[:] + [a:1]", Utils.mapOf("a",1));
    test("def x = [a:1]; [:] + x", Utils.mapOf("a",1));
    test("def x = [a:1]; x + x", Utils.mapOf("a",1));
    test("[a:1] + [b:2]", Utils.mapOf("a",1,"b",2));
    test("def x = [a:1]; def y = [b:2]; x + y", Utils.mapOf("a",1,"b",2));
    test("def x = [a:1]; def y = [a:2]; x + y", Utils.mapOf("a",2));
    test("def x = [a:1,b:2]; def y = [a:2,c:3]; x + y", Utils.mapOf("a",2,"b",2,"c",3));
    test("def x = [a:1,b:2]; def y = [a:2,c:3]; x += y", Utils.mapOf("a",2,"b",2,"c",3));
    test("var x = [a:1,b:2]; var y = [a:2,c:3]; x += y", Utils.mapOf("a",2,"b",2,"c",3));
    test("def x = [a:1,b:2]; def y = [a:2,c:3]; x += y; x", Utils.mapOf("a",2,"b",2,"c",3));
    test("var x = [a:1,b:2]; var y = [a:2,c:3]; x += y; x", Utils.mapOf("a",2,"b",2,"c",3));
    test("def x = [a:1,b:2]; def y = [a:2,c:3]; x += y; x += x", Utils.mapOf("a",2,"b",2,"c",3));
    test("var x = [a:1,b:2]; var y = [a:2,c:3]; x += y; x += x", Utils.mapOf("a",2,"b",2,"c",3));
    test("def x = [a:1,b:2]; def y = [a:2,c:3]; x += y; x += x; x", Utils.mapOf("a",2,"b",2,"c",3));
    test("var x = [a:1,b:2]; var y = [a:2,c:3]; x += y; x += x; x", Utils.mapOf("a",2,"b",2,"c",3));
    testError("var x = [a:1,b:2]; x -= 1; x", "cannot subtract int from map");
    testError("def x = [a:1,b:2]; x -= 1; x", "cannot subtract");
    testError("var x = [a:1,b:2]; x++", "unary operator '++' cannot be applied to type map");
    testError("def x = [a:1,b:2]; x++", "non-numeric operand");
    testError("var x = [a:1,b:2]; ++x", "operator '++' cannot be applied to type map");
    testError("def x = [a:1,b:2]; ++x", "non-numeric operand");
    testError("var x = [a:1,b:2]; x--", "operator '--' cannot be applied to type map");
    testError("def x = [a:1,b:2]; x--", "non-numeric operand");
    testError("var x = [a:1,b:2]; --x", "operator '--' cannot be applied to type map");
    testError("def x = [a:1,b:2]; --x", "non-numeric operand");
    testError("[:] + [1,2,3]", "cannot add list");
    testError("def x = [:]; def y = [1,2,3]; x + y", "cannot add list");
  }

  @Test public void mapSubtract() {
    test("[:] - [:]", Utils.mapOf());
    test("[a:1] - [:]", Utils.mapOf("a",1));
    test("[:] - [a:1]", Utils.mapOf());
    test("[a:1,b:2,c:[a:1]] - [c:1]", Utils.mapOf("a",1,"b",2));
    test("Map x = [:]; x - [:]", Utils.mapOf());
    test("Map x = [a:1]; x - [:]", Utils.mapOf("a",1));
    test("Map x = [:]; x - [a:1]", Utils.mapOf());
    test("Map x = [a:1,b:2,c:[a:1]]; x - [c:1]", Utils.mapOf("a",1,"b",2));
    test("Map x = [a:1,b:2,c:[a:1]]; x -= [c:1]; x", Utils.mapOf("a",1,"b",2));
    test("Map x = [a:1,b:2,c:[a:1]]; x - [c:1] - [b:4]", Utils.mapOf("a",1));
    test("def x = [:]; x - [:]", Utils.mapOf());
    test("def x = [a:1]; x - [:]", Utils.mapOf("a",1));
    test("def x = [:]; x - [a:1]", Utils.mapOf());
    test("def x = [a:1,b:2,c:[a:1]]; x - [c:1]", Utils.mapOf("a",1,"b",2));
    test("def x = [a:1,b:2,c:[a:1]]; x - [c:1] - [b:4]", Utils.mapOf("a",1));
    test("def x = [:]; def y = [:]; x - y", Utils.mapOf());
    test("def x = [a:1]; def y = [:]; x - y", Utils.mapOf("a",1));
    test("def x = [:]; def y = [a:1]; x - y", Utils.mapOf());
    test("def x = [a:1,b:2,c:[a:1]]; def y = [c:1]; x - y", Utils.mapOf("a",1,"b",2));
    test("def x = [a:1,b:2,c:[a:1]]; def y = [c:1]; x = x - y; x - [b:4]", Utils.mapOf("a",1));
    test("def x = [a:1,b:2,c:[a:1]]; def y = [c:1]; x -= y; x - [b:4]", Utils.mapOf("a",1));
    test("[:] - []", Utils.mapOf());
    test("[a:1] - []", Utils.mapOf("a",1));
    test("[:] - ['a']", Utils.mapOf());
    test("[a:1,b:2,c:[a:1]] - ['c']", Utils.mapOf("a",1,"b",2));
    test("Map x = [:]; x - []", Utils.mapOf());
    test("Map x = [a:1]; x - []", Utils.mapOf("a",1));
    test("Map x = [:]; x - ['a']", Utils.mapOf());
    test("Map x = [a:1,b:2,c:[a:1]]; x - ['c']", Utils.mapOf("a",1,"b",2));
    test("Map x = [a:1,b:2,c:[a:1]]; x -= ['c']; x", Utils.mapOf("a",1,"b",2));
    test("Map x = [a:1,b:2,c:[a:1]]; x - ['c'] - [b:4]", Utils.mapOf("a",1));
    test("def x = [:]; x - []", Utils.mapOf());
    test("def x = [a:1]; x - []", Utils.mapOf("a",1));
    test("def x = [:]; x - ['a']", Utils.mapOf());
    test("def x = [a:1,b:2,c:[a:1]]; x - ['c']", Utils.mapOf("a",1,"b",2));
    test("def x = [a:1,b:2,c:[a:1]]; x - ['c'] - [b:4]", Utils.mapOf("a",1));
    test("def x = [:]; def y = []; x - y", Utils.mapOf());
    test("def x = [a:1]; def y = []; x - y", Utils.mapOf("a",1));
    test("def x = [:]; def y = ['a']; x - y", Utils.mapOf());
    test("def x = [a:1,b:2,c:[a:1]]; def y = ['c']; x - y", Utils.mapOf("a",1,"b",2));
    test("def x = [a:1,b:2,c:[a:1]]; def y = ['c']; x = x - y; x - [b:4]", Utils.mapOf("a",1));
    test("def x = [a:1,b:2,c:[a:1]]; def y = ['c']; x -= y; x - [b:4]", Utils.mapOf("a",1));
    testError("[a:1] - 1", "cannot subtract");
    testError("def x = [a:1]; x - 1", "cannot subtract");
  }

  @Test public void classNameErrors() {
    testError("class X{}\nX\n1", "class name not allowed");
    testError("class X{}; ++X", "class name not allowed");
    testError("class X{ class Y{} }; X.Y += 4", "non-numeric operand");
    testError("class X{ class Y{} }; X.Y++", "non-numeric operand");
    testError("class X{ class Y{} }; ++X.Y", "non-numeric operand");
    testError("class X{}; X++", "class name not allowed");
    testError("class X{}; !X", "class name not allowed");
    testError("class X{ class Y{} }; !X.Y", "class name not allowed");
    testError("class X{}; X == 1", "class name not allowed");
    testError("class X{}; X; 1", "class name not allowed");
    testError("class X{}; X", "class name not allowed");
    testError("class X{}; def x = X; 1", "class name not allowed");
    testError("int; 1", "unexpected token 'int'");
    testError("def x = int; 1", "unexpected token 'int'");
  }

  @Test public void andOrNot() {
    test("not true", false);
    test("not false", true);
    test("not not true", true);
    test("not not false", false);
    test("not (not not true)", false);
    test("not not (not false)", true);
    test("true and true", true);
    test("false and true", false);
    test("true and false", false);
    test("false and false", false);
    test("true or true", true);
    test("false or true", true);
    test("true or false", true);
    test("false or false", false);
    test("not false or false", true);
    test("false or true and false", false);
    test("true or true and false", true);
    test("true or true and true", true);
    test("false or not false and true", true);
    test("null and true", false);
    test("true and null", false);
    test("null and null", false);
    test("null or true", true);
    test("true or null", true);
    test("false or null", false);
    test("null or false", false);
    test("true and (true or false and true) or not (true and false)", true);
    test("def x =\n1;\ntrue\nand\nx = 2;\n x", 2);
    test("def x = (byte)1; x = 2 and true", true);
    test("def x = 1; x = 2 and true", true);
    test("def x = 1; x = 2 and true; x", 2);
    test("def it = 'abc'; /a/r ? true : false", true);
    test("def it = 'abc'; def x; /a/r and x = 'xxx'; x", "xxx");
    test("def x = 0; for (int i = 0; i < 10; i++) { i < 5 and do { x += i; true } and continue; x++ }; x", 15);
    test("int f() { true and return 1; return 0 }; f()", 1);
    testError("superFields and print 'xxx'", "reference to unknown variable");
  }

  @Test public void die() {
    testError("die \"ab${2+3}\"", "ab5");
    testError("die if true", "die if true");
    testError("die if true", "script death");
    testError("die", "script death");
    testError("die", "die");
  }

  @Test public void eval() {
    test("eval('1',[:])", 1);
    test("eval('1')", 1);
    test("eval('x',[x:null])", null);
    test("eval('x + (byte)1',[x:(byte)3])", (byte) 4);
    test("eval('x + 1',[x:3])", 4);
    test("eval('x + 1L',[x:3])", 4L);
    test("eval('x + 1',[x:3L])", 4L);
    test("eval('x + 1',[x:'3'])", "31");
    test("eval('x + 1',[x:3]) + eval('x+3',[x:3])", 10);
    test("eval('x x + 1',[x:3])", null);
    test("def vars = [x:3]; eval('x x + 1',vars); vars.'$error' =~ /unexpected token/i", true);
    test("def vars = [output:null]; eval('''def x = 'abc'; output = x.size()''',vars); vars.output", 3);
    test("eval('''result = 0; for(int i = 0; i < 5; i++) result += i; result''',[result:null])", 10);
    test("['[1,2]','[3]'].map{ eval(it,[:]) }", Utils.listOf(Utils.listOf(1, 2), Utils.listOf(3)));
    test("['[1,2]','[3]'].map{ sleep(0,it) }.map{ eval(it,[:]) }", Utils.listOf(Utils.listOf(1, 2), Utils.listOf(3)));
  }

  @Test public void evalWithAsync() {
    test("eval('sleep(0,1)')", 1);
    test("eval('sleep(0,1)+sleep(0,2)')+eval('sleep(0,3)+sleep(0,4)')", 10);
    test("eval('''['[1,2]','[3]'].map{ sleep(0,it) }.map{ eval(it,[:]) }''')", Utils.listOf(Utils.listOf(1, 2), Utils.listOf(3)));
    test("eval('''result = 0; for(int i = 0; i < 5; i++) result += sleep(0,i-1)+sleep(0,1); result''',[result:null])", 10);
    test("eval('''eval('sleep(0,1)+sleep(0,2)')+eval('sleep(0,3)+sleep(0,4)')''')", 10);
  }

  @Test public void asyncFunctions() {
    useAsyncDecorator = false;
    test("sleep(1,2)", 2);
    test("sleep(timeMs:1,data:2)", 2);
    test("def f = sleep; f(timeMs:1,data:2)", 2);
    testError("def f = sleep; f(timeMs:1,datax:2)", "no such parameter");
    testError("sleep('abc')", "cannot be cast to number");
    testError("def f = sleep; f('abc')", "cannot be cast");
    test("sleep(1,(byte)2)", (byte)2);
    test("sleep(1,2L)", 2L);
    test("sleep(1,2D)", 2D);
    test("sleep(1,2.0)", "#2.0");
    test("sleep(1,[])", Utils.listOf());
    test("sleep(1,[:])", Utils.mapOf());
    test("sleep(1,{it*it})(2)", 4);
    test("var x=1L; var y=1D; sleep(1,2)", 2);
    test("sleep(1,2) + sleep(1,3)", 5);
    test("List l=[1,2]; Map m=[a:1]; String s='asd'; int i=1; long L=1L; double d=1.0D; Decimal D=1.0; sleep(1,2) + l.size() + m.size() + i + L + d + D + sleep(1,3) + l.size() + m.size() + i + L + d + D", "#19.0");
    test("var l=[1,2]; var m=[a:1]; var s='asd'; var i=1; var L=1L; var d=1.0D; var D=1.0; sleep(1,2) + l.size() + m.size() + i + L + d + D + sleep(1,3) + l.size() + m.size() + i + L + d + D", "#19.0");
    test("def l=[1,2]; def m=[a:1]; def s='asd'; def i=1; def L=1L; def d=1.0D; def D=1.0; sleep(1,2) + l.size() + m.size() + i + L + d + D + sleep(1,3) + l.size() + m.size() + i + L + d + D", "#19.0");
    test("sleep(1,sleep(1,2))", 2);
    test("sleep(sleep(1,1),2)", 2);
    test("sleep(sleep(1,1),sleep(1,2))", 2);
    test("sleep(1,sleep(sleep(1,1),2)) + sleep(1,3)", 5);
    test("def y; y ?= sleep(1,2); y", 2);
    test("def y; y ?= sleep(1,null); y", null);
    test("def x; def y; y ?= sleep(1,x)?.size(); y", null);
    test("def x; def y; y ?= x?.(sleep(1,'si') + sleep(1,'ze'))()?.size(); y", null);
    test("def x = [1,2,3]; def y; y ?= x?.(sleep(1,'si') + sleep(1,'ze'))(); y", 3);
    test("def x = [1,2,3]; def y; y ?= x?.(sleep(sleep(1,1),'si') + sleep(sleep(1,1),'ze'))(); y", 3);
    test("def f(int x) { sleep(1,x) + sleep(1,x) }; f(1)", 2);
    test("def f(int x = sleep(1,1)) { sleep(1,x) + sleep(1,x) }; f()", 2);
    test("def f(long x = sleep(1,1)) { sleep(1,x) + sleep(1,x) }; f()", 2L);
    test("def f(double x = sleep(1,1)) { sleep(1,x) + sleep(1,x) }; f()", 2D);
    test("def f(int x = sleep(1,1) + sleep(1,2)) { sleep(1,x) + sleep(1,x) }; f()", 6);
    test("def f(int x = sleep(sleep(1,1),sleep(1,1))) { sleep(1,x) + sleep(1,x) }; f()", 2);
    test("def f(x = sleep(1,2),y=sleep(1,x*x)) { x * y }; f()", 8);
    test("def f(x = sleep(1,2),y=sleep(1,x*x)) { x * y }; f(sleep(1,3),sleep(1,5))", 15);
    test("def f(x = sleep(1,2),y=sleep(1,x*x)) { sleep(1,x) * sleep(1,y) }; f()", 8);
    test("def f(x=8) { def g = {sleep(1,it)}; g(x) }; f()", 8);
    test("def f(x = sleep(1,2),y=sleep(1,x*x)) { def g = { sleep(1,it) + sleep(1,it) }; g(x)*g(y) }; f()", 32);
    test("\"${sleep(1,2) + sleep(1,3)}\"", "5");
    test("\"${sleep(1,'a')}:2\"", "a:2");
    test("\"${sleep(1,'a')}:${sleep(1,2)}\"", "a:2");
    test("\"${sleep(1,'a')}:${sleep(1,2) + sleep(1,3)}\"", "a:5");
    test("def x = 0; for (int i=sleep(1,1),j=sleep(1,2*i),k=0; k<sleep(1,5) && i < sleep(1,100); k=sleep(1,k)+1,i=i+sleep(1,1),j=sleep(1,j+1)) { x += sleep(1,k+i+j); }; x", 45);

    test("sleep(0,2)", 2);
    test("def f() { sleep(0,1) }; f()", 1);
    test("def f = sleep; f(0,2)", 2);
    test("def f(x){sleep(0,x)}; f(sleep(0,2))", 2);
    test("def f(x){sleep(0,x)}; def g = f; g(2)", 2);
    test("def f(x){sleep(0,x)}; def g; g = f; g(2)", 2);
    test("def f(x){sleep(0,x)}; def g; g = f; 2", 2);
    test("def f(x){sleep(0,x)}; def g = f; g = {it}; g(2)", 2);
    test("def f(x){x}; def g = f; g = {it}; g(2)", 2);
    test("def g(x){sleep(0,x)*sleep(0,x)}; def f(x){g(sleep(0,x)*sleep(0,1))*sleep(0,x)}; f(2)", 8);
    test("def g = {sleep(0,it)*sleep(0,it)}; def f(x,y){g(x)*sleep(0,x)*sleep(0,y)}; f(2,1)", 8);
    test("def g; g = {it*it}; def f(x){g(x)*x}; f(2)", 8);
    test("def g = {it*it}; def h = { def f(x){g(x)*x}; f(it) }; h(2)", 8);
    test("def g = {it*it}; def h = { g(it)*it }; g = {sleep(0,it)*it}; h(2)", 8);
    test("def g = {it*it}; def h = { def f(x){g(x)*x}; f(it) }; g = {sleep(0,it)*it}; h(2)", 8);
    test("def g = {it*it}; def h = { def f(x){g(x)*x}; f(it) }; g = {it*it}; h(2)", 8);
    test("def g = {it*it}; def h = { def f(x){g(x)*x}; g={it*it}; f(it) }; h(2)", 8);
    test("{it*it*it}(2)", 8);
    test("{it*it*sleep(0,it)}(2)", 8);
    test("def f(x=sleep(0,2)){x*x}; f(3)", 9);
    test("def f(x=sleep(0,2)){x*x}; f()", 4);
    test("def f(x){g(x)*g(x)}; def g(x){sleep(0,1)+sleep(0,x-1)}; f(2)", 4);
    test("def f(x){x<=1?1:g(x)}; def g(x){ def h(x){f(x-1)+j(x)}; h(x) }; def j(x){x+x}; f(2)", 5);
    test("def f(x){x<=1?1:g(x)}; def g(x){ def h(x){f(x-1)+j(x)}; h(x) }; def j(x){sleep(0,x)+sleep(0,x)}; f(2)", 5);
    test("def f(x){x<=1?1:g(x)}; def g(x){ def h(x){f(x-1)+j(sleep(0,-23)+sleep(0,x+23))}; h(x) }; def j(x){x+x}; f(2)", 5);
    test("def f(x){x<=1?1:g(x)}; def g(x){ def h(x){f(x-1)+j(x)}; h(x) }; def j(x){f(x-1)+f(x-1)}; f(2)", 3);
    test("def f(x){x<=1?1:g(sleep(0,x-23)+sleep(0,23))}; def g(x){ def h(x){f(x-1)+j(x)}; h(x) }; def j(x){f(x-1)+f(x-1)}; f(2)", 3);
    test("def f(x){x<=1?1:g(x)}; def g(x){ def h(x){f(x-1)+j(x)+j(x)}; h(x) }; def j(x){f(sleep(0,x)-1)+f(sleep(0,x)-1)}; f(2)", 5);
    test("def f = {it}; f(2)", 2);
    test("def f = {sleep(0,it)+sleep(0,it)}; f(2)", 4);
    test("def f(x){g(x)}; def g(x){sleep(0,x)+sleep(0,x)}; f(2)+f(3)", 10);
    test("def s = sleep; def f(x){x<=1?s(0,1):g(x)}; def g(x){s(0,x)+s(0,f(x-1))}; f(2)+f(3)", 9);
    test("def f(x){x<=1?1:g(x)}; def g(x){def s = sleep; s(0,x) + s(0,f(x-1))}; f(2)+f(3)", 9);
    test("int i = 1; def f(){ return sleep(0,{ ++i }) }; def g = f(); g() + g()", 5);
    test("int i = sleep(0,-1)+sleep(0,2); def f(){ return sleep(0,{ sleep(0,++i - 1)+sleep(0,1) }) }; def g = f(); g() + g()", 5);
    test("byte i = 5; def f(byte x = sleep(0,(byte)1)+sleep(0,(byte)1), byte y=sleep(0,{x+i}())+sleep(0,{x+i+(byte)1}()), byte z=3) { sleep(0,x)+sleep(0,y)+sleep(0,z) }; f()", (byte)20);
    test("int i = 5; def f(int x = sleep(0,1)+sleep(0,1), long y=sleep(0,{x+i}())+sleep(0,{x+i+1}()), double z=3) { sleep(0,x)+sleep(0,y)+sleep(0,z) }; f()", 20D);
    test("def x = 1; while (true) { (false and break) or x = sleep(0,2); break }; x", 2);
    test("def x = 1; true and sleep(0, x = 2); x", 2);
    test("def x = 1; true and sleep(0, x ?= 2); x", 2);
    test("int x = 1; x += sleep(0,x) + sleep(0,x); x", 3);
    test("def x = 1; x += sleep(0,x) + sleep(0,x); x", 3);
    test("def f(int x, long y, String z, double d) { sleep(0,x++); sleep(0,y++); sleep(0,d++); z = sleep(0,z) * sleep(0,x); z + \": x=$x,y=$y,d=$d\" }; f(1,2,'x',3D)", "xx: x=2,y=3,d=4.0");
    test("int x = 1; long y = 2; double d = 3; sleep(0, d = sleep(0, y = sleep(0, x += sleep(0,x=3)) + x) + y) + x", 20.0D);
    test("def x = 1; x ?= sleep(0, null as int); x", 1);
    test("def f = null; f = { null as int }; def x = 1; x ?= sleep(0, 1) + f(); x", 1);
    test("def f = null; f = { sleep(0,null) as int }; def x = 1; x ?= f(); x", 1);
    test("def f(x) { x == 1 ? 3 : f(sleep(0,x.a)) }; f([a:[a:[a:1]]])", 3);
    testError("def f(x) { x == 1 ? 3 : f(sleep(0,x.a)) }; f([a:[a:[a:2]]])", "invalid parent object type");
  }

  @Test public void asyncFieldAccess() {
    test("Map m = [(sleep(0,'a')):sleep(0,1)]; m.\"${sleep(0,'a')}\"", 1);
    test("def m = [(sleep(0,'a')):sleep(0,1)]; m.\"${sleep(0,'a')}\"", 1);
  }

  @Test public void asyncErrorPropagation() {
    testError("def f(m) { m.y.z == 1 ? 1 : sleep(0,m.x) + sleep(0,f([x:m.x-1])) }; f([x:3])", "null value for parent");
    testError("def f(m) { m.x == ('x'+m.x) as Decimal ? 1 : sleep(0,m.x) + sleep(0,f([x:m.x-1])) }; f([x:3])", "string value is not a valid decimal");
  }

  @Test public void keywordAsIdentifier() {
    testError("int for = 3", "expecting identifier");
    testError("int for(x){x}", "expecting identifier");
  }

  @Test public void globals() {
    JactlContext jactlContext = JactlContext.create()
                                               .evaluateConstExprs(true)
                                               .replMode(true)
                                               .debug(debugLevel)
                                               .build();

    Jactl.compileClass("class Z { int i }", jactlContext);
    Object z = Jactl.eval("new Z(2)", new HashMap(), jactlContext);

    Map<String,Object> globals = createGlobals();
    globals.put("z", z);
    BiConsumer<String,Object> runtest = (code,expected) -> {
      Object result = Compiler.eval(code, jactlContext, globals);
      assertEquals(expected, result);
    };

    runtest.accept("def x = (byte)1", (byte)1);
    runtest.accept("def x = 1", 1);
    runtest.accept("x", 1);
    runtest.accept("def f(x){x*x}; f(2)", 4);
    runtest.accept("f(3)", 9);
    runtest.accept("z instanceof Z", true);
    runtest.accept("z.i", 2);
  }

  @Test public void endOfLine() {
    test("1 + \n2", 3);
    test("def x =\n1 + \n2", 3);
    test("def x =\n1 + \n(2\n)", 3);
    test("def x =\n1 + (\n2)\n", 3);
    test("def x =\n1 + (\n2)\n", 3);
    test("[1,2,3].map{\n\nit}", Utils.listOf(1,2,3));
    test("['a','b'].map{\n\n\"\"\"\"$it=\" + $it\"\"\" }.\n\njoin(' + \", \" + ')", "\"a=\" + a + \", \" + \"b=\" + b");
    test("def f = {\nreturn }; f()", null);
    test("def f = {\nreturn\n}; f()", null);
    test("while (false) { 1 }\n2", 2);
    test("if (true) {\n if (true) \n1\n\n [1].map{ it }\n}\n", Utils.listOf(1));
    test("if (true) {\n if (true) {\n1\n}\n [1].map{ it }\n}\n", Utils.listOf(1));
    test("true or false\nand true", true);
    test("true \nor \nreturn", true);
    test("true \nor \nnot return", true);
    test("true or not\nreturn", true);
    test("true or not\nnot\nfalse\nand true", true);
    test("true &&\nfalse", false);
    test("true \n && \n false", false);
    test("true &&\n!\n!\n!\nfalse", true);
    test("def x=1; ++\nx", 2);
    test("def x=1; ++\n++\nx", 3);
    test("[a\n:\n1\n]", Utils.mapOf("a",1));
    test("1\n[1].map{ it }", Utils.listOf(1));
    test("'123'[2]", "3");
    test("'123'\n[2]", Utils.listOf(2));
    test("('123'\n[2])", "3");
    test("def x=[1,2,3]; x\n[2]", Utils.listOf(2));
    test("def x=[1,2,3]; def f={it}; f(x\n[2])", 3);
    test("def x = 1; ++\n++\nx\n++\n++\nx\nx", 3);
    testError("def x = 1; ++\n++\nx\n++\n++", "expected start of expression");
    test("[\n1\n,\n2\n,\n3\n]", Utils.listOf(1,2,3));
    test("def f(x\n,\ny\n)\n{\nx\n+\ny\n}\nf(1,2)", 3);
    testError("4\n/2", "unexpected end of file in string");
    test("4\n-3*2", -6);
    testError("int\ni\n=\n3\n", "unexpected token '='");
    test("int\ni =\n3\n", 3);
    test("int\ni =\n1,\nj =\n2,\nk\ni+j", 3);
    test("for\n(\nint\ni =\n4-\n3,\nj =\n4/\n2\n;\ni\n<\n10\n;\ni++\n)\n;", null);
    test("def x = [1,2]; if\n(\nx\n[\n0\n]\n)\n4", 4);
    test("def x = [1,2]; def i = 0; while\n(\nx\n[\n0\n]\n>\n10\n||\ni++\n<2\n)\nx[\n2\n]\n=\n7\nx[2]", 7);
  }

  @Test public void eof() {
    testError("def ntimes(n,x) {\n for (int i = 0; i < n; i++) {\n", "unexpected eof");
  }

  @Test public void globalsOptimisation() {
    globals.put("x", "abc");
    test("sleep(0,x) + sleep(0,'d')", "abcd");
    test("sleep(0,x) + sleep(0,'d') + sleep(0,x)", "abcdabc");
    globals.put("x", 123);
    test("x", 123);
    test("x + 1", 124);
    test("def f(n) { x = n }; x = 1; x + 'abc'.size() + x", 5);
    test("def f(n) { x = n }; x = 1; x + f(3) + x", 7);
    test("def f(n) { x = n }; x = 1; def y = x + f(3) + x; x = 3; y + x", 10);
    test("def f(n) { x = n }; x = 1; def y = ++x + x + f(3) + x; x = 3; y + x", 13);
    test("def f(n) { x = n }; x = 1; def y = (x += 1) + x + f(3) + x; x = 3; y += x; f(1); y + x", 14);
    test("def g(n) { x = n }; x = 1; def f = g; def y = (x += 1) + x + f(3); y += x; x = 3; y += x; f(1); y + x", 14);
    test("def g(n) { x = n }; x = 1; def f = g; def y = (x += 1) + x + f(3); y += x; x = 3; y += x; f(1); y + x", 14);
    test("def g(n) { if (false) { sleep(0) }; x = n }; x = 1; def f = g; def y = (x += 1) + x + f(3); y += x; x = 3; y += x; f(1); y + x", 14);
    test("sleep(0); x if true; sleep(0,x)", 123);
  }

  InputOutputTest replTest = (code, input, expectedResult, expectedOutput) -> {
    Runnable setInput = () -> RuntimeState.setInput(input == null ? null: new BufferedReader(new StringReader(input)));
    ByteArrayOutputStream output;

    setInput.run();
    RuntimeState.setOutput(new PrintStream(output = new ByteArrayOutputStream()));
    doTest(code, true, true, false, expectedResult);
    assertEquals(expectedOutput, output.toString());

    setInput.run();
    RuntimeState.setOutput(new PrintStream(output = new ByteArrayOutputStream()));
    doTest(code, false, true, false, expectedResult);
    assertEquals(expectedOutput, output.toString());

    setInput.run();
    RuntimeState.setOutput(new PrintStream(output = new ByteArrayOutputStream()));
    doTest(code, true, true, true, expectedResult);
    assertEquals(expectedOutput, output.toString());
  };

  @Test public void beginEndBlocks() {
    // Test in repl mode only so that we can use global vars
    // Auto-creation ???
//    test.accept("x = x + 1", 1, "");
//    test.accept("++x", 1, "");
//    test.accept("x.a = 1", 1, "");
//    test.accept("x.a = 1; x.a", 1, "");

    replTest.accept("BEGIN{ x = 1 }; x", null, 1, "");
    replTest.accept("BEGIN{ x = [:] }; x.a = 1", null, 1, "");
    replTest.accept("BEGIN{ x = [:] }; x.a; BEGIN { x.a = 1 }", null, 1, "");
    replTest.accept("END { print 'x' }", null, true, "x");
    replTest.accept("END { x = 7 }; x = 2; BEGIN { x = 3 }", null, 7, "");
    replTest.accept("BEGIN { def x = 7 }; x = 2; END { x + x }", null, 4, "");
//    replTest.accept("BEGIN { def x = 7 }; x = 2; END { println 'end1'; x + x }; BEGIN{ x += 3 }; END { println 'end2'; x + x + x }", null, 6, "end1\nend2\n");
  }

  @Test public void nextLine() {
    replTest.accept("nextLine() == null", null,true, "");
    replTest.accept("nextLine() == 'x'", "x",true, "");
    replTest.accept("nextLine() == 'x' && nextLine() == null", "x",true, "");
    replTest.accept("while (it = nextLine()) println it", "x",null, "x\n");
    replTest.accept("while ((it = nextLine()) != null) println it", "x\ny\n\nz\n",null, "x\ny\n\nz\n");
    replTest.accept("stream(nextLine).map{ eval(it,[:]) }", "[1,2]\n[3]\n", Utils.listOf(Utils.listOf(1,2), Utils.listOf(3)), "");
    replTest.accept("stream{sleep(0,nextLine())}.filter{ !/^$/r }.map{ eval(it,[:]) }.grouped(2).map{ it[0].size() + it[1].size() }.filter{ true }",
                    "[1,2]\n[3]\n\n", Utils.listOf(3), "");
    try {
      replTest.accept("def x = 0; while(nextLine() =~ /(\\d)/ng) { x+= $1 }; x", null, 0, "");
      fail("Expected error");
    }
    catch (AssertionError e) {
      // We expect error
    }
    replTest.accept("def x = 0; while(nextLine() =~ /(\\d)/ng) { x+= $1 }; x", "", 0, "");
    replTest.accept("def x = 0; while(nextLine() =~ /(\\d)/ng) { x+= $1 }; x", "1\n2\n3\n", 6L, "");
    replTest.accept("def x = 0; while(nextLine() =~ /(\\d)/ng) { x+= $1 }; x", "123\n666\n", 7L, "");
  }

  @Test public void stream() {
    replTest.accept("stream{nextLine()}", "1\n4\n3\n", Utils.listOf("1","4","3"), "");
    replTest.accept("stream{nextLine()}.size()", "1\n4\n3\n", 3, "");
    replTest.accept("stream{nextLine() as int}", "1\n4\n3\n", Utils.listOf(1,4,3), "");
    replTest.accept("stream(nextLine).max{it as int}", "1\n4\n3\n", "4", "");
    replTest.accept("stream(closure:nextLine).max{it as int}", "1\n4\n3\n", "4", "");
    replTest.accept("def f = stream; f(nextLine).max{it as int}", "1\n4\n3\n", "4", "");
    replTest.accept("def f = stream; f(closure:nextLine).max{it as int}", "1\n4\n3\n", "4", "");
  }

  @Test public void groupedRepl() {
    replTest.accept("[''].map{sleep(0,it)}.filter{ !/^$/r }.map{ it.size() }.grouped(2).map{ it }.filter{ true }","\n", Utils.listOf(), "");
  }

  @Test public void globalVars() {
    replError("x", "unknown variable 'x'");
    replTest.accept("x = (byte)1", "", (byte)1, "");
    replTest.accept("x = 1", "", 1, "");
    replTest.accept("x = 1; x", "", 1, "");
    replTest.accept("x = x", "", null, "");
  }

  @Test public void fib() {
    final String fibDef = "int cnt; def fib(def x) { /*cnt++;*/ x <= 2 ? 1 : fib(x-1) + fib(x-2) }";
    final String fibInt = "int cnt; int fib(int x) { /*cnt++;*/ x <= 2 ? 1 : fib(x-1) + fib(x-2) }";
    final String fibDefSleep = "int cnt; def fib(def x) { /*cnt++;*/ x <= 2 ? 1 : sleep(0, fib(x-1)) + sleep(0, fib(x-2)) }";
    final String fibIntSleep = "int cnt; int fib(int x) { /*cnt++;*/ x <= 2 ? 1 : sleep(0, fib(x-1)) + sleep(0, fib(x-2)) }";

    BiConsumer<Integer,Object> runFibDef = (num, expected) -> doTest(fibDef + "; def result = fib(" + num + "); //println cnt; result", expected);
    BiConsumer<Integer,Object> runFibInt = (num, expected) -> doTest(fibInt + "; def result = fib(" + num + "); //println cnt; result", expected);
    BiConsumer<Integer,Object> runFibSleepDef = (num, expected) -> doTest(fibDef + "; def result = fib(" + num + "); //println cnt; result", expected, true);
    BiConsumer<Integer,Object> runFibSleepInt = (num, expected) -> doTest(fibInt + "; def result = fib(" + num + "); //println cnt; result", expected, true);
//    BiConsumer<Integer,Object> runFibSleepDef = (num, expected) -> doTest(fibDefSleep + "; def result = fib(" + num + "); //println cnt; result", expected);
//    BiConsumer<Integer,Object> runFibSleepInt = (num, expected) -> doTest(fibIntSleep + "; def result = fib(" + num + "); //println cnt; result", expected);

//    debug=true;
    runFibDef.accept(40, 102334155);
    runFibInt.accept(40, 102334155);
    runFibDef.accept(20, 6765);
    runFibInt.accept(20, 6765);
    runFibSleepDef.accept(20, 6765);
    runFibSleepInt.accept(20, 6765);

    BiConsumer<Integer,Runnable> ntimes = (n,runnable) -> IntStream.range(0,n).forEach(i -> runnable.run());

    final int ITERATIONS = 0;
    Map<String,Object> globals   = new HashMap<>();
    JactlScript        scriptDef = compile(fibDef + "; fib(40)");
    JactlScript        scriptInt = compile(fibInt + "; fib(40)");
    JactlScript scriptSleepDef = compile(fibDefSleep + "; fib(20)");
    JactlScript scriptSleepInt = compile(fibIntSleep + "; fib(20)");
    ntimes.accept(ITERATIONS, () -> {
      long start = System.currentTimeMillis();
      scriptDef.runSync(globals);
      System.out.println("Def Duration=" + (System.currentTimeMillis() - start) + "ms");
    });
    ntimes.accept(ITERATIONS, () -> {
      long start = System.currentTimeMillis();
      scriptInt.runSync(globals);
      System.out.println("Int Duration=" + (System.currentTimeMillis() - start) + "ms");
    });
    ntimes.accept(ITERATIONS, () -> {
      long start = System.currentTimeMillis();
      scriptSleepDef.runSync(globals);
      System.out.println("sleep Def Duration=" + (System.currentTimeMillis() - start) + "ms");
    });
    ntimes.accept(ITERATIONS, () -> {
      long start = System.currentTimeMillis();
      scriptSleepInt.runSync(globals);
      System.out.println("sleep Int Duration=" + (System.currentTimeMillis() - start) + "ms");
    });
  }

  private interface InputOutputTest {
    public void accept(String code, String input, Object expectedResult, String expectedOutput);
  }
}